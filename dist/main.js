/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={138:(e,t,n)=>{"use strict";const s=n(581),r=n(329);s.setBackend("webgl"),new r.VGG},151:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Log=void 0;class n{static info(e){const t=document.createElement("div");for(console.log(e),"string"==typeof e?t.innerText=`${(window.performance.now()/1e3).toFixed(2)}: ${e}`:(t.innerText=JSON.stringify(e,null,1),t.style.setProperty("color","blue")),n.div.appendChild(t);n.div.children.length>15;)n.div.children[0].remove()}static initialDiv(){const e=document.createElement("div");return setTimeout((()=>{console.log("Adding logging..."),document.getElementsByTagName("body")[0].appendChild(e)}),100),e}}t.Log=n,n.div=n.initialDiv()},329:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.VGG=void 0;const s=n(581),r=n(151);class a extends s.layers.Layer{constructor(e,t,n){super({}),this.g=e,this.model=t,this.expectedY=n}computeOutputShape(e){return e}callOne(e){const t=this.model.predict(e),n=s.sub(this.expectedY,t),r=this.g(e,n),a=s.abs(r),i=s.max(a),o=s.div(.05,i),l=s.mul(r,o),u=s.randomUniform(e.shape,-.005,.005),c=s.add(l,u),h=s.clipByValue(c,0,1);return s.add(e,h)}call(e,t){if(e instanceof s.Tensor)return this.callOne(e);{const t=[];for(const n of e)t.push(this.callOne(n));return t}}getClassName(){return"ApplyDeltaLayer"}}t.VGG=class{constructor(){r.Log.info(s.memory().numBytes),this.ioCanvas=document.createElement("canvas"),this.ioCanvas.width=224,this.ioCanvas.height=224,setTimeout((()=>{const e=document.getElementsByTagName("body")[0];e.innerText="",e.appendChild(this.ioCanvas);const t=document.createElement("div");t.innerText="GO!!!!",e.appendChild(t),t.addEventListener("click",(()=>{this.start()}));const n=document.createElement("div");n.innerText="ITERATE",e.appendChild(n),n.addEventListener("click",(()=>{this.iterate(10)}))}),10);const e=this.ioCanvas.getContext("2d"),t=e.createLinearGradient(112,102,112,122);t.addColorStop(0,"skyblue"),t.addColorStop(1,"darkolivegreen"),e.fillStyle=t,e.fillRect(0,0,224,224);const n=e.createRadialGradient(122,122,10,112,112,60);n.addColorStop(0,"white"),n.addColorStop(1,"lightgray"),e.fillStyle=n,e.beginPath(),e.arc(112,112,90,0,2*Math.PI),e.fill(),e.fillStyle="black",this.targetNumber=Math.trunc(1e3*Math.random()),e.textAlign="center",e.fillText(this.targetNumber.toFixed(0),112,20)}start(){const e=new Float32Array(1e3);e[this.targetNumber]=1,this.expectedYTensor=s.tensor1d(e),r.Log.info("Loading..."),s.loadLayersModel("vgg/model.json").then((e=>{this.model=e,r.Log.info("Loaded."),this.g=s.grad((e=>this.model.predict(e))),this.inputVariable=s.variable(this.getTensorFromCanvas()),this.buildDeltaModel(),setTimeout((()=>{this.iterate(10)}),0)})).catch((e=>{console.error(e)}))}buildDeltaModel(){const e=s.input({shape:[224,224,3]}),t=new a(this.g,this.model,this.expectedYTensor).apply(e);this.deltaModel=s.model({inputs:e,outputs:t})}iterate(e){if(0===e)return void r.Log.info("Done.");r.Log.info("Iterating...");const t=[];for(let e=0;e<5;++e){r.Log.info(s.memory().numBytes);const n=this.deltaModel.predict(this.inputVariable),a=s.reshape(n,this.inputVariable.shape);this.inputVariable.assign(a),t.push(n),t.push(a),r.Log.info(`Iteration: ${e}`)}for(const e of t)e.dispose();r.Log.info("Getting result value..."),this.inputVariable.data().then((t=>{this.renderToCanvas(t),r.Log.info("Rendered."),setTimeout((()=>{this.iterate(e-1)}))}))}materialize(e){return r.Log.info("Materializing results..."),new Promise(((t,n)=>{e.data().then((n=>{const r=s.tensor(n,e.shape);t(r)}))}))}getTensorFromCanvas(){const e=s.div(s.browser.fromPixels(this.ioCanvas).resizeBilinear([224,224]).toFloat(),255);return s.reshape(e,[1,224,224,3])}renderToCanvas(e){const t=new Uint8ClampedArray(200704);let n=1e3,s=-1e3;for(let r=0;r<224;++r)for(let a=0;a<224;++a){for(let i=0;i<3;++i){const o=255*e[i+3*a+3*r*224];n=Math.min(o,n),s=Math.max(o,s),t[i+4*a+4*r*224]=o}t[3+4*a+4*r*224]=255}r.Log.info(`Pixel value range: ${n} to ${s}`),this.ioCanvas.getContext("2d").putImageData(new ImageData(t,224,224),0,0)}}},581:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Abs:()=>He,Acos:()=>je,Acosh:()=>qe,AdadeltaOptimizer:()=>Mo,AdagradOptimizer:()=>zo,AdamOptimizer:()=>Wo,AdamaxOptimizer:()=>qo,Add:()=>Ke,AddN:()=>Xe,All:()=>Ye,Any:()=>Je,ArgMax:()=>Ze,ArgMin:()=>Qe,Asin:()=>et,Asinh:()=>tt,Atan:()=>nt,Atan2:()=>rt,Atanh:()=>st,AvgPool:()=>at,AvgPool3D:()=>ot,AvgPool3DGrad:()=>lt,AvgPoolGrad:()=>it,BatchMatMul:()=>ut,BatchToSpaceND:()=>ct,Bincount:()=>ht,BroadcastTo:()=>pt,Callback:()=>Zk,CallbackList:()=>ty,Cast:()=>dt,Ceil:()=>ft,ClipByValue:()=>mt,Complex:()=>gt,ComplexAbs:()=>yt,Concat:()=>bt,Conv2D:()=>xt,Conv2DBackpropFilter:()=>wt,Conv2DBackpropInput:()=>kt,Conv3D:()=>vt,Conv3DBackpropFilterV2:()=>Nt,Conv3DBackpropInputV2:()=>It,Cos:()=>$t,Cosh:()=>Ct,CropAndResize:()=>Tt,Cumsum:()=>St,CustomCallback:()=>ry,DataStorage:()=>U,DenseBincount:()=>Et,DepthToSpace:()=>At,DepthwiseConv2dNative:()=>Rt,DepthwiseConv2dNativeBackpropFilter:()=>Ft,DepthwiseConv2dNativeBackpropInput:()=>Dt,Diag:()=>_t,Dilation2D:()=>Ot,Dilation2DBackpropFilter:()=>Lt,Dilation2DBackpropInput:()=>Mt,ENV:()=>Ve,EarlyStopping:()=>tv,Elu:()=>Bt,EluGrad:()=>Pt,Environment:()=>Be,Equal:()=>Vt,Erf:()=>Wt,Exp:()=>Ut,ExpandDims:()=>Gt,Expm1:()=>Ht,FFT:()=>jt,Fill:()=>qt,FlipLeftRight:()=>Kt,Floor:()=>Xt,FloorDiv:()=>Yt,FromPixels:()=>Ms,FusedBatchNorm:()=>Jt,FusedConv2D:()=>Bs,FusedDepthwiseConv2D:()=>Ps,GatherNd:()=>Qt,GatherV2:()=>Zt,GraphModel:()=>mN,Greater:()=>en,GreaterEqual:()=>tn,History:()=>sy,IFFT:()=>sn,Identity:()=>nn,Imag:()=>rn,InputSpec:()=>Vg,IsFinite:()=>an,IsInf:()=>on,IsNan:()=>ln,KernelBackend:()=>G,LRN:()=>xn,LRNGrad:()=>wn,LayerVariable:()=>Bg,LayersModel:()=>ub,LeakyRelu:()=>un,Less:()=>cn,LessEqual:()=>hn,LinSpace:()=>pn,Log:()=>dn,Log1p:()=>fn,LogSoftmax:()=>bn,LogicalAnd:()=>mn,LogicalNot:()=>gn,LogicalOr:()=>yn,Max:()=>kn,MaxPool:()=>Nn,MaxPool3D:()=>$n,MaxPool3DGrad:()=>Cn,MaxPoolGrad:()=>In,MaxPoolWithArgmax:()=>Sn,Maximum:()=>vn,Mean:()=>Tn,Min:()=>En,Minimum:()=>An,MirrorPad:()=>Rn,Mod:()=>Fn,MomentumOptimizer:()=>Xo,Multinomial:()=>Dn,Multiply:()=>_n,Neg:()=>On,NonMaxSuppressionV3:()=>Ln,NonMaxSuppressionV4:()=>zn,NonMaxSuppressionV5:()=>Bn,NotEqual:()=>Mn,OP_SCOPE_SUFFIX:()=>jr,OneHot:()=>Wn,OnesLike:()=>Pn,Optimizer:()=>Oo,Pack:()=>Vn,PadV2:()=>Un,Pool:()=>Gn,Pow:()=>Hn,Prelu:()=>jn,Prod:()=>qn,RMSPropOptimizer:()=>Yo,RNN:()=>dx,Range:()=>Kn,Rank:()=>xr,Real:()=>Xn,RealDiv:()=>zt,Reciprocal:()=>Yn,Reduction:()=>fp,Relu:()=>Jn,Relu6:()=>ss,Reshape:()=>Zn,ResizeBilinear:()=>ts,ResizeBilinearGrad:()=>ns,ResizeNearestNeighbor:()=>Qn,ResizeNearestNeighborGrad:()=>es,Reverse:()=>rs,RotateWithOffset:()=>Ls,Round:()=>as,Rsqrt:()=>is,SGDOptimizer:()=>Ko,ScatterNd:()=>os,Select:()=>ls,Selu:()=>us,Sequential:()=>pb,Sigmoid:()=>fs,Sign:()=>ds,Sin:()=>hs,Sinh:()=>ps,Slice:()=>cs,Softmax:()=>ws,Softplus:()=>ms,SpaceToBatchND:()=>bs,SparseToDense:()=>Is,SplitV:()=>xs,Sqrt:()=>gs,Square:()=>vs,SquaredDifference:()=>ks,Step:()=>Os,StridedSlice:()=>$s,Sub:()=>Ns,Sum:()=>ys,SymbolicTensor:()=>Ug,Tan:()=>Cs,Tanh:()=>Ss,Tensor:()=>gr,TensorBuffer:()=>pr,Tile:()=>Ts,TopK:()=>Es,Transpose:()=>As,Unique:()=>Rs,Unpack:()=>Fs,UnsortedSegmentSum:()=>Ds,Variable:()=>br,ZerosLike:()=>_s,_FusedMatMul:()=>zs,abs:()=>Vo,acos:()=>Jo,acosh:()=>Zo,add:()=>wo,addN:()=>Qo,all:()=>el,any:()=>tl,argMax:()=>nl,argMin:()=>sl,asin:()=>rl,asinh:()=>al,atan:()=>il,atan2:()=>ol,atanh:()=>ll,avgPool:()=>Nl,avgPool3d:()=>Il,backend:()=>bo,backend_util:()=>g,basicLSTMCell:()=>El,batchNorm:()=>Rl,batchNorm2d:()=>Fl,batchNorm3d:()=>Dl,batchNorm4d:()=>_l,batchToSpaceND:()=>Al,bincount:()=>Ol,booleanMaskAsync:()=>kh,broadcastTo:()=>Ml,browser:()=>l,buffer:()=>Va,callbacks:()=>nv,cast:()=>Ua,ceil:()=>Ll,clipByValue:()=>zl,clone:()=>Ga,complex:()=>Kr,concat:()=>$l,concat1d:()=>Bl,concat2d:()=>Pl,concat3d:()=>Wl,concat4d:()=>Vl,constraints:()=>b,conv1d:()=>Gl,conv2d:()=>Ul,conv2dTranspose:()=>jl,conv3d:()=>ql,conv3dTranspose:()=>Xl,copyRegisteredKernels:()=>Ys,cos:()=>Yl,cosh:()=>Jl,cosineWindow:()=>Ah,cumsum:()=>Zl,customGrad:()=>Fo,data:()=>W,denseBincount:()=>Ql,deprecationWarn:()=>to,depthToSpace:()=>eu,depthwiseConv2d:()=>tu,deregisterOp:()=>lv,device_util:()=>a,diag:()=>nu,dilation2d:()=>su,disableDeprecationWarnings:()=>eo,dispose:()=>oo,disposeVariables:()=>no,div:()=>vo,divNoNan:()=>iu,dot:()=>ou,dropout:()=>Th,elu:()=>lu,enableDebugMode:()=>Qi,enableProdMode:()=>Zi,enclosingPowerOfTwo:()=>Eh,engine:()=>so,env:()=>Pe,equal:()=>ru,erf:()=>uu,exp:()=>cu,expandDims:()=>hu,expm1:()=>pu,eye:()=>fu,fft:()=>Jc,fill:()=>Lo,findBackend:()=>mo,findBackendFactory:()=>go,floor:()=>mu,floorDiv:()=>ko,fused:()=>f,gather:()=>gu,gatherND:()=>Sh,gather_util:()=>u,getBackend:()=>po,getGradient:()=>Gs,getKernel:()=>Us,getKernelsForBackend:()=>Hs,grad:()=>So,grads:()=>To,greater:()=>yu,greaterEqual:()=>bu,ifft:()=>Zc,imag:()=>xu,image:()=>Cp,inTopKAsync:()=>Rh,initializers:()=>x,input:()=>gb,io:()=>i,irfft:()=>Qc,isFinite:()=>wu,isInf:()=>ku,isNaN:()=>vu,keep:()=>lo,kernel_impls:()=>y,layers:()=>w,leakyRelu:()=>Nu,less:()=>Iu,lessEqual:()=>$u,linalg:()=>Sp,linspace:()=>Cu,loadGraphModel:()=>gN,loadLayersModel:()=>mb,localResponseNormalization:()=>Su,log:()=>Tu,log1p:()=>Eu,logSigmoid:()=>Fu,logSoftmax:()=>Ou,logSumExp:()=>Gu,logicalAnd:()=>Hu,logicalNot:()=>ju,logicalOr:()=>qu,logicalXor:()=>Ku,losses:()=>Tp,matMul:()=>ui,math:()=>o,max:()=>Du,maxPool:()=>Xu,maxPool3d:()=>Yu,maxPoolWithArgmax:()=>Ju,maximum:()=>jo,mean:()=>Zu,memory:()=>ro,metrics:()=>k,min:()=>Qu,minimum:()=>ec,mirrorPad:()=>tc,mod:()=>nc,model:()=>db,models:()=>v,moments:()=>sc,movingAverage:()=>Ih,mul:()=>No,multiRNNCell:()=>rc,multinomial:()=>ac,neg:()=>Au,nextFrame:()=>Fp,norm:()=>Nh,notEqual:()=>ic,oneHot:()=>ci,ones:()=>lc,onesLike:()=>uc,op:()=>qr,outerProduct:()=>cc,pad:()=>hc,pad1d:()=>pc,pad2d:()=>dc,pad3d:()=>fc,pad4d:()=>mc,pool:()=>yc,pow:()=>Bo,prelu:()=>bc,print:()=>Ha,prod:()=>xc,profile:()=>ao,rand:()=>wc,randomGamma:()=>$c,randomNormal:()=>Cc,randomUniform:()=>Sc,range:()=>Tc,ready:()=>ho,real:()=>Ec,reciprocal:()=>Ac,registerBackend:()=>yo,registerCallbackConstructor:()=>yb,registerGradient:()=>qs,registerKernel:()=>js,registerOp:()=>iv,regularizers:()=>N,relu:()=>Rc,relu6:()=>Fc,removeBackend:()=>fo,reshape:()=>vl,reverse:()=>Dc,reverse1d:()=>_c,reverse2d:()=>Oc,reverse3d:()=>Mc,reverse4d:()=>Lc,rfft:()=>th,round:()=>zc,rsqrt:()=>Bc,scalar:()=>_o,scatterND:()=>$h,scatter_util:()=>c,selu:()=>Pc,separableConv2d:()=>Wc,sequential:()=>fb,serialization:()=>p,setBackend:()=>co,setPlatform:()=>xo,setdiff1dAsync:()=>Vc,sigmoid:()=>Cl,sign:()=>Uc,signal:()=>$p,sin:()=>Gc,sinh:()=>Hc,slice:()=>Sl,slice1d:()=>jc,slice2d:()=>qc,slice3d:()=>Kc,slice4d:()=>Xc,slice_util:()=>h,softmax:()=>Yc,softplus:()=>Ru,spaceToBatchND:()=>gc,sparseToDense:()=>Ch,spectral:()=>Ip,split:()=>eh,sqrt:()=>Io,square:()=>$o,squaredDifference:()=>nh,squeeze:()=>sh,stack:()=>rh,step:()=>ah,stridedSlice:()=>ih,sub:()=>Po,sum:()=>_u,sumOutType:()=>Cr,tan:()=>oh,tanh:()=>Tl,tensor:()=>Yr,tensor1d:()=>lh,tensor2d:()=>uh,tensor3d:()=>di,tensor4d:()=>ch,tensor5d:()=>hh,tensor6d:()=>ph,tensor_util:()=>r,test_util:()=>d,tidy:()=>io,tile:()=>du,time:()=>uo,topk:()=>dh,train:()=>Ap,transpose:()=>hi,truncatedNormal:()=>fh,unique:()=>mh,unregisterGradient:()=>Xs,unregisterKernel:()=>Ks,unsortedSegmentSum:()=>gh,unstack:()=>yh,upcastType:()=>$r,util:()=>s,valueAndGrad:()=>Eo,valueAndGrads:()=>Ao,variable:()=>bh,variableGrads:()=>Ro,version:()=>uz,version_converter:()=>yN,version_core:()=>Ji,version_layers:()=>zy,where:()=>au,whereAsync:()=>wh,zeros:()=>oc,zerosLike:()=>Co});var s={};n.r(s),n.d(s,{arraysEqual:()=>ae,assert:()=>Q,assertNonNegativeIntegerDimensions:()=>Oe,assertNonNull:()=>te,assertShapesMatch:()=>ee,bytesFromStringArray:()=>ve,bytesPerElement:()=>ke,checkConversionForErrors:()=>ye,clamp:()=>K,computeStrides:()=>Ee,createScalarValue:()=>Zs,createShuffledIndices:()=>ue,decodeString:()=>sr,distSquared:()=>Z,encodeString:()=>nr,fetch:()=>tr,flatten:()=>ne,getArrayFromDType:()=>ge,getTypedArrayFromDType:()=>me,hasEncodingLoss:()=>xe,indexToLoc:()=>Le,inferDtype:()=>Ce,inferFromImplicitShape:()=>pe,isBoolean:()=>Ie,isFunction:()=>Se,isInt:()=>ie,isNumber:()=>$e,isPromise:()=>ze,isScalarShape:()=>re,isString:()=>Ne,isTypedArray:()=>we,isValidDtype:()=>be,locToIndex:()=>Me,makeOnesTypedArray:()=>Fe,makeZerosNestedTypedArray:()=>_e,makeZerosTypedArray:()=>De,nearestDivisor:()=>Te,nearestLargerEven:()=>X,now:()=>er,parseAxisParam:()=>de,randUniform:()=>J,repeatedTry:()=>he,rightPad:()=>ce,shuffle:()=>j,shuffleCombo:()=>q,sizeFromShape:()=>se,sizeToSquarishShape:()=>le,squeezeShape:()=>fe,sum:()=>Y,tanh:()=>oe,toNestedArray:()=>Re,toTypedArray:()=>Qs});var r={};n.r(r),n.d(r,{assertTypesMatch:()=>Tr,getTensorsInContainer:()=>Ar,isTensorInList:()=>Er,makeTypesMatch:()=>Sr});var a={};n.r(a),n.d(a,{isBrowser:()=>Br,isMobile:()=>zr});var i={};n.r(i),n.d(i,{browserFiles:()=>Xa,browserHTTPRequest:()=>ri,concatenateArrayBuffers:()=>sa,copyModel:()=>za,decodeWeights:()=>Qr,encodeWeights:()=>Zr,fromMemory:()=>oi,getLoadHandlers:()=>ha,getModelArtifactsInfoForJSON:()=>aa,getSaveHandlers:()=>ca,http:()=>si,isHTTPScheme:()=>ti,listModels:()=>Ma,loadWeights:()=>Za,moveModel:()=>Ba,registerLoadRouter:()=>ua,registerSaveRouter:()=>la,removeModel:()=>La,weightsLoaderFactory:()=>Qa,withSaveHandler:()=>li});var o={};n.r(o),n.d(o,{confusionMatrix:()=>pi});var l={};n.r(l),n.d(l,{fromPixels:()=>gi,toPixels:()=>mi});var u={};n.r(u),n.d(u,{prepareAndValidate:()=>yi});var c={};n.r(c),n.d(c,{calculateShapes:()=>wi,validateInput:()=>xi,validateUpdateShape:()=>bi});var h={};n.r(h),n.d(h,{assertParamsValid:()=>ki,computeFlatOffset:()=>_i,computeOutShape:()=>Ni,getNormalizedAxes:()=>Si,isSliceContinous:()=>Di,maskToAxes:()=>vi,parseSliceParams:()=>Oi,sliceInfo:()=>Mi,startForAxis:()=>Ri,startIndicesWithElidedDims:()=>Ti,stopForAxis:()=>Fi,stopIndicesWithElidedDims:()=>Ei,stridesForAxis:()=>Ai,stridesWithElidedDims:()=>Ii});var p={};n.r(p),n.d(p,{Serializable:()=>Li,SerializationMap:()=>zi,registerClass:()=>Bi});var d={};n.r(d),n.d(d,{TEST_EPSILON_FLOAT16:()=>Pi,encodeStrings:()=>Yi,expectArrayBuffersEqual:()=>Xi,expectArraysClose:()=>Wi,expectArraysEqual:()=>Hi,expectNumbersClose:()=>ji,expectPromiseToFail:()=>Gi,expectValuesInRange:()=>Ki,testEpsilon:()=>Vi});var f={};n.r(f),n.d(f,{conv2d:()=>Lh,depthwiseConv2d:()=>Ph,matMul:()=>Wh});var m={};n.r(m),n.d(m,{collectGatherOpShapeInfo:()=>cd,computeOutShape:()=>ud,segOpComputeOptimalWindowSize:()=>ld});var g={};n.r(g),n.d(g,{ERF_A1:()=>jp,ERF_A2:()=>qp,ERF_A3:()=>Kp,ERF_A4:()=>Xp,ERF_A5:()=>Yp,ERF_P:()=>Hp,PARALLELIZE_THRESHOLD:()=>Op,SELU_SCALE:()=>Gp,SELU_SCALEALPHA:()=>Up,applyActivation:()=>Oh,assertAndGetBroadcastShape:()=>Ho,assertAxesAreInnerMostDims:()=>Pu,assertParamsConsistent:()=>Dp,assignToTypedArray:()=>rd,axesAreInnerMostDims:()=>Mu,calculateShapes:()=>wi,combineLocations:()=>Lu,complexWithEvenIndex:()=>td,complexWithOddIndex:()=>nd,computeConv2DInfo:()=>pl,computeConv3DInfo:()=>dl,computeDefaultPad:()=>fl,computeDilation2DInfo:()=>ul,computeOptimalWindowSize:()=>Mp,computeOutAndReduceShapes:()=>zu,computeOutShape:()=>_p,computePool2DInfo:()=>cl,computePool3DInfo:()=>hl,convertConv2DDataFormat:()=>kl,eitherStridesOrDilationsAreOne:()=>wl,expandShapeToKeepDim:()=>Bu,exponent:()=>id,exponents:()=>ad,fromStringArrayToUint8:()=>pd,fromUint8ToStringArray:()=>hd,getAxesPermutation:()=>Wu,getBroadcastDims:()=>Uo,getComplexWithIndex:()=>sd,getFusedBiasGradient:()=>_h,getFusedDyActivation:()=>Dh,getImageCenter:()=>Lp,getInnerMostAxes:()=>Uu,getPermuted:()=>Bp,getReductionAxes:()=>Go,getReshaped:()=>zp,getReshapedPermuted:()=>Pp,getSliceBeginCoords:()=>Wp,getSliceSize:()=>Vp,getUndoAxesPermutation:()=>Vu,log:()=>Zp,mergeRealAndImagArrays:()=>Qp,prepareAndValidate:()=>yi,prepareSplitSize:()=>od,segment_util:()=>m,shouldFuse:()=>Mh,slice_util:()=>h,splitRealAndImagArrays:()=>ed,tupleValuesAreOne:()=>xl,upcastType:()=>$r,validateInput:()=>xi,validateUpdateShape:()=>bi,warn:()=>Jp});var y={};n.r(y),n.d(y,{nonMaxSuppressionV3Impl:()=>Qh,nonMaxSuppressionV4Impl:()=>ep,nonMaxSuppressionV5Impl:()=>tp,whereImpl:()=>xh});var b={};n.r(b),n.d(b,{maxNorm:()=>om,minMaxNorm:()=>cm,nonNeg:()=>um,unitNorm:()=>lm});var x={};n.r(x),n.d(x,{constant:()=>yg,glorotNormal:()=>Ig,glorotUniform:()=>Ng,heNormal:()=>$g,heUniform:()=>Cg,identity:()=>kg,leCunNormal:()=>Sg,leCunUniform:()=>Tg,ones:()=>gg,orthogonal:()=>Eg,randomNormal:()=>xg,randomUniform:()=>bg,truncatedNormal:()=>wg,varianceScaling:()=>vg,zeros:()=>mg});var w={};n.r(w),n.d(w,{Layer:()=>qg,RNN:()=>dx,RNNCell:()=>fx,activation:()=>Dw,add:()=>Vw,alphaDropout:()=>Fk,average:()=>Uw,averagePooling1d:()=>Zw,averagePooling2d:()=>tk,averagePooling3d:()=>rk,avgPool1d:()=>Qw,avgPool2d:()=>nk,avgPool3d:()=>ak,avgPooling1d:()=>ek,avgPooling2d:()=>sk,avgPooling3d:()=>ik,batchNormalization:()=>Xw,bidirectional:()=>Ik,concatenate:()=>Gw,conv1d:()=>$w,conv2d:()=>Cw,conv2dTranspose:()=>Sw,conv3d:()=>Tw,convLstm2d:()=>wk,convLstm2dCell:()=>kk,cropping2D:()=>Aw,dense:()=>_w,depthwiseConv2d:()=>Fw,dot:()=>Kw,dropout:()=>Ow,elu:()=>xw,embedding:()=>Ww,flatten:()=>Lw,gaussianDropout:()=>Rk,gaussianNoise:()=>Ak,globalAveragePooling1d:()=>ok,globalAveragePooling2d:()=>lk,globalMaxPool1d:()=>Ck,globalMaxPool2d:()=>Sk,globalMaxPooling1d:()=>uk,globalMaxPooling2d:()=>ck,gru:()=>fk,gruCell:()=>mk,input:()=>gb,inputLayer:()=>bw,layerNormalization:()=>Yw,leakyReLU:()=>kw,lstm:()=>gk,lstmCell:()=>yk,masking:()=>Dk,maxPool1d:()=>Tk,maxPool2d:()=>Ek,maxPooling1d:()=>hk,maxPooling2d:()=>pk,maxPooling3d:()=>dk,maximum:()=>Hw,minimum:()=>jw,multiply:()=>qw,permute:()=>Pw,prelu:()=>vw,reLU:()=>ww,repeatVector:()=>zw,reshape:()=>Bw,rnn:()=>vk,separableConv2d:()=>Ew,simpleRNN:()=>bk,simpleRNNCell:()=>xk,softmax:()=>Nw,spatialDropout1d:()=>Mw,stackedRNNCells:()=>Nk,thresholdedReLU:()=>Iw,timeDistributed:()=>$k,upSampling2d:()=>Rw,zeroPadding2d:()=>Jw});var k={};n.r(k),n.d(k,{MAPE:()=>Gk,MSE:()=>qk,binaryAccuracy:()=>_k,binaryCrossentropy:()=>Ok,categoricalAccuracy:()=>Lk,categoricalCrossentropy:()=>zk,cosineProximity:()=>Wk,mape:()=>Hk,meanAbsoluteError:()=>Vk,meanAbsolutePercentageError:()=>Uk,meanSquaredError:()=>jk,mse:()=>Kk,precision:()=>Bk,recall:()=>Pk,sparseCategoricalAccuracy:()=>Mk});var v={};n.r(v),n.d(v,{modelFromJSON:()=>hb});var N={};n.r(N),n.d(N,{l1:()=>Yk,l1l2:()=>Xk,l2:()=>Jk});var I={};n.r(I),n.d(I,{json:()=>gv});var $={};n.r($),n.d($,{json:()=>yv});var C={};n.r(C),n.d(C,{json:()=>bv});var S={};n.r(S),n.d(S,{json:()=>xv});var T={};n.r(T),n.d(T,{json:()=>wv});var E={};n.r(E),n.d(E,{json:()=>kv});var A={};n.r(A),n.d(A,{json:()=>vv});var R={};n.r(R),n.d(R,{json:()=>Nv});var F={};n.r(F),n.d(F,{json:()=>Iv});var D={};n.r(D),n.d(D,{json:()=>$v});var _={};n.r(_),n.d(_,{json:()=>Cv});var O={};n.r(O),n.d(O,{json:()=>Sv});var M={};n.r(M),n.d(M,{json:()=>Tv});var L={};n.r(L),n.d(L,{json:()=>Ev});var z={};n.r(z),n.d(z,{json:()=>Av});var B={};n.r(B),n.d(B,{json:()=>Rv});var P={};n.r(P),n.d(P,{json:()=>Fv});var W={};n.r(W),n.d(W,{CSVDataset:()=>aI,Dataset:()=>qN,FileDataSource:()=>yI,TextLineDataset:()=>ZN,URLDataSource:()=>bI,array:()=>XN,csv:()=>xI,func:()=>wI,generator:()=>kI,microphone:()=>NI,version_data:()=>II,webcam:()=>vI,zip:()=>YN});var V={};n.r(V),n.d(V,{addImpl:()=>e$,bincountImpl:()=>j$,bincountReduceImpl:()=>q$,ceilImpl:()=>Y$,concatImpl:()=>nC,expImpl:()=>VC,expm1Impl:()=>qC,floorImpl:()=>fS,gatherV2Impl:()=>NS,greaterImpl:()=>$S,lessImpl:()=>zS,linSpaceImpl:()=>GS,logImpl:()=>jS,maxImpl:()=>oT,maximumImpl:()=>cT,minimumImpl:()=>vT,multiplyImpl:()=>YC,negImpl:()=>FT,notEqualImpl:()=>PT,prodImpl:()=>QT,rangeImpl:()=>tE,rsqrtImpl:()=>dE,simpleAbsImpl:()=>u$,sliceImpl:()=>V$,squaredDifferenceImpl:()=>PE,stridedSliceImpl:()=>HE,subImpl:()=>sS,tileImpl:()=>YE,topKImpl:()=>JE,transposeImpl:()=>g$,uniqueImpl:()=>ZE});class U{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class G{refCount(e){return H("refCount")}incRef(e){return H("incRef")}timerAvailable(){return!0}time(e){return H("time")}read(e){return H("read")}readSync(e){return H("readSync")}numDataIds(){return H("numDataIds")}disposeData(e,t){return H("disposeData")}write(e,t,n){return H("write")}move(e,t,n,s,r){return H("move")}memory(){return H("memory")}floatPrecision(){return H("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return H("dispose")}}function H(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function j(e){let t=e.length,n=0,s=0;for(;t>0;)s=Math.random()*t|0,t--,n=e[t],e[t]=e[s],e[s]=n}function q(e,t){if(e.length!==t.length)throw Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n,s,r=e.length,a=0;for(;r>0;)a=Math.random()*r|0,r--,n=e[r],s=t[r],e[r]=e[a],t[r]=t[a],e[a]=n,t[a]=s}function K(e,t,n){return Math.max(e,Math.min(t,n))}function X(e){return e%2==0?e:e+1}function Y(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function J(e,t){const n=Math.random();return t*n+(1-n)*e}function Z(e,t){let n=0;for(let s=0;s<e.length;s++){const r=Number(e[s])-Number(t[s]);n+=r*r}return n}function Q(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function ee(e,t,n=""){Q(ae(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function te(e){Q(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function ne(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||we(e)&&!n)for(let s=0;s<e.length;++s)ne(e[s],t,n);else t.push(e);return t}function se(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function re(e){return 0===e.length}function ae(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function ie(e){return e%1==0}function oe(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function le(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function ue(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return j(t),t}function ce(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function he(e,t=(e=>0),n){return new Promise(((s,r)=>{let a=0;const i=()=>{if(e())return void s();a++;const o=t(a);null!=n&&a>=n?r():setTimeout(i,o)};i()}))}function pe(e,t){let n=1,s=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${t}`);s=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const r=e.slice();return r[s]=t/n,r}function de(e,t){const n=t.length;return Q((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),Q(e.every((e=>ie(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function fe(e,t){const n=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||r?null:de(t,e).sort();let i=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[i]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[i]||a[i]>t)&&1===e[t]&&(n.push(e[t]),s.push(t)),a[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),s.push(t))}return{newShape:n,keptDims:s}}function me(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function ge(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function ye(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}function be(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function xe(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function we(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function ke(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function ve(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function Ne(e){return"string"==typeof e||e instanceof String}function Ie(e){return"boolean"==typeof e}function $e(e){return"number"==typeof e}function Ce(e){return Array.isArray(e)?Ce(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":$e(e)?"float32":Ne(e)?"string":Ie(e)?"bool":"float32"}function Se(e){return!!(e&&e.constructor&&e.call&&e.apply)}function Te(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function Ee(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function Ae(e,t,n){const s=new Array;if(1===t.length){const r=t[0];for(let t=0;t<r;t++)s[t]=n[e+t]}else{const r=t[0],a=t.slice(1),i=a.reduce(((e,t)=>e*t));for(let t=0;t<r;t++)s[t]=Ae(e+t*i,a,n)}return s}function Re(e,t){if(0===e.length)return t[0];const n=e.reduce(((e,t)=>e*t));if(0===n)return[];if(n!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}.`);return Ae(0,e,t)}function Fe(e,t){const n=De(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function De(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function _e(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return Re(e,new Float32Array(n));if("int32"===t)return Re(e,new Int32Array(n));if("bool"===t)return Re(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function Oe(e){e.forEach((t=>{Q(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function Me(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let t=0;t<e.length-1;++t)s+=n[t]*e[t];return s}function Le(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let t=0;t<s.length-1;++t)s[t]=Math.floor(e/n[t]),e-=s[t]*n[t];return s[s.length-1]=e,s}function ze(e){return e&&e.then&&"function"==typeof e.then}class Be{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(ze(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=function(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}(this.global.location.search);"tfjsflags"in e&&e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}function Pe(){return Ve}let We,Ve=null;function Ue(){if(null==We){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}We=e}return We}function Ge(e,t){const n=function(){const e=Ue();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}const He="Abs",je="Acos",qe="Acosh",Ke="Add",Xe="AddN",Ye="All",Je="Any",Ze="ArgMax",Qe="ArgMin",et="Asin",tt="Asinh",nt="Atan",st="Atanh",rt="Atan2",at="AvgPool",it="AvgPoolGrad",ot="AvgPool3D",lt="AvgPool3DGrad",ut="BatchMatMul",ct="BatchToSpaceND",ht="Bincount",pt="BroadcastTo",dt="Cast",ft="Ceil",mt="ClipByValue",gt="Complex",yt="ComplexAbs",bt="Concat",xt="Conv2D",wt="Conv2DBackpropFilter",kt="Conv2DBackpropInput",vt="Conv3D",Nt="Conv3DBackpropFilterV2",It="Conv3DBackpropInputV2",$t="Cos",Ct="Cosh",St="Cumsum",Tt="CropAndResize",Et="DenseBincount",At="DepthToSpace",Rt="DepthwiseConv2dNative",Ft="DepthwiseConv2dNativeBackpropFilter",Dt="DepthwiseConv2dNativeBackpropInput",_t="Diag",Ot="Dilation2D",Mt="Dilation2DBackpropInput",Lt="Dilation2DBackpropFilter",zt="RealDiv",Bt="Elu",Pt="EluGrad",Wt="Erf",Vt="Equal",Ut="Exp",Gt="ExpandDims",Ht="Expm1",jt="FFT",qt="Fill",Kt="FlipLeftRight",Xt="Floor",Yt="FloorDiv",Jt="FusedBatchNorm",Zt="GatherV2",Qt="GatherNd",en="Greater",tn="GreaterEqual",nn="Identity",sn="IFFT",rn="Imag",an="IsFinite",on="IsInf",ln="IsNan",un="LeakyRelu",cn="Less",hn="LessEqual",pn="LinSpace",dn="Log",fn="Log1p",mn="LogicalAnd",gn="LogicalNot",yn="LogicalOr",bn="LogSoftmax",xn="LRN",wn="LRNGrad",kn="Max",vn="Maximum",Nn="MaxPool",In="MaxPoolGrad",$n="MaxPool3D",Cn="MaxPool3DGrad",Sn="MaxPoolWithArgmax",Tn="Mean",En="Min",An="Minimum",Rn="MirrorPad",Fn="Mod",Dn="Multinomial",_n="Multiply",On="Neg",Mn="NotEqual",Ln="NonMaxSuppressionV3",zn="NonMaxSuppressionV4",Bn="NonMaxSuppressionV5",Pn="OnesLike",Wn="OneHot",Vn="Pack",Un="PadV2",Gn="Pool",Hn="Pow",jn="Prelu",qn="Prod",Kn="Range",Xn="Real",Yn="Reciprocal",Jn="Relu",Zn="Reshape",Qn="ResizeNearestNeighbor",es="ResizeNearestNeighborGrad",ts="ResizeBilinear",ns="ResizeBilinearGrad",ss="Relu6",rs="Reverse",as="Round",is="Rsqrt",os="ScatterNd",ls="Select",us="Selu",cs="Slice",hs="Sin",ps="Sinh",ds="Sign",fs="Sigmoid",ms="Softplus",gs="Sqrt",ys="Sum",bs="SpaceToBatchND",xs="SplitV",ws="Softmax",ks="SquaredDifference",vs="Square",Ns="Sub",Is="SparseToDense",$s="StridedSlice",Cs="Tan",Ss="Tanh",Ts="Tile",Es="TopK",As="Transpose",Rs="Unique",Fs="Unpack",Ds="UnsortedSegmentSum",_s="ZerosLike",Os="Step",Ms="FromPixels",Ls="RotateWithOffset",zs="_FusedMatMul",Bs="FusedConv2D",Ps="FusedDepthwiseConv2D",Ws=Ge("kernelRegistry",(()=>new Map)),Vs=Ge("gradRegistry",(()=>new Map));function Us(e,t){const n=Js(e,t);return Ws.get(n)}function Gs(e){return Vs.get(e)}function Hs(e){const t=Ws.entries(),n=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[a,i]=r,[o]=a.split("_");o===e&&n.push(i)}return n}function js(e){const{kernelName:t,backendName:n}=e,s=Js(t,n);Ws.has(s)&&console.warn(`The kernel '${t}' for backend '${n}' is already registered`),Ws.set(s,e)}function qs(e){const{kernelName:t}=e;Vs.has(t)&&Pe().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${t}'`),Vs.set(t,e)}function Ks(e,t){const n=Js(e,t);if(!Ws.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);Ws.delete(n)}function Xs(e){if(!Vs.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);Vs.delete(e)}function Ys(e,t){Hs(e).forEach((e=>{js(Object.assign({},e,{backendName:t}))}))}function Js(e,t){return`${t}_${e}`}function Zs(e,t){return"string"===t?nr(e):Qs([e],t)}function Qs(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=ne(e)),Pe().getBool("DEBUG")&&ye(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function er(){return Pe().platform.now()}function tr(e,t){return Pe().platform.fetch(e,t)}function nr(e,t="utf-8"){return t=t||"utf-8",Pe().platform.encode(e,t)}function sr(e,t="utf-8"){return t=t||"utf-8",Pe().platform.decode(e,t)}class rr{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new ir)}profileKernel(e,t,n){let s;const r=()=>{s=n()};let a;const i=er();if(this.backendTimer.timerAvailable()?a=this.backendTimer.time(r):(r(),s.map((e=>e.dataSync())),a=Promise.resolve({kernelMs:er()-i})),Pe().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<s.length;t++){const n=s[t];n.data().then((t=>{ar(t,n.dtype,e)}))}return{kernelName:e,outputs:s,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:r,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),s,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],r,n[2])}))}))}}function ar(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const s=e[t];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class ir{logKernelProfile(e,t,n,s,r,a){const i="number"==typeof s?ce(`${s}ms`,9):s.error,o=ce(e,25),l=t.rank,u=t.size,c=ce(t.shape.toString(),14);let h="";for(const e in r){const n=r[e];if(null!=n){const s=n.shape||t.shape,r=s.length;h+=`${e}: ${r}D ${r>0?s:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function or(e,t,n,s){const r=Ee(t),a=function(e,t,n,s){const r=se(t),a=s[s.length-1],i=new Array(a).fill(0),o=t.length,l="complex64"===n?hr(e):e;if(o>1)for(let e=0;e<r/a;e++){const t=e*a;for(let e=0;e<a;e++)i[e]=Math.max(i[e],lr(l[t+e],0,n).length)}return i}(e,t,n,r),i=t.length,o=cr(e,t,n,r,a),l=["Tensor"];return s&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map((e=>"    "+e)).join("\n")),l.join("\n")}function lr(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:Ne(e)?`'${e}'`:"bool"===n?ur(e):parseFloat(e.toFixed(7)).toString(),ce(s,t)}function ur(e){return 0===e?"false":"true"}function cr(e,t,n,s,r,a=!0){const i="complex64"===n?2:1,o=t[0],l=t.length;if(0===l)return"complex64"===n?[lr(hr(e)[0],0,n)]:"bool"===n?[ur(e[0])]:[e[0].toString()];if(1===l){if(o>20){const t=3*i;let s=Array.from(e.slice(0,t)),a=Array.from(e.slice((o-3)*i,o*i));return"complex64"===n&&(s=hr(s),a=hr(a)),["["+s.map(((e,t)=>lr(e,r[t],n))).join(", ")+", ..., "+a.map(((e,t)=>lr(e,r[o-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?hr(e):Array.from(e)).map(((e,t)=>lr(e,r[t],n))).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*i,p=[];if(o>20){for(let t=0;t<3;t++){const s=t*h,a=s+h;p.push(...cr(e.slice(s,a),u,n,c,r,!1))}p.push("...");for(let t=o-3;t<o;t++){const s=t*h,a=s+h;p.push(...cr(e.slice(s,a),u,n,c,r,t===o-1))}}else for(let t=0;t<o;t++){const s=t*h,a=s+h;p.push(...cr(e.slice(s,a),u,n,c,r,t===o-1))}const d=2===l?",":"";p[0]="["+p[0]+d;for(let e=1;e<p.length-1;e++)p[e]=" "+p[e]+d;let f=",\n";for(let e=2;e<l;e++)f+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(a?"":f),p}function hr(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class pr{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=se(e),null!=n){const e=n.length;Q(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||ge(t,this.size),this.strides=Ee(e)}set(e,...t){0===t.length&&(t=[0]),Q(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return dr().makeTensor(this.values,this.shape,this.dtype)}}let dr=null,fr=null,mr=null;class gr{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=se(e),this.strides=Ee(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return fr.buffer(this.shape,this.dtype,e)}bufferSync(){return fr.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Re(this.shape,e)}arraySync(){return Re(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const e=dr().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>sr(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=dr().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>sr(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await dr().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(dr().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return fr.print(this,e)}clone(){return this.throwIfDisposed(),fr.clone(this)}toString(e=!1){return or(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),fr.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),dr().makeVariable(this,e,t,n)}}function yr(){return Ge("Tensor",(()=>gr))}Object.defineProperty(gr,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),yr();class br extends gr{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!ae(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);dr().disposeTensor(this),this.dataId=e.dataId,dr().incRef(this,null)}dispose(){dr().disposeVariable(this),this.isDisposedInternal=!0}}var xr,wr,kr,vr,Nr;Object.defineProperty(br,Symbol.hasInstance,{value:e=>e instanceof gr&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(xr||(xr={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(wr||(wr={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(kr||(kr={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(vr||(vr={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(Nr||(Nr={}));const Ir={float32:vr,int32:wr,bool:kr,complex64:Nr};function $r(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return Ir[e][t]}function Cr(e){return $r(e,"int32")}function Sr(e,t){if(e.dtype===t.dtype)return[e,t];const n=$r(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function Tr(e,t){Q(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function Er(e,t){return t.some((t=>t.id===e.id))}function Ar(e){const t=[];return Rr(e,t,new Set),t}function Rr(e,t,n){if(null==e)return;if(e instanceof gr)return void t.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const r=e;for(const e in r){const s=r[e];n.has(s)||(n.add(s),Rr(s,t,n))}}function Fr(e){return null!=e.kernelName}class Dr{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class _r{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Dr}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(console.warn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new rr(this.backendInstance),!0}setupRegisteredKernels(){Hs(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){Hs(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof G||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,s=n.then((n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0)))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message)),!1)));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(t){return console.warn(`Initialization of backend ${e} failed`),console.warn(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:r}=this.initializeBackend(n);if(r||s)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,r=this.readSync(t),a=s.refCount(t);s.disposeData(t,!0),n.backend=e,e.move(t,r,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun((()=>this.startScope(s)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return _r.nextTensorId++}nextVariableId(){return _r.nextVariableId++}clone(e){const t=Mr.runKernel(nn,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e};return Mr.runKernel(dt,t,{dtype:"float32"})}})),[],{}),t}runKernel(e,t,n){if(null==Us(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let r=0;n.forEach((e=>{r+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=s-t-r-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const s=this.isTapeOn(),r=this.state.numBytes,a=this.state.numTensors;let i,o;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=Fr(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Fr(e)){const{kernelName:t,inputs:r,attrs:a}=e;null==this.backendName&&this.backend;const l=Us(t,this.backendName);Q(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),i=()=>{const e=this.backend.numDataIds();o=l.kernelFunc({inputs:r,attrs:a,backend:this.backend});const i=Array.isArray(o)?o:[o];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const u=i.map((e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:s}=e;return this.makeTensorFromDataId(t,n,s)}));if(s){const e=this.getTensorsForGradient(t,r,u);n=this.saveTensorsForBackwardMode(e)}return u}}else{const{forwardFunc:t}=e,r=e=>{s&&(n=e.map((e=>this.keep(this.clone(e)))))};i=()=>{const e=this.backend.numDataIds();o=this.tidy((()=>t(this.backend,r)));const n=Array.isArray(o)?o:[o];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:u,attrs:c}=e,h=Fr(e)?null:e.backwardsFunc;let p;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(p=this.profiler.profileKernel(l,u,(()=>i())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(p),t=p.outputs):t=i()})),s&&this.addTapeNode(l,u,t,h,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-r,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(u).map((e=>null!=u[e]?u[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:p.timeMs,extraInfo:p.extraInfo}),Array.isArray(o)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const s=Gs(e);if(null!=s){const e=s.inputsToSave||[],r=s.outputsToSave||[];let a;s.saveAllInputs?(Q(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const i=n.filter(((e,t)=>r[t]));return a.concat(i)}return[]}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let r=e;"string"===n&&Ne(e[0])&&(r=e.map((e=>nr(e))));const a=s.write(r,t,n),i=new gr(t,n,a,this.nextTensorId());if(this.trackTensor(i,s),"string"===n){const e=this.state.tensorInfo.get(a),t=ve(r);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,s){const r=new gr(t,n=n||"float32",e,this.nextTensorId());return this.trackTensor(r,s),r}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const r=new br(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*ke(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof br||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*ke(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,r,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:r},o=Gs(e);null!=o&&(s=o.gradFunc),null!=s&&(i.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],s=De(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e})),s(e.length>1?e:e[0],r,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Ar(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==s.id||this.track(e)}))}gradients(e,t,n,s=!1){if(Q(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));Q(r instanceof gr,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const s={},r={};for(let e=0;e<t.length;e++)s[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],i=a.inputs;for(const e in i){const n=i[e];let o=!1;for(let e=0;e<t.length;e++)if(s[n.id]){a.outputs.forEach((e=>s[e.id]=!0)),o=!0,r[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let t=e.length-1;t>=0;t--){const n=e[t],s=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in s)a[s[e].id]=!0,i[n.id]=!0;break}}const o=[];for(let t=0;t<e.length;t++){const n=e[t];if(r[n.id]&&i[n.id]){const e={};for(const t in n.inputs){const r=n.inputs[t];s[r.id]&&(e[t]=r)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,r);if(!s&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[r.id]=null==n?function(e){const t=Fe(se(e),"float32");return Mr.makeTensor(t,e,"float32")}(r.shape):n,function(e,t,n,s){for(let r=t.length-1;r>=0;r--){const a=t[r],i=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const r=n((()=>o[t]()));if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);const i=a.inputs[t];if(!ae(r.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=r;else{const t=e[i.id];e[i.id]=s(t,r),t.dispose()}}}}(e,a,(e=>this.tidy(e)),Lr);const s=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:r,grads:s}}))}customGrad(e){return Q(Se(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;Q(t.every((e=>e instanceof gr)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const s={};return t.forEach(((e,t)=>{s[t]=e})),this.runKernelFunc({forwardFunc:(s,r)=>(n=e(...t,r),Q(n.value instanceof gr,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),Q(Se(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,s)=>{const r=n.gradFunc(e,s),a=Array.isArray(r)?r:[r];Q(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),Q(a.every((e=>e instanceof gr)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return a.forEach(((e,t)=>{i[t]=()=>e})),i},inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=er(),n=await this.backend.time(e);return n.wallMs=er()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Dr;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function Or(){const e=Ue();if(null==e._tfengine){const t=new Be(e);e._tfengine=new _r(t)}var t;return t=e._tfengine.ENV,Ve=t,dr=()=>e._tfengine,e._tfengine}_r.nextTensorId=0,_r.nextVariableId=0;const Mr=Or();function Lr(e,t){const n={a:e,b:t};return Mr.runKernel(Ke,n)}function zr(){if("undefined"!=typeof navigator&&null!=navigator){const e=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}return!1}function Br(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const Pr=Pe();function Wr(e,t){let n=e;if(we(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||we(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&Pe().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Vr(e,s,[]),s}function Vr(e,t,n){if(n=n||[],!Array.isArray(e)&&!we(e))return void Q(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));Q(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),Q(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const s=t.slice(1);for(let t=0;t<e.length;++t)Vr(e[t],s,n.concat(t))}function Ur(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function Gr(e,t,n,s="numeric"){if(e instanceof gr)return Ur(s,e.dtype,t,n),e;let r=Ce(e);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),Ur(s,r,t,n),null==e||!we(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const s=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const a=Wr(e,r);we(e)||Array.isArray(e)||(e=[e]);const i="string"!==r?Qs(e,r):ne(e,[],!0);return Mr.makeTensor(i,a,r)}function Hr(e,t,n,s="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,r)=>Gr(e,`${t}[${r}]`,n,s)))}Pr.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Pr.registerFlag("IS_BROWSER",(()=>Br())),Pr.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),Pr.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),Pr.registerFlag("PROD",(()=>!1)),Pr.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>Pr.getBool("DEBUG"))),Pr.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),Pr.registerFlag("IS_TEST",(()=>!1)),Pr.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0));const jr="__op";function qr(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const s=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=jr;const r=(...e)=>{Mr.startScope(n);try{const t=s(...e);return ze(t)&&console.error("Cannot return a Promise inside of tidy."),Mr.endScope(t),t}catch(e){throw Mr.endScope(null),e}};return Object.defineProperty(r,"name",{value:n,configurable:!0}),r}const Kr=qr({complex_:function(e,t){const n=Gr(e,"real","complex"),s=Gr(t,"imag","complex");ee(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);const r={real:n,imag:s};return Mr.runKernel(gt,r)}});function Xr(e,t,n,s){if(null==s&&(s=Ce(e)),"complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!we(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Oe(t);const e=se(t),s=se(n);Q(e===s,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`));for(let e=0;e<n.length;++e){const s=n[e],r=e!==n.length-1||s!==se(t.slice(e));Q(n[e]===t[e]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return we(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==s?Qs(e,s):ne(e,[],!0),Mr.makeTensor(e,t,s)}function Yr(e,t,n){return Xr(e,t,Wr(e,n),n)}const Jr={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function Zr(e,t){const n=[],s=[],r=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<r.length;++a){const i=r[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise((async e=>{const t=await o.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,s=new Uint8Array(n);let r=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(a,r),r+=4,s.set(n,r),r+=n.length}e(s)}));s.push(e)}else s.push(o.data());null!=t&&(l.group=t),n.push(l)}return{data:ea(await Promise.all(s)),specs:n}}function Qr(e,t){const n={};let s,r=0;for(const a of t){const t=a.name,i=a.dtype,o=a.shape,l=se(o);let u;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=Jr[n.dtype],c=e.slice(r,r+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===s&&(s=ia()),u=s(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=Math.round(t*n.scale+n.min)}}r+=l*o}else if("string"===i){const t=se(a.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(r,r+4))[0];r+=4;const n=new Uint8Array(e.slice(r,r+t));u.push(n),r+=t}}else{const s=Jr[i],a=e.slice(r,r+l*s);if("float32"===i)u=new Float32Array(a);else if("int32"===i)u=new Int32Array(a);else if("bool"===i)u=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{u=new Float32Array(a);const e=new Float32Array(u.length/2),s=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],s[t]=u[2*t+1];const r=Yr(e,o,"float32"),i=Yr(s,o,"float32");n[t]=Kr(r,i),r.dispose(),i.dispose()}}r+=l*s}"complex64"!==i&&(n[t]=Yr(u,o,i))}return n}function ea(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const s=new Uint8Array(t);let r=0;return n.forEach((e=>{s.set(new Uint8Array(e.buffer),r),r+=e.byteLength})),s.buffer}const ta="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function na(e){return ta?Buffer.byteLength(e):new Blob([e]).size}function sa(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let s=0;return e.forEach((e=>{n.set(new Uint8Array(e),s),s+=e.byteLength})),n.buffer}function ra(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function aa(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:na(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:na(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function ia(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return s=>{const r=new ArrayBuffer(4*s.length),a=new Uint32Array(r);for(let r=0;r<s.length;r++){const i=s[r],o=e[n[i>>10]+(1023&i)]+t[i>>10];a[r]=o}return new Float32Array(r)}}class oa{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==oa.instance&&(oa.instance=new oa),oa.instance}static registerSaveRouter(e){oa.getInstance().saveRouters.push(e)}static registerLoadRouter(e){oa.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return oa.getHandlers(e,"save")}static getLoadHandlers(e,t){return oa.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?oa.getInstance().loadRouters:oa.getInstance().saveRouters).forEach((t=>{const r=t(e,n);null!==r&&s.push(r)})),s}}const la=e=>oa.registerSaveRouter(e),ua=e=>oa.registerLoadRouter(e),ca=e=>oa.getSaveHandlers(e),ha=(e,t)=>oa.getLoadHandlers(e,t),pa="tensorflowjs",da="models_store",fa="model_info_store";function ma(){if(!Pe().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function ga(e){const t=e.result;t.createObjectStore(da,{keyPath:"modelPath"}),t.createObjectStore(fa,{keyPath:"modelPath"})}class ya{constructor(e){if(this.indexedDB=ma(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const s=this.indexedDB.open(pa,1);s.onupgradeneeded=()=>ga(s),s.onsuccess=()=>{const r=s.result;if(null==t){const t=r.transaction(da,"readonly"),s=t.objectStore(da).get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(r.close(),n(s.error)),t.oncomplete=()=>r.close()}else{const s=aa(t),a=r.transaction(fa,"readwrite");let i=a.objectStore(fa);const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:s});let l;o.onsuccess=()=>{l=r.transaction(da,"readwrite");const o=l.objectStore(da).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s});o.onsuccess=()=>e({modelArtifactsInfo:s}),o.onerror=e=>{i=a.objectStore(fa);const t=i.delete(this.modelPath);t.onsuccess=()=>(r.close(),n(o.error)),t.onerror=e=>(r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}}},s.onerror=e=>n(s.error)}))}}ya.URL_SCHEME="indexeddb://";const ba=e=>{return Pe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ya.URL_SCHEME)?(t=e.slice(ya.URL_SCHEME.length),new ya(t)):null;var t};oa.registerSaveRouter(ba),oa.registerLoadRouter(ba);class xa{constructor(){this.indexedDB=ma()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(pa,1);n.onupgradeneeded=()=>ga(n),n.onsuccess=()=>{const s=n.result,r=s.transaction(fa,"readonly"),a=r.objectStore(fa).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(s.close(),t(a.error)),r.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(ya.URL_SCHEME)?t.slice(ya.URL_SCHEME.length):t,new Promise(((t,n)=>{const s=this.indexedDB.open(pa,1);s.onupgradeneeded=()=>ga(s),s.onsuccess=()=>{const r=s.result,a=r.transaction(fa,"readwrite"),i=a.objectStore(fa),o=i.get(e);let l;o.onsuccess=()=>{if(null==o.result)return r.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=i.delete(e),a=()=>{l=r.transaction(da,"readwrite");const s=l.objectStore(da).delete(e);s.onsuccess=()=>t(o.result.modelArtifactsInfo),s.onerror=e=>n(o.error)};s.onsuccess=a,s.onerror=e=>(a(),r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}},s.onerror=e=>n(s.error)}))}}const wa="/",ka="tensorflowjs_models",va="info",Na="model_topology",Ia="weight_specs",$a="weight_data",Ca="model_metadata";function Sa(e){return{info:[ka,e,va].join(wa),topology:[ka,e,Na].join(wa),weightSpecs:[ka,e,Ia].join(wa),weightData:[ka,e,$a].join(wa),modelMetadata:[ka,e,Ca].join(wa)}}function Ta(e){const t=e.split(wa);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(wa)}class Ea{constructor(e){if(!Pe().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Sa(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),s=aa(e);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(ta)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,s=t.length;e<s;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const r={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),this.LS.setItem(this.keys.modelMetadata,JSON.stringify(r)),{modelArtifactsInfo:s}}catch(e){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const e=JSON.parse(r);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(ta){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}Ea.URL_SCHEME="localstorage://";const Aa=e=>{return Pe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Ea.URL_SCHEME)?(t=e.slice(Ea.URL_SCHEME.length),new Ea(t)):null;var t};oa.registerSaveRouter(Aa),oa.registerLoadRouter(Aa);class Ra{constructor(){Q(Pe().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),Q("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=ka+wa,n=wa+va;for(let s=0;s<this.LS.length;++s){const r=this.LS.key(s);r.startsWith(t)&&r.endsWith(n)&&(e[Ta(r)]=JSON.parse(this.LS.getItem(r)))}return e}async removeModel(e){var t;const n=Sa(e=(t=e).startsWith(Ea.URL_SCHEME)?t.slice(Ea.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const s=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),s}}const Fa="://";class Da{constructor(){this.managers={}}static getInstance(){return null==Da.instance&&(Da.instance=new Da),Da.instance}static registerManager(e,t){Q(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(Fa)&&(e=e.slice(0,e.indexOf(Fa))),Q(e.length>0,(()=>"scheme must not be an empty string."));const n=Da.getInstance();Q(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function _a(e){if(-1===e.indexOf(Fa))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Da.getSchemes().join(",")}`);return{scheme:e.split(Fa)[0],path:e.split(Fa)[1]}}async function Oa(e,t,n=!1){Q(e!==t,(()=>`Old path and new path are the same: '${e}'`));const s=oa.getLoadHandlers(e);Q(s.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),Q(s.length<2,(()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${e}.`));const r=s[0],a=oa.getSaveHandlers(t);Q(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),Q(a.length<2,(()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`));const i=a[0],o=_a(e).scheme,l=_a(e).path,u=o===_a(e).scheme,c=await r.load();n&&u&&await Da.getManager(o).removeModel(l);const h=await i.save(c);return n&&!u&&await Da.getManager(o).removeModel(l),h.modelArtifactsInfo}async function Ma(){const e=Da.getSchemes(),t={};for(const n of e){const e=await Da.getManager(n).listModels();for(const s in e)t[n+Fa+s]=e[s]}return t}async function La(e){const t=_a(e);return Da.getManager(t.scheme).removeModel(t.path)}async function za(e,t){return Oa(e,t,!1)}async function Ba(e,t){return Oa(e,t,!0)}class Pa{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(Pe().get("IS_BROWSER")){Pe().setPlatform("browser",new Pa);try{Da.registerManager(Ea.URL_SCHEME,new Ra)}catch(e){}try{Da.registerManager(ya.URL_SCHEME,new xa)}catch(e){}}let Wa;function Va(e,t="float32",n){return t=t||"float32",Oe(e),new pr(e,t,n)}Pe().get("IS_NODE")&&Pe().setPlatform("node",new class{constructor(){this.util=n(758),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=Pe().global.fetch?Pe().global.fetch(e,t):(null==Wa&&(Wa=n(352)),Wa(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const Ua=qr({cast_:function(e,t){const n=Gr(e,"x","cast");if(!be(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const s={x:n},r={dtype:t};return Mr.runKernel(dt,s,r)}}),Ga=qr({clone_:function(e){const t={x:Gr(e,"x","clone","string_or_numeric")};return Mr.runKernel(nn,t)}});function Ha(e,t=!1){console.log(e.toString(t))}function ja(e){return new Promise((e=>setTimeout(e))).then(e)}Or(),fr={buffer:Va,cast:Ua,clone:Ga,print:Ha};class qa{constructor(e){if(!Pe().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(qa.URL_SCHEME)&&(e=e.slice(qa.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelTopologyFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer);const r=window.URL.createObjectURL(new Blob([JSON.stringify(s)],{type:"application/json"})),a=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(a.download=this.modelTopologyFileName,a.href=r,await ja((()=>a.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await ja((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:aa(e)}}}}qa.URL_SCHEME="downloads://";class Ka{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.files=e}async load(){const e=this.files[0],t=this.files.slice(1);return new Promise(((n,s)=>{const r=new FileReader;r.onload=r=>{const a=JSON.parse(r.target.result),i=a.modelTopology;if(null==i)return void s(new Error(`modelTopology field is missing from file ${e.name}`));0===t.length&&n({modelTopology:i});const o=a.weightsManifest;if(null==o)return void s(new Error(`weightManifest field is missing from file ${e.name}`));let l;try{l=this.checkManifestAndWeightFiles(o,t)}catch(e){return void s(e)}const u=[],c=[],h=[];o.forEach((e=>{e.paths.forEach((e=>{c.push(e),h.push(null)})),u.push(...e.weights)})),o.forEach((e=>{e.paths.forEach((e=>{const t=new FileReader;t.onload=t=>{const s=t.target.result,r=c.indexOf(e);if(h[r]=s,-1===h.indexOf(null)){const e={modelTopology:i,weightSpecs:u,weightData:sa(h),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy};null!=a.signature&&(e.signature=a.signature),null!=a.userDefinedMetadata&&(e.userDefinedMetadata=a.userDefinedMetadata),null!=a.modelInitializer&&(e.modelInitializer=a.modelInitializer),n(e)}},t.onerror=t=>s(`Failed to weights data from file of path '${e}'.`),t.readAsArrayBuffer(l[e])}))}))},r.onerror=t=>s(`Failed to read model topology and weights manifest JSON from file '${e.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),r.readAsText(e)}))}checkManifestAndWeightFiles(e,t){const n=[],s=t.map((e=>ra(e.name))),r={};for(const a of e)a.paths.forEach((e=>{const a=ra(e);if(-1!==n.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(n.push(a),-1===s.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);r[e]=t[s.indexOf(a)]}));if(n.length!==t.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${t.length}).`);return r}}function Xa(e){return new Ka(e)}function Ya(e,t,n,s){!function(e){Q(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){Q(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),Q(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),Q(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,s=null==s?1:s);let r=0;return Promise.all(e.map((a=>(a.then((a=>{const i=n+ ++r/e.length*(s-n);return t(i),a})),a))))}async function Ja(e,t){null==t&&(t={});const n=null==t.fetchFunc?Pe().platform.fetch:t.fetchFunc,s=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),r=(null==t.onProgress?await Promise.all(s):await Ya(s,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(r):await Ya(r,t.onProgress,.5,1)}async function Za(e,t="",n,s){return Qa((e=>Ja(e,{requestInit:s})))(e,t,n)}function Qa(e){return async(t,n="",s)=>{const r=t.map((()=>!1)),a={},i=null!=s?s.map((()=>!1)):[],o=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,u=Jr[l]*se(e.shape),c=()=>{r[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=s?s.forEach(((t,n)=>{t===e.name&&(c(),i[n]=!0)})):c(),o.push(e.name),n+=u}))})),!i.every((e=>e))){const e=s.filter(((e,t)=>!i[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${o.join(", ")}.`)}const l=r.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),u=[];l.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)}))}));const c=await e(u),h={};let p=0;return l.forEach((e=>{const n=t[e].paths.length;let s=0;for(let e=0;e<n;e++)s+=c[p+e].byteLength;const r=new ArrayBuffer(s),i=new Uint8Array(r);let o=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[p+e]);i.set(t,o),o+=t.byteLength}a[e].forEach((e=>{const t=Qr(r.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)h[e]=t[e]})),p+=n})),h}}oa.registerSaveRouter((e=>Pe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(qa.URL_SCHEME)?function(e="model"){return new qa(e)}(e.slice(qa.URL_SCHEME.length)):null));class ei{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(Q("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=Pe().platform.fetch,Q(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&Q(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer),t.body.append("model.json",new Blob([JSON.stringify(s)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:aa(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,s=t.weightsManifest,r=t.generatedBy,a=t.convertedBy,i=t.format,o=t.signature,l=t.userDefinedMetadata;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let u,c;if(null!=s){const e=await this.loadWeights(s);[u,c]=e}const h={modelTopology:n,weightSpecs:u,weightData:c,generatedBy:r,convertedBy:a,format:i};null!=o&&(h.signature=o),null!=l&&(h.userDefinedMetadata=l);const p=t.modelInitializer;return p&&(h.modelInitializer=p),h}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),r=this.weightPathPrefix||n,a=[];for(const t of e)a.push(...t.weights);const i=[],o=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(r+e+s);return this.weightUrlConverter&&i.push(...await Promise.all(o)),[a,sa(await Ja(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function ti(e){return null!=e.match(ei.URL_SCHEME_REGEX)}ei.URL_SCHEME_REGEX=/^https?:\/\//;const ni=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>ti(e))):ti(e),n)return si(e,t)}return null};function si(e,t){return new ei(e,t)}function ri(e,t){return si(e,t)}oa.registerSaveRouter(ni),oa.registerLoadRouter(ni);class ai{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class ii{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}function oi(e,t,n,s){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new ai(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new ai({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new ai({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:s}))}function li(e){return new ii(e)}const ui=qr({matMul_:function(e,t,n=!1,s=!1){let r=Gr(e,"a","matMul"),a=Gr(t,"b","matMul");[r,a]=Sr(r,a);const i={a:r,b:a},o={transposeA:n,transposeB:s};return Mr.runKernel(ut,i,o)}}),ci=qr({oneHot_:function(e,t,n=1,s=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const r={indices:Gr(e,"indices","oneHot","int32")},a={depth:t,onValue:n,offValue:s};return Mr.runKernel(Wn,r,a)}}),hi=qr({transpose_:function(e,t){const n=Gr(e,"x","transpose");if(null==t&&(t=n.shape.map(((e,t)=>t)).reverse()),Q(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`)),t.forEach((e=>{Q(e>=0&&e<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${t}`))})),n.rank<=1)return n.clone();const s={x:n},r={perm:t};return Mr.runKernel(As,s,r)}}),pi=qr({confusionMatrix_:function(e,t,n){const s=Gr(e,"labels","confusionMatrix"),r=Gr(t,"predictions","confusionMatrix");Q(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),Q(1===s.rank,(()=>`Expected the rank of labels to be 1, but got ${s.rank}`)),Q(1===r.rank,(()=>`Expected the rank of predictions to be 1, but got ${r.rank}`)),Q(s.shape[0]===r.shape[0],(()=>`Mismatch in the number of examples: ${s.shape[0]} vs. ${r.shape[0]}. Labels and predictions should have the same number of elements.`)),Q(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const a=ci(Ua(s,"int32"),n),i=ci(Ua(r,"int32"),n),o=hi(a),l=ui(o,i);return Ua(l,"int32")}});function di(e,t,n){if(te(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=Wr(e,n);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Xr(e,t,s,n)}let fi;async function mi(e,t){let n=Gr(e,"img","toPixels");if(!(e instanceof gr)){const e=n;n=Ua(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[s,r]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${a}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const i=await n.data(),o="float32"===n.dtype?255:1,l=new Uint8ClampedArray(r*s*4);for(let e=0;e<s*r;++e){const t=[0,0,0,255];for(let s=0;s<a;s++){const r=i[e*a+s];if("float32"===n.dtype){if(r<0||r>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${r}.`)}else if("int32"===n.dtype&&(r<0||r>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${r}.`);1===a?(t[0]=r*o,t[1]=r*o,t[2]=r*o):t[s]=r*o}const s=4*e;l[s+0]=Math.round(t[0]),l[s+1]=Math.round(t[1]),l[s+2]=Math.round(t[2]),l[s+3]=Math.round(t[3])}if(null!=t){t.width=r,t.height=s;const e=t.getContext("2d"),n=new ImageData(l,r,s);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l}const gi=qr({fromPixels_:function(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,s=!1,r=!1,a=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)r=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);o=!0}if(r){const t=2;if(r&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=Us(Ms,Mr.backendName)){const n={pixels:e},s={numChannels:t};return Mr.runKernel(Ms,n,s)}const[l,u]=r?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(i?c=e.getContext("2d").getImageData(0,0,l,u).data:s||n?c=e.data:(a||r||o)&&(null==fi&&(fi=document.createElement("canvas").getContext("2d")),fi.canvas.width=l,fi.canvas.height=u,fi.drawImage(e,0,0,l,u),c=fi.getImageData(0,0,l,u).data),4===t)h=new Int32Array(c);else{const e=l*u;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}return di(h,[u,l,t],"int32")}});function yi(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===se(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const r=t.shape,a=r[r.length-1];let i=1;for(let e=0;e<r.length-1;++e)i*=r[e];const o=e.shape,l=r.slice();l.pop();let u=1;for(let e=a;e<n;++e)u*=o[e],l.push(o[e]);const c=[...Ee(e.shape).map((e=>e/u)),1].slice(0,a);return[l,i,u,c]}function bi(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(a+` update.rank < ${r}. `);if(e.length<s+(n.rank-r))throw new Error(a+` Output shape length < ${s+(n.rank-r)}`);if(n.rank!==r+e.length-s)throw new Error(a+" update.rank != "+(r+e.length-s));for(let e=0;e<r;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-r;++t)if(n.shape[t+r]!==e[t+s])throw new Error(a+` updates.shape[${t+r}] (${n.shape[t+r]}) != shape[${t+r}] (${e[t+r]})`)}function xi(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}bi(n,t,e)}function wi(e,t,n){const s=t.shape.length,r=s>1?t.shape[s-1]:1,a=n.length;let i=1;for(let e=r;e<a;++e)i*=n[e];const o=r<1?1:r;return{sliceRank:r,numUpdates:se(t.shape)/o,sliceSize:i,strides:[...Ee(n.slice(0,r)),1],outputSize:se(n)}}function ki(e,t,n){const s=e.shape.length;Q(s===t.length,(()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`)),Q(s===n.length,(()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`));for(let r=0;r<s;++r)Q(t[r]+n[r]<=e.shape[r],(()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`))}function vi(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function Ni(e,t,n){const s=[];for(let r=0;r<e.length;r++)s[r]=Math.ceil((t[r]-e[r])/n[r]);return s}function Ii(e,t,n,s){const r=[...e];for(let e=r.length;e<s.length;e++)r.push(1);for(let e=0;e<n;e++)0===e?r[t]=1:(r.splice(t,0,1),r.pop());return r}function $i(e,t,n){return n<=e?n:n-(t-1)}function Ci(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function Si(e,t,n,s,r,a,i,o,l){const u=e.length;let c=new Array(u),h=new Array(u),p=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=Ti(i,l,u,s,e),h=Ei(o,l,u,r,e),p=Ii(a,l,u,e)}else for(let t=0;t<u;t++)c[t]=Ri(i,s,a,e,t,l),h[t]=Fi(o,r,a,e,t,l),p[t]=Ai(a,t,l);return{begin:c,end:h,strides:p}}function Ti(e,t,n,s,r){const a=[...r],i=Ci(n,t);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=0;else{const i=$i(t,n,r);let o=s[i];e&1<<i&&(o=0),a[r]=o}return a}function Ei(e,t,n,s,r){const a=[...r],i=Ci(n,t);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=Number.MAX_SAFE_INTEGER;else{const i=$i(t,n,r);let o=s[i];e&1<<i&&(o=Number.MAX_SAFE_INTEGER),a[r]=o}for(let e=0;e<a.length;e++){const t=r[e];a[e]<0&&(a[e]+=t),a[e]=K(0,a[e],r[e])}return a}function Ai(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function Ri(e,t,n,s,r,a){let i=t[r];const o=n[r]||1;(e&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=K(0,i,l-1),i}function Fi(e,t,n,s,r,a){let i=t[r];const o=n[r]||1;(e&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=o>0?K(0,i,l):K(-1,i,l-1),i}function Di(e,t,n){let s=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){s=e;break}for(let r=s+1;r<n.length;r++)if(t[r]>0||n[r]!==e[r])return!1;return!0}function _i(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function Oi(e,t,n){let s;const r=e.shape.length;let a;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach((e=>{Q(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(r).fill(-1):"number"==typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(Q(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-s[n]))),[s,a]}function Mi(e,t,n,s,r,a,i,o,l){let u=t.slice(),c=n.slice(),h=s;null==s&&(h=new Array(u.length));const p=vi(i);if(p.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==l)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const d=e.length-u.length,f=vi(o),m=e.slice();f.forEach((e=>{u[e]=0,c[e]=1,m.splice(e,0,1)}));const{begin:g,end:y,strides:b}=Si(m,p,d,u,c,h,r,a,i);u=g,c=y,h=b;const x=vi(l);x.forEach((e=>{c[e]=u[e]+1,h[e]=1}));const w=Ni(u,c,h),k=w.filter(((e,t)=>-1===x.indexOf(t)));return{nonStrided:h.every((e=>1===e)),$begin:u,$end:c,$strides:h,size:w,newShape:m,outShape:k}}class Li{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class zi{constructor(){this.classNameMap={}}static getMap(){return null==zi.instance&&(zi.instance=new zi),zi.instance}static register(e){zi.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Bi(e){Q(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),Q("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),Q(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),zi.register(e)}const Pi=.1;function Wi(e,t,n){return null==n&&(n=Vi()),Ui(e,t,((e,t)=>qi(e,t,n)))}function Vi(){return 32===Mr.backend.floatPrecision()?.001:Pi}function Ui(e,t,n){let s=!0;if((we(e)||we(t))&&(s=!1),we(e)&&we(t)&&(s=!0),s){const n=e.constructor.name,s=t.constructor.name;if(n!==s)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${s}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=Wr(e),s=Wr(t);if(!ae(n,s))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${s}]`)}const r=we(e)?e:ne(e),a=we(t)?t:ne(t);if(r.length!==a.length)throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${a.length}.\nActual:   ${r}.\nExpected: ${a}.`);for(let e=0;e<a.length;++e){const t=r[e],s=a[e];if(!n(t,s))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${s}.\nActual:   ${r}.\nExpected: ${a}.`)}}function Gi(e,t){e().then((()=>t.fail()),(()=>t()))}function Hi(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return Ne(e)||Ne(e[0])||Ne(t)||Ne(t[0])?Ui(e,n,((e,t)=>e==t)):Ui(e,t,((e,t)=>qi(e,t,0)))}function ji(e,t,n){if(null==n&&(n=Vi()),!qi(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`)}function qi(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function Ki(e,t,n){for(let s=0;s<e.length;s++)if(e[s]<t||e[s]>n)throw new Error(`Value out of range:${e[s]} low: ${t}, high: ${n}`)}function Xi(e,t){expect(new Float32Array(e)).toEqual(new Float32Array(t))}function Yi(e){for(let t=0;t<e.length;t++){const n=e[t];Array.isArray(n)?Yi(n):e[t]=nr(n)}return e}const Ji="3.1.0";function Zi(){Pe().set("PROD",!0)}function Qi(){Pe().set("DEBUG",!0)}function eo(){Pe().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function to(e){Pe().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function no(){Mr.disposeVariables()}function so(){return Mr}function ro(){return Mr.memory()}function ao(e){return Mr.profile(e)}function io(e,t){return Mr.tidy(e,t)}function oo(e){Ar(e).forEach((e=>e.dispose()))}function lo(e){return Mr.keep(e)}function uo(e){return Mr.time(e)}function co(e){return Mr.setBackend(e)}function ho(){return Mr.ready()}function po(){return Mr.backendName}function fo(e){Mr.removeBackend(e)}function mo(e){return Mr.findBackend(e)}function go(e){return Mr.findBackendFactory(e)}function yo(e,t,n=1){return Mr.registerBackend(e,t,n)}function bo(){return Mr.backend}function xo(e,t){Pe().setPlatform(e,t)}mr=to;const wo=qr({add_:function(e,t){let n=Gr(e,"a","add"),s=Gr(t,"b","add");[n,s]=Sr(n,s);const r={a:n,b:s};return Mr.runKernel(Ke,r)}}),ko=qr({floorDiv_:function(e,t){let n=Gr(e,"a","floorDiv"),s=Gr(t,"b","floorDiv");[n,s]=Sr(n,s);const r={a:n,b:s};return Mr.runKernel(Yt,r)}}),vo=qr({div_:function(e,t){let n=Gr(e,"a","div"),s=Gr(t,"b","div");if([n,s]=Sr(n,s),"int32"===n.dtype&&"int32"===s.dtype)return ko(n,s);const r={a:n,b:s};return Mr.runKernel(zt,r,{})}}),No=qr({mul_:function(e,t){let n=Gr(e,"a","mul"),s=Gr(t,"b","mul");[n,s]=Sr(n,s);const r={a:n,b:s};return Mr.runKernel(_n,r)}}),Io=qr({sqrt_:function(e){const t={x:Gr(e,"x","sqrt")};return Mr.runKernel(gs,t)}}),$o=qr({square_:function(e){const t=Gr(e,"x","square");return Mr.runKernel("Square",{x:t},{})}}),Co=qr({zerosLike_:function(e){const t={x:Gr(e,"x","zerosLike")};return Mr.runKernel(_s,t)}});function So(e){return Q(Se(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const s=Gr(t,"x","tf.grad","string_or_numeric"),r=null!=n?Gr(n,"dy","tf.grad"):null;return Mr.tidy((()=>{const{value:t,grads:n}=Mr.gradients((()=>e(s)),[s],r);return null!=r&&ee(t.shape,r.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),Do(n),n[0]}))}}function To(e){return Q(Se(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{Q(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const s=Hr(t,"args","tf.grads","string_or_numeric"),r=null!=n?Gr(n,"dy","tf.grads"):null;return Mr.tidy((()=>{const{value:t,grads:n}=Mr.gradients((()=>e(...s)),s,r);return null!=r&&ee(t.shape,r.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Do(n),n}))}}function Eo(e){return Q(Se(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{Q(t instanceof gr,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),Q(null==n||n instanceof gr,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:s,value:r}=Mr.gradients((()=>e(t)),[t],n);return Do(s),{grad:s[0],value:r}}}function Ao(e){return Q(Se(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{Q(Array.isArray(t)&&t.every((e=>e instanceof gr)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),Q(null==n||n instanceof gr,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const s=Mr.gradients((()=>e(...t)),t,n);return null!=n&&ee(s.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Do(s.grads),s}}function Ro(e,t){Q(Se(e),(()=>"The f passed in variableGrads(f) must be a function")),Q(null==t||Array.isArray(t)&&t.every((e=>e instanceof br)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in Mr.registeredVariables)t.push(Mr.registeredVariables[e])}const s=n?t.filter((e=>!e.trainable)):null,r=t.length;Q((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`));const{value:a,grads:i}=Mr.gradients(e,t,null,!0);Q(i.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),Q(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const o={};return t.forEach(((e,t)=>{null!=i[t]&&(o[e.name]=i[t])})),null!=s&&s.forEach((e=>o[e.name]=null)),{value:a,grads:o}}function Fo(e){return Mr.customGrad(e)}function Do(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}function _o(e,t){if((we(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&we(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Xr(e,[],[],t)}class Oo extends Li{minimize(e,t=!1,n){const{value:s,grads:r}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:r[e.name]})));this.applyGradients(e)}else this.applyGradients(r);return oo(r),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return Ro(e,t)}dispose(){null!=this.iterations_&&oo(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:_o(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Oo,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class Mo extends Oo{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Mr.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Mr.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:io((()=>Co(s).variable(!1)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:io((()=>Co(s).variable(!1)))});const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;io((()=>{const e=wo(No(a,this.rho),No($o(r),1-this.rho)),t=No(vo(Io(wo(i,this.epsilon)),Io(wo(a,this.epsilon))),r),n=wo(No(i,this.rho),No($o(t),1-this.rho));a.assign(e),i.assign(n);const o=wo(No(t,-this.learningRate),s);s.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(oo(this.accumulatedGrads.map((e=>e.variable))),oo(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}function Lo(e,t,n){const s={shape:e,value:t,dtype:n};return Mr.runKernel(qt,{},s)}Mo.className="Adadelta",Bi(Mo);class zo extends Oo{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Mr.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:io((()=>Lo(s.shape,this.initialAccumulatorValue).variable(e)))}}const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable;io((()=>{const e=wo(a,$o(r));a.assign(e);const t=wo(No(vo(r,Io(wo(e,Mr.backend.epsilon()))),-this.learningRate),s);s.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&oo(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}zo.className="Adagrad",Bi(zo);const Bo=qr({pow_:function(e,t){let n=Gr(e,"base","pow"),s=Gr(t,"exp","pow");[n,s]=Sr(n,s);const r={a:n,b:s};return Mr.runKernel(Hn,r)}}),Po=qr({sub_:function(e,t){let n=Gr(e,"a","sub"),s=Gr(t,"b","sub");[n,s]=Sr(n,s);const r={a:n,b:s};return Mr.runKernel(Ns,r)}});class Wo extends Oo{constructor(e,t,n,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],io((()=>{this.accBeta1=_o(t).variable(),this.accBeta2=_o(n).variable()})),null==s&&(this.epsilon=Mr.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);io((()=>{const n=Po(1,this.accBeta1),s=Po(1,this.accBeta2);t.forEach(((t,r)=>{const a=Mr.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:io((()=>Co(a).variable(!1)))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:`${t}/v`,variable:io((()=>Co(a).variable(!1)))});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedSecondMoment[r].variable,u=wo(No(o,this.beta1),No(i,1-this.beta1)),c=wo(No(l,this.beta2),No($o(i),1-this.beta2)),h=vo(u,n),p=vo(c,s);o.assign(u),l.assign(c);const d=wo(No(vo(h,wo(Io(p),this.epsilon)),-this.learningRate),a);a.assign(d)})),this.accBeta1.assign(No(this.accBeta1,this.beta1)),this.accBeta2.assign(No(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&oo(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&oo(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),io((()=>{this.accBeta1.assign(Bo(this.beta1,this.iterations_+1)),this.accBeta2.assign(Bo(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}Wo.className="Adam",Bi(Wo);const Vo=qr({abs_:function(e){const t=Gr(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return Mr.runKernel(yt,e)}{const e={x:t};return Mr.runKernel(He,e)}}});function Uo(e,t){const n=e.length,s=[];for(let r=0;r<n;r++){const a=n-1-r,i=e[a]||1;(t[t.length-1-r]||1)>1&&1===i&&s.unshift(a)}return s}function Go(e,t){const n=[];for(let s=0;s<t.length;s++){const r=e[e.length-s-1],a=t.length-s-1,i=t[a];(null==r||1===r&&i>1)&&n.unshift(a)}return n}function Ho(e,t){const n=[],s=Math.max(e.length,t.length);for(let r=0;r<s;r++){let s=e[e.length-r-1];null==s&&(s=1);let a=t[t.length-r-1];if(null==a&&(a=1),1===s)n.unshift(a);else if(1===a)n.unshift(s);else{if(s!==a)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);n.unshift(s)}}return n}const jo=qr({maximum_:function(e,t){let n=Gr(e,"a","maximum"),s=Gr(t,"b","maximum");[n,s]=Sr(n,s),"bool"===n.dtype&&(n=Ua(n,"int32"),s=Ua(s,"int32")),Ho(n.shape,s.shape);const r={a:n,b:s};return Mr.runKernel(vn,r)}});class qo extends Oo{constructor(e,t,n,s=null,r=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],io((()=>{this.iteration=_o(0).variable(),this.accBeta1=_o(t).variable()})),null==s&&(this.epsilon=Mr.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);io((()=>{const n=Po(1,this.accBeta1),s=vo(-this.learningRate,wo(No(this.iteration,this.decay),1));t.forEach(((t,r)=>{const a=Mr.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:Co(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:`${t}/v`,variable:Co(a).variable(!1)});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedWeightedInfNorm[r].variable,u=wo(No(o,this.beta1),No(i,1-this.beta1)),c=No(l,this.beta2),h=Vo(i),p=jo(c,h);o.assign(u),l.assign(p);const d=wo(No(vo(s,n),vo(u,wo(p,this.epsilon))),a);a.assign(d)})),this.iteration.assign(wo(this.iteration,1)),this.accBeta1.assign(No(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&oo(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&oo(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}qo.className="Adamax",Bi(qo);class Ko extends Oo{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const r=Mr.registeredVariables[t];io((()=>{const e=wo(No(this.c,s),r);r.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=lo(_o(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}Ko.className="SGD",Bi(Ko);class Xo extends Ko{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=_o(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Mr.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:io((()=>Co(s).variable(e)))}}const r=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&io((()=>{let e;const t=wo(No(this.m,r),a);e=this.useNesterov?wo(No(this.c,wo(a,No(t,this.m))),s):wo(No(this.c,t),s),r.assign(t),s.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&oo(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}Xo.className="Momentum",Bi(Xo);class Yo extends Oo{constructor(e,t=.9,n=0,s=null,r=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==s&&(this.epsilon=Mr.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Mr.registeredVariables[t],r=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:io((()=>Co(s).variable(r)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:io((()=>Co(s).variable(r)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:io((()=>Co(s).variable(r)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;io((()=>{const e=wo(No(i,this.decay),No($o(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,r=wo(No(t,this.decay),No(a,1-this.decay)),l=vo(No(a,this.learningRate),Io(Po(e,wo($o(r),this.epsilon)))),u=wo(No(o,this.momentum),l);i.assign(e),t.assign(r),o.assign(u);const c=Po(s,u);s.assign(c)}else{const e=wo(No(i,this.decay),No($o(a),1-this.decay)),t=wo(No(o,this.momentum),vo(No(a,this.learningRate),Io(wo(e,this.epsilon))));i.assign(e),o.assign(t);const n=Po(s,t);s.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&oo(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&oo(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&oo(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}Yo.className="RMSProp",Bi(Yo);const Jo=qr({acos_:function(e){const t={x:Gr(e,"x","acos")};return Mr.runKernel(je,t)}}),Zo=qr({acosh_:function(e){const t={x:Gr(e,"x","acosh")};return Mr.runKernel(qe,t)}}),Qo=qr({addN_:function(e){Q(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),Q(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>Gr(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!ae(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const s=t;return Mr.runKernel(Xe,s)}}),el=qr({all_:function(e,t=null,n=!1){const s={x:Gr(e,"x","all","bool")},r={axis:t,keepDims:n};return Mr.runKernel(Ye,s,r)}}),tl=qr({any_:function(e,t=null,n=!1){const s={x:Gr(e,"x","any","bool")},r={axis:t,keepDims:n};return Mr.runKernel(Je,s,r)}}),nl=qr({argMax_:function(e,t=0){const n={x:Gr(e,"x","argMax")},s={axis:t};return Mr.runKernel(Ze,n,s)}}),sl=qr({argMin_:function(e,t=0){const n={x:Gr(e,"x","argMin")},s={axis:t};return Mr.runKernel(Qe,n,s)}}),rl=qr({asin_:function(e){const t={x:Gr(e,"x","asin")};return Mr.runKernel(et,t)}}),al=qr({asinh_:function(e){const t={x:Gr(e,"x","asinh")};return Mr.runKernel(tt,t)}}),il=qr({atan_:function(e){const t={x:Gr(e,"x","atan")};return Mr.runKernel(nt,t)}}),ol=qr({atan2_:function(e,t){let n=Gr(e,"a","atan2"),s=Gr(t,"b","atan2");[n,s]=Sr(n,s);const r={a:n,b:s};return Mr.runKernel(rt,r)}}),ll=qr({atanh_:function(e){const t={x:Gr(e,"x","atanh")};return Mr.runKernel(st,t)}});function ul(e,t,n,s,r="NHWC",a){return pl(e,[...t,e[3]],n,a,s,null,null,kl(r))}function cl(e,t,n,s,r,a,i="channelsLast"){const[o,l]=ml(t);let u;if("channelsLast"===i)u=[o,l,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);u=[o,l,e[1],e[1]]}return pl(e,u,n,s,r,a,!1,i)}function hl(e,t,n,s,r,a,i="NDHWC"){const[o,l,u]=gl(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,l,u,e[1],e[1]]}return dl(e,c,n,s,r,!1,h,a)}function pl(e,t,n,s,r,a,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c]=e}const[p,d,,f]=t,[m,g]=ml(n),[y,b]=ml(s),x=yl(p,y),w=yl(d,b),{padInfo:k,outHeight:v,outWidth:N}=function(e,t,n,s,r,a,i,o,l){let u,c,h;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,r){null==s&&(s=fl(e,t,n));const a=e[1];return[bl((e[0]-t+2*s)/n+1,r),bl((a-t+2*s)/n+1,r)]}([t,n],a,s,e,o);c=r[0],h=r[1]}else if("same"===e){c=Math.ceil(t/s),h=Math.ceil(n/r);const e=Math.max(0,(c-1)*s+a-t),o=Math.max(0,(h-1)*r+i-n),l=Math.floor(e/2),p=e-l,d=Math.floor(o/2);u={top:l,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/s),h=Math.ceil((n-i+1)/r);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const p="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=bl((t-a+p+d)/s+1,o),h=bl((n-i+f+m)/r+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,m,g,x,w,a,o),I=i?f*h:f;let $;return"channelsFirst"===o?$=[l,I,v,N]:"channelsLast"===o&&($=[l,v,N,I]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:v,outWidth:N,outChannels:I,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:$,filterShape:t}}function dl(e,t,n,s,r,a=!1,i="channelsLast",o){let[l,u,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,p,u,c,h]=e}const[d,f,m,,g]=t,[y,b,x]=gl(n),[w,k,v]=gl(s),N=yl(d,w),I=yl(f,k),$=yl(m,v),{padInfo:C,outDepth:S,outHeight:T,outWidth:E}=function(e,t,n,s,r,a,i,o,l,u,c){let h,p,d,f;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,s,r,a){null==r&&(r=fl(e,t,s));const i=e[1],o=e[2];return[bl((e[0]-t+2*r)/s+1,a),bl((i-t+2*r)/s+1,a),bl((o-t+2*r)/s+1,a),1]}([t,n,s,1],o,0,r,e,c);p=a[0],d=a[1],f=a[2]}else if("same"===e){p=Math.ceil(t/r),d=Math.ceil(n/a),f=Math.ceil(s/i);const e=(p-1)*r+o-t,c=(d-1)*a+l-n,m=(f-1)*i+u-s,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((t-o+1)/r),d=Math.ceil((n-l+1)/a),f=Math.ceil((s-u+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(r,u,c,h,y,b,x,N,I,$,o),A=a?g*p:g;let R;return"channelsFirst"===i?R=[l,A,S,T,E]:"channelsLast"===i&&(R=[l,S,T,E,A]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:p,outDepth:S,outHeight:T,outWidth:E,outChannels:A,padInfo:C,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:N,effectiveFilterHeight:I,effectiveFilterWidth:$,dilationDepth:w,dilationHeight:k,dilationWidth:v,inShape:e,outShape:R,filterShape:t}}function fl(e,t,n,s=1){const r=yl(t,s);return Math.floor((e[0]*(n-1)-n+r)/2)}function ml(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function gl(e){return"number"==typeof e?[e,e,e]:e}function yl(e,t){return t<=1?e:e+(e-1)*(t-1)}function bl(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function xl(e){const[t,n,s]=ml(e);return 1===t&&1===n&&1===s}function wl(e,t){return xl(e)||xl(t)}function kl(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}const vl=qr({reshape_:function(e,t){const n={x:Gr(e,"x","reshape","string_or_numeric")},s={shape:t};return Mr.runKernel(Zn,n,s)}}),Nl=qr({avgPool_:function(e,t,n,s,r){const a=Gr(e,"x","avgPool","float32");Q(wl(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let i=a,o=!1;3===a.rank&&(o=!0,i=vl(a,[1,a.shape[0],a.shape[1],a.shape[2]])),Q(4===i.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`)),null!=r&&Q(ie(s),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r};let c=Mr.runKernel(at,l,u);return c=Ua(c,a.dtype),o?vl(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Il=qr({avgPool3d_:function(e,t,n,s,r,a="NDHWC"){const i=Gr(e,"x","avgPool3d","float32");let o=i,l=!1;4===i.rank&&(l=!0,o=vl(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),Q(5===o.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`)),Q("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),null!=r&&Q(ie(s),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const u={x:o},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a};let h=Mr.runKernel(ot,u,c);return h=Ua(h,o.dtype),l?vl(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),$l=qr({concat_:function(e,t=0){Q(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=Hr(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Ga(n[0]);const s=n,r={axis:t};return Mr.runKernel(bt,s,r)}}),Cl=qr({sigmoid_:function(e){const t={x:Gr(e,"x","sigmoid")};return Mr.runKernel(fs,t)}}),Sl=qr({slice_:function(e,t,n){const s=Gr(e,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");const r={x:s},a={begin:t,size:n};return Mr.runKernel(cs,r,a)}}),Tl=qr({tanh_:function(e){const t={x:Gr(e,"x","tanh")};return Mr.runKernel(Ss,t)}}),El=qr({basicLSTMCell_:function(e,t,n,s,r,a){const i=Gr(e,"forgetBias","basicLSTMCell"),o=Gr(t,"lstmKernel","basicLSTMCell"),l=Gr(n,"lstmBias","basicLSTMCell"),u=Gr(s,"data","basicLSTMCell"),c=Gr(r,"c","basicLSTMCell"),h=Gr(a,"h","basicLSTMCell"),p=$l([u,h],1),d=ui(p,o),f=wo(d,l),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=Sl(f,[0,0],y),x=Sl(f,[0,g],y),w=Sl(f,[0,2*g],y),k=Sl(f,[0,3*g],y),v=wo(No(Cl(b),Tl(x)),No(c,Cl(wo(i,w))));return[v,No(Tl(v),Cl(k))]}}),Al=qr({batchToSpaceND_:function(e,t,n){const s=Gr(e,"x","batchToSpaceND"),r=t.reduce(((e,t)=>e*t));Q(s.rank>=1+t.length,(()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`)),Q(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),Q(s.shape[0]%r==0,(()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`));const a={x:s},i={blockShape:t,crops:n};return Mr.runKernel(ct,a,i)}}),Rl=qr({batchNorm_:function(e,t,n,s,r,a){null==a&&(a=.001);const i=Gr(e,"x","batchNorm"),o=Gr(t,"mean","batchNorm"),l=Gr(n,"variance","batchNorm");let u,c;null!=r&&(u=Gr(r,"scale","batchNorm")),null!=s&&(c=Gr(s,"offset","batchNorm")),Q(o.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Q(null==c||o.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Q(null==u||o.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const h={x:function(e){let t;return t=0===e.rank||1===e.rank?vl(e,[1,1,1,e.size]):2===e.rank?vl(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?vl(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),scale:u,offset:c,mean:o,variance:l},p={varianceEpsilon:a},d=Mr.runKernel(Jt,h,p);return vl(d,i.shape)}}),Fl=qr({batchNorm2d_:function(e,t,n,s,r,a){const i=Gr(e,"x","batchNorm"),o=Gr(t,"mean","batchNorm"),l=Gr(n,"variance","batchNorm");let u,c;return null!=r&&(u=Gr(r,"scale","batchNorm")),null!=s&&(c=Gr(s,"offset","batchNorm")),Q(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),Q(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),Q(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&Q(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&Q(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),Rl(i,o,l,c,u,a)}}),Dl=qr({batchNorm3d_:function(e,t,n,s,r,a){const i=Gr(e,"x","batchNorm"),o=Gr(t,"mean","batchNorm"),l=Gr(n,"variance","batchNorm");let u,c;return null!=r&&(u=Gr(r,"scale","batchNorm")),null!=s&&(c=Gr(s,"offset","batchNorm")),Q(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),Q(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),Q(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&Q(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&Q(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),Rl(i,o,l,c,u,a)}}),_l=qr({batchNorm4d_:function(e,t,n,s,r,a){const i=Gr(e,"x","batchNorm"),o=Gr(t,"mean","batchNorm"),l=Gr(n,"variance","batchNorm");let u,c;return null!=r&&(u=Gr(r,"scale","batchNorm")),null!=s&&(c=Gr(s,"offset","batchNorm")),Q(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),Q(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),Q(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&Q(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&Q(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),Rl(i,o,l,c,u,a)}}),Ol=qr({bincount_:function(e,t,n){const s=Gr(e,"x","bincount"),r=Gr(t,"weights","bincount");Q("int32"===s.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`)),Q(n>=0,(()=>`size must be non-negative, but got ${n}.`)),Q(r.size===s.size||0===r.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`));const a={x:s,weights:r},i={size:n};return Mr.runKernel(ht,a,i)}}),Ml=qr({broadcastTo_:function(e,t){let n=Gr(e,"broadcastTo","x");const s=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=vl(n,e)}const r=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(r[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Ga(n);const i={x:n},o={reps:a};return Mr.runKernel(Ts,i,o)}}),Ll=qr({ceil_:function(e){const t={x:Gr(e,"x","ceil")};return Mr.runKernel(ft,t)}}),zl=qr({clipByValue_:function(e,t,n){const s=Gr(e,"x","clipByValue");Q(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const r={x:s},a={clipValueMin:t,clipValueMax:n};return Mr.runKernel(mt,r,a)}}),Bl=qr({concat1d_:function(e){return $l(e,0)}}),Pl=qr({concat2d_:function(e,t){return $l(e,t)}}),Wl=qr({concat3d_:function(e,t){return $l(e,t)}}),Vl=qr({concat4d_:function(e,t){return $l(e,t)}}),Ul=qr({conv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=Gr(e,"x","conv2d"),l=Gr(t,"filter","conv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=vl(o,[1,o.shape[0],o.shape[1],o.shape[2]])),Q(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),Q(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),null!=i&&Q(ie(s),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const h="NHWC"===r?u.shape[3]:u.shape[1];Q(h===l.shape[2],(()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`)),Q(wl(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const p={x:u,filter:l},d={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},f=Mr.runKernel(xt,p,d);return c?vl(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Gl=qr({conv1d_:function(e,t,n,s,r="NWC",a=1,i){const o=Gr(e,"x","conv1d"),l=Gr(t,"filter","conv1d");let u=o,c=!1;2===o.rank&&(c=!0,u=vl(o,[1,o.shape[0],o.shape[1]])),Q(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),Q(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),null!=i&&Q(ie(s),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`)),Q(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),Q(wl(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),Q("NWC"===r,(()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`));const h=vl(l,[1,l.shape[0],l.shape[1],l.shape[2]]),p=vl(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=Ul(p,h,[1,n],s,"NHWC",[1,a],i);return vl(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}}),Hl=qr({conv2DBackpropInput_:function(e,t,n,s,r,a="NHWC",i){Q(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let o=e,l=t,u=!1;3===t.rank&&(u=!0,l=vl(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),Q(4===o.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`)),Q(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),Q(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?l.shape[3]:l.shape[1];Q(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),Q(h===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`)),null!=i&&Q(ie(r),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const p={dy:l,filter:n},d={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,inputShape:o},f=Mr.runKernel(kt,p,d);return u?vl(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),jl=qr({conv2dTranspose_:function(e,t,n,s,r,a){const i=Gr(e,"x","conv2dTranspose"),o=Gr(t,"filter","conv2dTranspose");return Hl(n,i,o,s,r,"NHWC",a)}}),ql=qr({conv3d_:function(e,t,n,s,r="NDHWC",a=[1,1,1]){const i=Gr(e,"x","conv3d"),o=Gr(t,"filter","conv3d");let l=i,u=!1;4===i.rank&&(u=!0,l=vl(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),Q(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),Q(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),Q(l.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),Q(wl(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),Q("NDHWC"===r,(()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`));const c={x:l,filter:o},h={strides:n,pad:s,dataFormat:r,dilations:a},p=Mr.runKernel(vt,c,h);return u?vl(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),Kl=qr({conv3DBackpropInput_:function(e,t,n,s,r){Q(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,i=t,o=!1;4===t.rank&&(o=!0,i=vl(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const l=a[4],u=i.shape[4];Q(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),Q(5===i.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`)),Q(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),Q(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),Q(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:i,filter:n},h={pad:r,strides:s,inputShape:a},p=Mr.runKernel(It,c,h);return o?vl(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),Xl=qr({conv3dTranspose_:function(e,t,n,s,r){const a=Gr(e,"x","conv3dTranspose"),i=Gr(t,"filter","conv3dTranspose");return Kl(n,a,i,s,r)}}),Yl=qr({cos_:function(e){const t={x:Gr(e,"x","cos")};return Mr.runKernel($t,t)}}),Jl=qr({cosh_:function(e){const t={x:Gr(e,"x","cosh")};return Mr.runKernel(Ct,t)}}),Zl=qr({cumsum_:function(e,t=0,n=!1,s=!1){const r={x:Gr(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:s};return Mr.runKernel(St,r,a)}}),Ql=qr({denseBincount_:function(e,t,n,s=!1){const r=Gr(e,"x","denseBincount"),a=Gr(t,"weights","denseBincount");Q("int32"===r.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`)),Q(r.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`)),Q(n>=0,(()=>`size must be non-negative, but got ${n}.`)),Q(a.size===r.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${a.shape}.`));const i={x:r,weights:a},o={size:n,binaryOutput:s};return Mr.runKernel(Et,i,o)}}),eu=qr({depthToSpace_:function(e,t,n="NHWC"){const s=Gr(e,"x","depthToSpace"),r="NHWC"===n?s.shape[1]:s.shape[2],a="NHWC"===n?s.shape[2]:s.shape[3],i="NHWC"===n?s.shape[3]:s.shape[1];Q(r*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`)),Q(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${s.shape}`)),Q(i%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${s.shape}`));const o={x:s},l={blockSize:t,dataFormat:n};return Mr.runKernel(At,o,l)}}),tu=qr({depthwiseConv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=Gr(e,"x","depthwiseConv2d"),l=Gr(t,"filter","depthwiseConv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=vl(o,[1,o.shape[0],o.shape[1],o.shape[2]])),Q(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),Q(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`)),Q(u.shape[3]===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),null!=i&&Q(ie(s),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const h={x:u,filter:l},p={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},d=Mr.runKernel(Rt,h,p);return c?vl(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),nu=qr({diag_:function(e){const t={x:Gr(e,"x","diag")};return Mr.runKernel(_t,t)}}),su=qr({dilation2d_:function(e,t,n,s,r=[1,1],a="NHWC"){const i=Gr(e,"x","dilation2d"),o=Gr(t,"filter","dilation2d");Q(3===i.rank||4===i.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`)),Q(3===o.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`)),Q("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let l=i,u=!1;3===i.rank&&(l=vl(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0);const c={x:l,filter:o},h={strides:n,pad:s,dilations:r},p=Mr.runKernel(Ot,c,h);return u?vl(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),ru=qr({equal_:function(e,t){let n=Gr(e,"a","equal"),s=Gr(t,"b","equal");[n,s]=Sr(n,s),Ho(n.shape,s.shape);const r={a:n,b:s};return Mr.runKernel(Vt,r)}}),au=qr({where_:function(e,t,n){const s=Gr(t,"a","where"),r=Gr(n,"b","where"),a=Gr(e,"condition","where","bool"),i=Ho(s.shape,r.shape),o=Ml(s,i),l=Ml(r,i);1===a.rank&&Q(a.shape[0]===s.shape[0],(()=>"The first dimension of `a` must match the size of `condition`.")),1!==a.rank&&ee(a.shape,l.shape,"Error in where: ");const u={condition:a,t:o,e:l};return Mr.runKernel(ls,u)}}),iu=qr({divNoNan_:function(e,t){let n=Gr(e,"a","div"),s=Gr(t,"b","div");[n,s]=Sr(n,s);const r=vo(n,s),a=Co(r),i=ru(s,a);return au(i,a,r)}}),ou=qr({dot_:function(e,t){const n=Gr(e,"t1","dot"),s=Gr(t,"t2","dot");Q(!(1!==n.rank&&2!==n.rank||1!==s.rank&&2!==s.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`));const r=1===n.rank?n.size:n.shape[1],a=1===s.rank?s.size:s.shape[0];if(Q(r===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${a}.`)),1===n.rank&&1===s.rank){const e=vl(n,[1,-1]),t=vl(s,[-1,1]),r=ui(e,t);return vl(r,[])}if(1===n.rank&&2===s.rank){const e=vl(n,[1,-1]),t=vl(s,[s.shape[0],s.shape[1]]),r=ui(e,t);return vl(r,[r.size])}if(2===n.rank&&1===s.rank){const e=vl(s,[-1,1]),t=ui(n,e);return vl(t,[t.size])}{const e=vl(s,[s.shape[0],s.shape[1]]);return ui(n,e)}}}),lu=qr({elu_:function(e){const t={x:Gr(e,"x","elu")};return Mr.runKernel(Bt,t)}}),uu=qr({erf_:function(e){let t=Gr(e,"x","erf");Q("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=Ua(t,"float32"));const n={x:t};return Mr.runKernel(Wt,n)}}),cu=qr({exp_:function(e){const t={x:Gr(e,"x","exp")};return Mr.runKernel(Ut,t)}}),hu=qr({expandDims_:function(e,t=0){const n=Gr(e,"x","expandDims","string_or_numeric");Q(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const s={input:n},r={dim:t};return Mr.runKernel(Gt,s,r)}}),pu=qr({expm1_:function(e){const t={x:Gr(e,"x","expm1")};return Mr.runKernel(Ht,t)}}),du=qr({tile_:function(e,t){const n=Gr(e,"x","tile","string_or_numeric");Q(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const s={x:n},r={reps:t};return Mr.runKernel(Ts,s,r)}}),fu=qr({eye_:function(e,t,n,s="float32"){null==t&&(t=e);const r=Va([e,t],s),a=e<=t?e:t;for(let e=0;e<a;++e)r.set(1,e,e);const i=vl(r.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return du(hu(i,0),[n[0],1,1]);if(2===n.length)return du(hu(hu(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return du(hu(hu(hu(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}}),mu=qr({floor_:function(e){const t={x:Gr(e,"x","floor")};return Mr.runKernel(Xt,t)}}),gu=qr({gather_:function(e,t,n=0,s=0){const r={x:Gr(e,"x","gather"),indices:Gr(t,"indices","gather","int32")},a={axis:n,batchDims:s};return Mr.runKernel(Zt,r,a)}}),yu=qr({greater_:function(e,t){let n=Gr(e,"a","greater"),s=Gr(t,"b","greater");[n,s]=Sr(n,s),Ho(n.shape,s.shape);const r={a:n,b:s};return Mr.runKernel(en,r)}}),bu=qr({greaterEqual_:function(e,t){let n=Gr(e,"a","greaterEqual"),s=Gr(t,"b","greaterEqual");[n,s]=Sr(n,s),Ho(n.shape,s.shape);const r={a:n,b:s};return Mr.runKernel(tn,r)}}),xu=qr({imag_:function(e){const t={input:Gr(e,"input","imag")};return Mr.runKernel(rn,t)}}),wu=qr({isFinite_:function(e){const t={x:Gr(e,"x","isFinite")};return Mr.runKernel(an,t)}}),ku=qr({isInf_:function(e){const t={x:Gr(e,"x","isInf")};return Mr.runKernel(on,t)}}),vu=qr({isNaN_:function(e){const t={x:Gr(e,"x","isNaN")};return Mr.runKernel(ln,t)}}),Nu=qr({leakyRelu_:function(e,t=.2){const n={x:Gr(e,"x","leakyRelu")},s={alpha:t};return Mr.runKernel(un,n,s)}}),Iu=qr({less_:function(e,t){let n=Gr(e,"a","less"),s=Gr(t,"b","less");[n,s]=Sr(n,s),Ho(n.shape,s.shape);const r={a:n,b:s};return Mr.runKernel(cn,r)}}),$u=qr({lessEqual_:function(e,t){let n=Gr(e,"a","lessEqual"),s=Gr(t,"b","lessEqual");[n,s]=Sr(n,s),Ho(n.shape,s.shape);const r={a:n,b:s};return Mr.runKernel(hn,r)}});function Cu(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:e,stop:t,num:n};return Mr.runKernel(pn,{},s)}const Su=qr({localResponseNormalization_:function(e,t=5,n=1,s=1,r=.5){const a=Gr(e,"x","localResponseNormalization");Q(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),Q(ie(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let i=a,o=!1;3===a.rank&&(o=!0,i=vl(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:i},u={depthRadius:t,bias:n,alpha:s,beta:r},c=Mr.runKernel(xn,l,u);return o?vl(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Tu=qr({log_:function(e){const t={x:Gr(e,"x","log")};return Mr.runKernel(dn,t)}}),Eu=qr({log1p_:function(e){const t={x:Gr(e,"x","log1p")};return Mr.runKernel(fn,t)}}),Au=qr({neg_:function(e){const t={x:Gr(e,"x","neg")};return Mr.runKernel(On,t)}}),Ru=qr({softplus_:function(e){const t={x:Gr(e,"x","softplus")};return Mr.runKernel(ms,t)}}),Fu=qr({logSigmoid_:function(e){const t=Gr(e,"x","logSigmoid");return Fo((e=>({value:Au(Ru(Au(e))),gradFunc:t=>No(t,Cl(Au(e)))})))(t)}}),Du=qr({max_:function(e,t=null,n=!1){const s={x:Gr(e,"x","max")},r={reductionIndices:t,keepDims:n};return Mr.runKernel(kn,s,r)}}),_u=qr({sum_:function(e,t=null,n=!1){let s=Gr(e,"x","sum");"bool"===s.dtype&&(s=Ua(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return Mr.runKernel(ys,r,a)}}),Ou=qr({logSoftmax_:function(e,t=-1){const n=Gr(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return Fo(((e,n)=>{const s=Du(e,t,!0),r=Po(e,s),a=Po(Ua(r,"float32"),Tu(_u(cu(r),t,!0)));return n([a]),{value:a,gradFunc:(e,n)=>{const[s]=n,r=cu(s);return Po(e,No(_u(e,t,!0),r))}}}))(n)}});function Mu(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function Lu(e,t,n){const s=e.length+t.length,r=[];let a=0,i=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?r.push(e[a++]):r.push(t[i++]);return r}function zu(e,t){const n=[],s=e.length;for(let r=0;r<s;r++)-1===t.indexOf(r)&&n.push(e[r]);return[n,t.map((t=>e[t]))]}function Bu(e,t){return Lu(e,t.map((e=>1)),t)}function Pu(e,t,n){Q(Mu(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function Wu(e,t){if(Mu(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach((e=>n.push(e))),n}function Vu(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function Uu(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}const Gu=qr({logSumExp_:function(e,t=null,n=!1){const s=Gr(e,"x","logSumExp"),r=de(t,s.shape),a=Du(s,r,!0),i=Po(s,a),o=cu(i),l=_u(o,r),u=Tu(l),c=wo(vl(a,u.shape),u);if(n){const e=Bu(c.shape,r);return vl(c,e)}return c}}),Hu=qr({logicalAnd_:function(e,t){const n=Gr(e,"a","logicalAnd","bool"),s=Gr(t,"b","logicalAnd","bool");Ho(n.shape,s.shape);const r={a:n,b:s};return Mr.runKernel(mn,r)}}),ju=qr({logicalNot_:function(e){const t={x:Gr(e,"x","logicalNot","bool")};return Mr.runKernel(gn,t)}}),qu=qr({logicalOr_:function(e,t){const n=Gr(e,"a","logicalOr","bool"),s=Gr(t,"b","logicalOr","bool");Ho(n.shape,s.shape);const r={a:n,b:s};return Mr.runKernel(yn,r)}}),Ku=qr({logicalXor_:function(e,t){const n=Gr(e,"a","logicalXor","bool"),s=Gr(t,"b","logicalXor","bool");return Ho(n.shape,s.shape),Hu(qu(e,t),ju(Hu(e,t)))}}),Xu=qr({maxPool_:function(e,t,n,s,r){const a=Gr(e,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=vl(a,[1,a.shape[0],a.shape[1],a.shape[2]])),Q(4===i.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`)),Q(wl(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),null!=r&&Q(ie(s),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r},c=Mr.runKernel(Nn,l,u);return o?vl(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Yu=qr({maxPool3d_:function(e,t=[1,1,1],n,s,r,a="NDHWC"){const i=Gr(e,"x","maxPool3d");let o=i,l=!1;4===i.rank&&(l=!0,o=vl(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),Q(5===o.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`)),Q("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),null!=r&&Q(ie(s),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const u={x:o},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a},h=Mr.runKernel($n,u,c);return l?vl(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),Ju=qr({maxPoolWithArgmax_:function(e,t,n,s,r=!1){const a={x:Gr(e,"x","maxPoolWithArgmax")},i={filterSize:t,strides:n,pad:s,includeBatchInIndex:r},o=Mr.runKernel(Sn,a,i);return{result:o[0],indexes:o[1]}}}),Zu=qr({mean_:function(e,t=null,n=!1){const s={x:Gr(e,"x","mean")},r={axis:t,keepDims:n};return Mr.runKernel(Tn,s,r)}}),Qu=qr({min_:function(e,t=null,n=!1){const s={x:Gr(e,"x","min")},r={axis:t,keepDims:n};return Mr.runKernel(En,s,r)}}),ec=qr({minimum_:function(e,t){let n=Gr(e,"a","minimum"),s=Gr(t,"b","minimum");[n,s]=Sr(n,s),"bool"===n.dtype&&(n=Ua(n,"int32"),s=Ua(s,"int32")),Ho(n.shape,s.shape);const r={a:n,b:s};return Mr.runKernel(An,r)}}),tc=qr({mirrorPad_:function(e,t,n){Q("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const s=Gr(e,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");Q(t.length===s.rank,(()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`));const r="reflect"===n?1:0;for(let e=0;e<s.rank;e++)Q(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Q(t[e][0]>=0&&t[e][0]<=s.shape[e]-r&&t[e][1]>=0&&t[e][1]<=s.shape[e]-r,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${s.shape[e]-r} or less than 0 for input of shape ${s.shape}`));const a={paddings:t,mode:n},i={x:s};return Mr.runKernel(Rn,i,a)}}),nc=qr({mod_:function(e,t){let n=Gr(e,"a","mod"),s=Gr(t,"b","mod");[n,s]=Sr(n,s);const r={a:n,b:s};return Mr.runKernel(Fn,r)}}),sc=qr({moments_:function(e,t=null,n=!1){const s=de(t,(e=Gr(e,"x","moments")).shape),r=Zu(e,s,n);let a=r.shape;n||(a=Bu(r.shape,s));const i=$o(Po(Ua(e,"float32"),vl(r,a)));return{mean:r,variance:Zu(i,s,n)}}}),rc=qr({multiRNNCell_:function(e,t,n,s){const r=Gr(t,"data","multiRNNCell"),a=Hr(n,"c","multiRNNCell"),i=Hr(s,"h","multiRNNCell");let o=r;const l=[];for(let t=0;t<e.length;t++){const n=e[t](o,a[t],i[t]);l.push(n[0]),l.push(n[1]),o=n[1]}const u=[],c=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),c.push(l[e+1]);return[u,c]}}),ac=qr({multinomial_:function(e,t,n,s=!1){const r=Gr(e,"logits","multinomial"),a=r.size,i=r.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o={logits:1===i?vl(r,[1,-1]):r},l={numSamples:t,seed:n,normalized:s},u=Mr.runKernel(Dn,o,l);return 1===i?vl(u,[u.size]):u}}),ic=qr({notEqual_:function(e,t){let n=Gr(e,"a","notEqual"),s=Gr(t,"b","notEqual");[n,s]=Sr(n,s),Ho(n.shape,s.shape);const r={a:n,b:s};return Mr.runKernel(Mn,r)}});function oc(e,t="float32"){if("complex64"===t){const t=oc(e,"float32"),n=oc(e,"float32");return Kr(t,n)}const n=De(se(e),t);return Mr.makeTensor(n,e,t)}function lc(e,t="float32"){if("complex64"===t){const t=lc(e,"float32"),n=oc(e,"float32");return Kr(t,n)}const n=Fe(se(e),t);return Mr.makeTensor(n,e,t)}const uc=qr({onesLike_:function(e){const t={x:Gr(e,"x","onesLike")};return Mr.runKernel(Pn,t)}}),cc=qr({outerProduct_:function(e,t){const n=Gr(e,"v1","outerProduct"),s=Gr(t,"v2","outerProduct");Q(1===n.rank&&1===s.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${s.rank}.`));const r=vl(n,[-1,1]),a=vl(s,[1,-1]);return ui(r,a)}}),hc=qr({pad_:function(e,t,n=0){const s=Gr(e,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const r={paddings:t,constantValue:n},a={x:s};return Mr.runKernel(Un,a,r)}}),pc=qr({pad1d_:function(e,t,n=0){return Q(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),hc(e,[t],n)}}),dc=qr({pad2d_:function(e,t,n=0){return Q(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),hc(e,t,n)}}),fc=qr({pad3d_:function(e,t,n=0){return Q(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),hc(e,t,n)}}),mc=qr({pad4d_:function(e,t,n=0){return Q(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),hc(e,t,n)}}),gc=qr({spaceToBatchND_:function(e,t,n){const s=Gr(e,"x","spaceToBatchND");Q(s.rank>=1+t.length,(()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`)),Q(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),Q(s.shape.reduce(((e,s,r)=>r>0&&r<=t.length?e&&(s+n[r-1][0]+n[r-1][1])%t[r-1]==0:e),!0),(()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const r={x:s},a={blockShape:t,paddings:n};return Mr.runKernel(bs,r,a)}}),yc=qr({pool_:function(e,t,n,s,r,a){null==r&&(r=[1,1]),null==a&&(a=1),0===s&&(s="valid");const i=Gr(e,"x","maxPool");let o=i,l=!1;3===i.rank&&(l=!0,o=vl(i,[1,i.shape[0],i.shape[1],i.shape[2]])),Q(wl(a,r),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${r}'`));const u=cl(o.shape,t,a,r,s),c=[u.dilationHeight,u.dilationWidth];let h;h="same"===s?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),s=n.map((e=>Math.floor(e/2))),r=n.map(((e,t)=>e-s[t]));return n.map(((e,t)=>[s[t],r[t]]))}([u.filterHeight,u.filterWidth],c):[[0,0],[0,0]];const p=1===c[0]&&1===c[1],[d,f]=function(e,t,n){const s=n.map((e=>e[0])),r=n.map((e=>e[1])),a=e.concat(s,r),i=t.map(((e,t)=>(e-a[t]%e)%e)),o=r.map(((e,t)=>e+i[t]));return[t.map(((e,t)=>[s[t],o[t]])),t.map(((e,t)=>[0,i[t]]))]}([u.inHeight,u.inWidth],c,h),m=p?s:"valid",g=p?o:gc(o,c,d),y=("avg"===n?()=>Nl(g,t,a,m):()=>Xu(g,t,a,m))(),b=p?y:Al(y,c,f);return l?vl(b,[b.shape[1],b.shape[2],b.shape[3]]):b}}),bc=qr({prelu_:function(e,t){const n={x:Gr(e,"x","prelu"),alpha:Gr(t,"alpha","prelu")};return Mr.runKernel(jn,n)}}),xc=qr({prod_:function(e,t=null,n=!1){let s=Gr(e,"x","prod");"bool"===s.dtype&&(s=Ua(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return Mr.runKernel(qn,r,a)}}),wc=qr({rand_:function(e,t,n){const s=se(e);let r=null;if(null==n||"float32"===n)r=new Float32Array(s);else if("int32"===n)r=new Int32Array(s);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);r=new Uint8Array(s)}for(let e=0;e<s;e++)r[e]=t();return Mr.makeTensor(r,e,n)}});var kc=n(381);class vc{constructor(e,t,n,s,r){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=r||Math.random();this.random=kc.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,r,a;do{s=2*this.random()-1,r=2*this.random()-1,a=s*s+r*r}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*s*i,t=this.mean+this.stdDev*r*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Nc{constructor(e,t,n,s){this.alpha=e,this.beta=1/t,this.dtype=n;const r=s||Math.random();this.randu=kc.alea(r.toString()),this.randn=new vc(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,s,r,a;for(;;){do{s=this.randn.nextValue(),a=1+this.c*s}while(a<=0);if(a*=a*a,e=s*s,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),r=this.randu(),r<t||Math.log(r)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class Ic{constructor(e=0,t=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=kc.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const $c=qr({randomGamma_:function(e,t,n=1,s="float32",r){if(null==n&&(n=1),null==s&&(s="float32"),"float32"!==s&&"int32"!==s)throw new Error(`Unsupported data type ${s}`);const a=new Nc(t,n,s,r),i=Va(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}}),Cc=qr({randomNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const a=new vc(t,n,s,!1,r),i=Va(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}}),Sc=qr({randomUniform_:function(e,t=0,n=1,s="float32",r){const a=Va(e,s),i=new Ic(t,n,null,r);for(let e=0;e<a.values.length;e++)a.values[e]=i.nextValue();return a.toTensor()}});function Tc(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const r={start:e,stop:t,step:n,dtype:s};return Mr.runKernel(Kn,{},r)}const Ec=qr({real_:function(e){const t={input:Gr(e,"input","real")};return Mr.runKernel(Xn,t)}}),Ac=qr({reciprocal_:function(e){const t={x:Gr(e,"x","reciprocal")};return Mr.runKernel(Yn,t)}}),Rc=qr({relu_:function(e){const t={x:Gr(e,"x","relu")};return Mr.runKernel(Jn,t)}}),Fc=qr({relu6_:function(e){const t={x:Gr(e,"x","relu6")};return Mr.runKernel(ss,t)}}),Dc=qr({reverse_:function(e,t){const n={x:Gr(e,"x","reverse")},s={dims:t};return Mr.runKernel(rs,n,s)}}),_c=qr({reverse1d_:function(e){const t=Gr(e,"x","reverse");return Q(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),Dc(t,0)}}),Oc=qr({reverse2d_:function(e,t){const n=Gr(e,"x","reverse");return Q(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),Dc(n,t)}}),Mc=qr({reverse3d_:function(e,t){const n=Gr(e,"x","reverse");return Q(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),Dc(n,t)}}),Lc=qr({reverse4d_:function(e,t){const n=Gr(e,"x","reverse");return Q(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),Dc(n,t)}}),zc=qr({round_:function(e){const t={x:Gr(e,"x","round")};return Mr.runKernel(as,t)}}),Bc=qr({rsqrt_:function(e){const t={x:Gr(e,"x","rsqrt")};return Mr.runKernel(is,t)}}),Pc=qr({selu_:function(e){const t={x:Gr(e,"x","selu")};return Mr.runKernel(us,t)}}),Wc=qr({separableConv2d_:function(e,t,n,s,r,a=[1,1],i="NHWC"){const o=Gr(e,"x","separableConv2d"),l=Gr(t,"depthwiseFilter","separableConv2d"),u=Gr(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=vl(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");Q(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),Q(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),Q(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),Q(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),Q(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const p=l.shape[2],d=l.shape[3];Q(u.shape[2]===p*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*d}, but got ${u.shape[2]}.`));const f=tu(c,l,s,r,i,a),m=Ul(f,u,1,"valid",i);return h?vl(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),Vc=async function(e,t){const n=Gr(e,"x","setdiff1d"),s=Gr(t,"y","setdiff1d");Q(n.dtype===s.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${s.dtype}).`)),Q(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),Q(1===s.rank,(()=>`y should be 1D tensor, but got y (${s.shape}).`));const r=await n.data(),a=await s.data(),i=new Set(a);let o=0;for(let e=0;e<r.length;e++)i.has(r[e])||o++;const l=new pr([o],n.dtype),u=new pr([o],"int32");for(let e=0,t=0;e<r.length;e++)i.has(r[e])||(l.values[t]=r[e],u.values[t]=e,t++);return[l.toTensor(),u.toTensor()]},Uc=qr({sign_:function(e){const t={x:Gr(e,"x","sign")};return Mr.runKernel(ds,t)}}),Gc=qr({sin_:function(e){const t={x:Gr(e,"x","sin")};return Mr.runKernel(hs,t)}}),Hc=qr({sinh_:function(e){const t={x:Gr(e,"x","sinh")};return Mr.runKernel(ps,t)}}),jc=qr({slice1d_:function(e,t,n){const s=Gr(e,"x","slice1d");return Q(1===s.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`)),Sl(s,[t],[n])}}),qc=qr({slice2d_:function(e,t,n){const s=Gr(e,"x","slice2d");return Q(2===s.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`)),Sl(s,t,n)}}),Kc=qr({slice3d_:function(e,t,n){const s=Gr(e,"x","slice3d");return Q(3===s.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`)),Sl(s,t,n)}}),Xc=qr({slice4d_:function(e,t,n){const s=Gr(e,"x","slice4d");return Q(4===s.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`)),Sl(s,t,n)}}),Yc=qr({softmax_:function(e,t=-1){const n=Gr(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const s={logits:n},r={dim:t};return Mr.runKernel(ws,s,r)}}),Jc=qr({fft_:function(e){Q("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Mr.runKernel(jt,t)}}),Zc=qr({ifft_:function(e){Q("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Mr.runKernel(sn,t)}}),Qc=qr({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let s;if(t<=2){const r=vl(e,[n,t]);s=Zc(r)}else{const r=[n,2*(t-1)],a=vl(Ec(e),[n,t]),i=vl(xu(e),[n,t]),o=Dc(Sl(a,[0,1],[n,t-2]),1),l=No(Dc(Sl(i,[0,1],[n,t-2]),1),_o(-1)),u=$l([a,o],1),c=$l([i,l],1),h=vl(Kr(u,c),[r[0],r[1]]);s=Zc(h)}if(s=Ec(s),3===e.rank&&0!==e.shape[0]){const t=s,n=e.shape[0];s=vl(s,[n,s.shape[0]/n,s.shape[1]]),t.dispose()}return s}}),eh=qr({split_:function(e,t,n=0){const s={x:Gr(e,"x","split")},r={numOrSizeSplits:t,axis:n};return Mr.runKernel(xs,s,r)}}),th=qr({rfft_:function(e,t){Q("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const s=e.size/n;let r;if(null!=t&&t<n){const s=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,r=Sl(e,s,a),n=t}else if(null!=t&&t>n){const s=e.shape.map((e=>e));s[e.shape.length-1]=t-n,r=$l([e,oc(s)],e.shape.length-1),n=t}else r=e;const a=Co(r),i=vl(Kr(r,a),[s,n]),o=Jc(i),l=Math.floor(n/2)+1,u=Ec(o),c=xu(o),h=eh(u,[l,n-l],u.shape.length-1),p=eh(c,[l,n-l],c.shape.length-1),d=r.shape.slice();return d[r.shape.length-1]=l,vl(Kr(h[0],p[0]),d)}}),nh=qr({squaredDifference_:function(e,t){let n=Gr(e,"a","squaredDifference"),s=Gr(t,"b","squaredDifference");[n,s]=Sr(n,s),Ho(n.shape,s.shape);const r={a:n,b:s};return Mr.runKernel(ks,r,{})}}),sh=qr({squeeze_:function(e,t){const n=Gr(e,"x","squeeze");return vl(n,fe(n.shape,t).newShape)}}),rh=qr({stack_:function(e,t=0){const n=Hr(e,"tensors","stack","string_or_numeric");Q(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&Q(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const s=n,r={axis:t};return Mr.runKernel(Vn,s,r)}}),ah=qr({step_:function(e,t=0){const n={x:Gr(e,"x","step")},s={alpha:t};return Mr.runKernel(Os,n,s)}}),ih=qr({stridedSlice_:function(e,t,n,s,r=0,a=0,i=0,o=0,l=0){const u={x:Gr(e,"x","stridedSlice")},c={begin:t,end:n,strides:s,beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};return Mr.runKernel($s,u,c)}}),oh=qr({tan_:function(e){const t={x:Gr(e,"x","tan")};return Mr.runKernel(Cs,t)}});function lh(e,t){te(e);const n=Wr(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Xr(e,null,n,t)}function uh(e,t,n){if(te(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=Wr(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Xr(e,t,s,n)}function ch(e,t,n){if(te(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const s=Wr(e,n);if(4!==s.length&&1!==s.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Xr(e,t,s,n)}function hh(e,t,n){if(te(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const s=Wr(e,n);if(5!==s.length&&1!==s.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Xr(e,t,s,n)}function ph(e,t,n){if(te(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const s=Wr(e,n);if(6!==s.length&&1!==s.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Xr(e,t=t||s,s,n)}const dh=qr({topk_:function(e,t=1,n=!0){const s=Gr(e,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const a={x:s},i={k:t,sorted:n},[o,l]=Mr.runKernel(Es,a,i);return{values:o,indices:l}}}),fh=qr({truncatedNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const a=new vc(t,n,s,!0,r),i=Va(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}}),mh=qr({unique_:function(e,t=0){const n=Gr(e,"x","unique","string_or_numeric");Q(n.rank>0,(()=>"The input tensor must be at least 1D"));const s={x:n},r={axis:t},[a,i]=Mr.runKernel(Rs,s,r);return{values:a,indices:i}}}),gh=qr({unsortedSegmentSum_:function(e,t,n){const s=Gr(e,"x","unsortedSegmentSum"),r=Gr(t,"segmentIds","unsortedSegmentSum","int32");Q(ie(n),(()=>"numSegments must be of dtype int"));const a={x:s,segmentIds:r},i={numSegments:n};return Mr.runKernel(Ds,a,i)}}),yh=qr({unstack_:function(e,t=0){const n=Gr(e,"x","unstack","string_or_numeric");Q(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const s={value:n},r={axis:t};return Mr.runKernel(Fs,s,r)}});function bh(e,t=!0,n,s){return Mr.makeVariable(e,t,n,s)}function xh(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const s=Va(e,"int32"),r=Va([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=s.indexToLoc(n[t]),i=t*e.length;r.values.set(a,i)}return r.toTensor()}const wh=async function(e){const t=Gr(e,"condition","whereAsync","bool"),n=await t.data(),s=xh(t.shape,n);return e!==t&&t.dispose(),s},kh=async function(e,t,n){const s=Gr(e,"tensor","boolMask"),r=Gr(t,"mask","boolMask","bool"),a=null==n?0:n,i=r.rank,o=s.shape;Q(i>0,(()=>"mask cannot be scalar")),ee(o.slice(a,a+i),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=a;e<a+i;e++)l*=o[e];const u=o.slice(0,a).concat([l],o.slice(a+i)),c=vl(s,u),h=vl(r,[-1]),p=await wh(h),d=sh(p,[1]),f=gu(c,d,a);return e!==s&&s.dispose(),t!==r&&r.dispose(),d.dispose(),c.dispose(),h.dispose(),p.dispose(),f};function vh(e,t,n=null){if(0===e.rank)return Vo(e);if(1!==e.rank&&null===n)return vh(vl(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return _u(Vo(e),n);if(t===1/0)return Du(Vo(e),n);if(t===-1/0)return Qu(Vo(e),n);if("euclidean"===t||2===t)return Io(_u(Bo(Vo(e),_o(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return Du(_u(Vo(e),n[0]),n[1]-1);if(t===1/0)return Du(_u(Vo(e),n[1]),n[0]);if(t===-1/0)return Qu(_u(Vo(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return Io(_u($o(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const Nh=qr({norm_:function(e,t="euclidean",n=null,s=!1){const r=vh(e=Gr(e,"x","norm"),t,n);let a=r.shape;if(s){const t=de(n,e.shape);a=Bu(r.shape,t)}return vl(r,a)}}),Ih=qr({movingAverage_:function(e,t,n,s,r=!0){const a=Gr(e,"v","movingAverage"),i=Gr(t,"x","movingAverage"),o=Gr(n,"decay","movingAverage");Tr(a,i),Q(ae(a.shape,i.shape),(()=>"Shape mismatch in v and x"));const l=_o(1),u=Po(l,o);let c=No(Po(i,a),u);if(r){Q(null!=s,(()=>"When using zeroDebias: true, step is required."));const e=Gr(s,"step","movingAverage");c=vo(c,Po(l,Bo(o,e)))}return wo(a,c)}}),$h=qr({scatterND_:function(e,t,n){const s=Gr(e,"indices","scatterND","int32"),r=Gr(t,"updates","scatterND");xi(r,s,n);const a={indices:s,updates:r},i={shape:n};return Mr.runKernel(os,a,i)}}),Ch=qr({sparseToDense_:function(e,t,n,s=0){const r=Gr(e,"sparseIndices","sparseToDense","int32"),a=Gr(t,"sparseValues","sparseToDense"),i=Gr(s,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,s){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const r=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=t.size;if(0!==t.rank&&(1!==t.rank||i!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,a,n,i);const o={sparseIndices:r,sparseValues:a,defaultValue:i},l={outputShape:n};return Mr.runKernel(Is,o,l)}}),Sh=qr({gatherND_:function(e,t){const n=Gr(t,"indices","gatherND","int32"),s={params:Gr(e,"x","gatherND"),indices:n};return Mr.runKernel(Qt,s)}}),Th=qr({dropout_:function(e,t,n,s){const r=Gr(e,"x","dropout");if(Q("float32"===r.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`)),Q(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof gr?r.clone():r;const a=function(e,t){if(null==t)return e.shape.slice();if(ae(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)null==t[s]&&null!=e.shape[s]?n.push(e.shape[s]):n.push(t[s]);return n}return t}(r,n),i=1-t,o=vo(mu(wo(Sc(a,0,1,"float32",s),i)),i);return No(r,o)}});function Eh(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function Ah(e,t,n){const s=1-e%2,r=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+s-1);r[a]=t-n*Math.cos(i)}return lh(r,"float32")}const Rh=async function(e,t,n=1){const s=Gr(e,"predictions","inTopK"),r=Gr(t,"targets","inTopK");Q(s.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`)),Q(s.rank-1===r.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`)),ee(s.shape.slice(0,s.shape.length-1),r.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=s.shape[s.shape.length-1];Q(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const i=await s.data(),o=await r.data(),[l,u]=[i.length/a,a],c=me("bool",l);for(let e=0;e<l;e++){const t=e*u,s=i.subarray(t,t+u),r=[];for(let e=0;e<s.length;e++)r.push({value:s[e],index:e});r.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(r[t].index===o[e]){c[e]=1;break}}return e!==s&&s.dispose(),t!==r&&r.dispose(),Yr(c,r.shape,"bool")},Fh=qr({conv2DBackpropFilter_:function(e,t,n,s,r,a="NHWC",i){let o=e;3===e.rank&&(o=vl(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=vl(t,[1,t.shape[0],t.shape[1],t.shape[2]])),Q(4===o.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`)),Q(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),Q(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const u="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];Q(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),Q(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),null!=i&&Q(ie(r),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const h={x:o,dy:l},p={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,filterShape:n};return Mr.runKernel(wt,h,p)}});function Dh(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return No(e,ah(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function _h(e,t){let n=t;const s=Go(e.shape,t.shape);return s.length>0&&(n=_u(n,s)),vl(n,e.shape)}function Oh(e,t,n,s){if("linear"===t)return e;if("relu"===t)return Rc(e);if("elu"===t)return lu(e);if("relu6"===t)return Fc(e);if("prelu"===t)return bc(e,n);if("leakyrelu"===t)return Nu(e,s);throw new Error(`Unknown fused activation ${t}.`)}const Mh=(e,t)=>!(e>0)||"linear"===t,Lh=qr({fusedConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",!1===Mh(Mr.state.gradientDepth,l)){let h=Ul(e,t,n,s,r,a,i);return null!=o&&(h=wo(h,o)),Oh(h,l,u,c)}const h=Gr(e,"x","conv2d"),p=Gr(t,"filter","conv2d");let d=h,f=!1;3===h.rank&&(f=!0,d=vl(h,[1,h.shape[0],h.shape[1],h.shape[2]])),Q(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),Q(4===p.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${p.rank}.`)),null!=i&&Q(ie(s),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`)),Q(d.shape[3]===p.shape[2],(()=>`Error in conv2d: depth of input (${d.shape[3]}) must match input depth for filter ${p.shape[2]}.`)),Q(wl(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),Q("NHWC"===r,(()=>`Error in conv2d: got dataFormat of ${r} but only NHWC is currently supported.`));const m=pl(d.shape,p.shape,n,a,s,i);let g,y;null!=o&&(g=Gr(o,"bias","fused conv2d"),[g]=Sr(g,h),Ho(m.outShape,g.shape)),null!=u&&(y=Gr(u,"prelu weights","fused conv2d"));const b=(e,t)=>{const[r,i,o,u]=t,c=Dh(e,o,l);Q(xl(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const h=[Hl(i.shape,c,r,n,s),Fh(i,c,r.shape,n,s)];if(null!=u){const e=_h(u,c);h.push(e)}return h},x={x:d,filter:p,bias:g,preluActivationWeights:y},w={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:c};return null==o?Fo(((e,t,n)=>{let s=Mr.runKernel(Bs,x,w);return n([t,e,s]),f&&(s=vl(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}))(d,p):Fo(((e,t,n,s)=>{let r=Mr.runKernel(Bs,x,w);return s([t,e,r,n]),f&&(r=vl(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}))(d,p,g)}}),zh=qr({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,s,r,a=[1,1],i){let o=e;3===e.rank&&(o=vl(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=vl(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:o,dy:l},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,filterShape:n};return Mr.runKernel(Ft,u,c)}}),Bh=qr({depthwiseConv2dNativeBackpropInput_:function(e,t,n,s,r,a=[1,1],i){let o=t,l=!1;3===t.rank&&(l=!0,o=vl(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:o,filter:n},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,inputShape:e},h=Mr.runKernel(Dt,u,c);return l?vl(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),Ph=qr({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===Mh(Mr.state.gradientDepth,l)){let h=tu(e,t,n,s,r,a,i);return null!=o&&(h=wo(h,o)),Oh(h,l,u,c)}const h=Gr(e,"x","depthwiseConv2d"),p=Gr(t,"filter","depthwiseConv2d");let d=h,f=!1;3===h.rank&&(f=!0,d=vl(h,[1,h.shape[0],h.shape[1],h.shape[2]])),Q(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),Q(4===p.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`)),Q(d.shape[3]===p.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${p.shape[2]}.`)),null==a&&(a=[1,1]),Q(wl(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),null!=i&&Q(ie(s),(()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${i} but got pad ${s}.`));const m=pl(d.shape,p.shape,n,a,s,i,!0);let g,y;null!=o&&(g=Gr(o,"bias","fused conv2d"),[g]=Sr(g,h),Ho(m.outShape,g.shape)),null!=u&&(y=Gr(u,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{Q(xl(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[r,o,u,c]=t,h=Dh(e,u,l),p=Bh(o.shape,h,r,n,s,a,i),d=zh(o,h,r.shape,n,s,a,i);return null!=c?[p,d,_h(g,h)]:[p,d]},x={x:d,filter:p,bias:g,preluActivationWeights:y},w={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:c};return null==o?Fo(((e,t,n)=>{let s=Mr.runKernel(Ps,x,w);return n([t,e,s]),f&&(s=vl(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}))(d,p):Fo(((e,t,n,s)=>{let r=Mr.runKernel(Ps,x,w);return s([t,e,r,n]),f&&(r=vl(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}))(d,p,g)}}),Wh=qr({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:s=!1,bias:r,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:o}){if(!1===Mh(Mr.state.gradientDepth,a)){let l=ui(e,t,n,s);return null!=r&&(l=wo(l,r)),Oh(l,a,i,o)}let l=Gr(e,"a","fused matMul"),u=Gr(t,"b","fused matMul");[l,u]=Sr(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],h=s?u.shape[u.rank-1]:u.shape[u.rank-2],p=n?l.shape[l.rank-1]:l.shape[l.rank-2],d=s?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=se(f),y=se(m);Q(l.rank>=2&&u.rank>=2&&l.rank===u.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${l.rank} and ${u.rank}.`)),Q(ae(f,m),(()=>`Error in fused matMul: outer dimensions (${f}) and (${m}) of Tensors with shapes ${l.shape} and ${u.shape} must match.`)),Q(c===h,(()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${s} must match.`));const b=l.shape.slice(0,-2).concat([p,d]),x=vl(l,n?[g,c,p]:[g,p,c]),w=vl(u,s?[y,d,h]:[y,h,d]);let k,v;null!=r&&(k=Gr(r,"bias","fused matMul"),[k]=Sr(k,l),Ho(b,k.shape)),null!=i&&(v=Gr(i,"prelu weights","fused matMul"));const N=(e,t)=>{const[i,o,l,u]=t,c=Dh(vl(e,l.shape),l,a);let h,p;return n||s?!n&&s?(h=ui(c,o,!1,!1),p=ui(c,i,!0,!1)):n&&!s?(h=ui(o,c,!1,!0),p=ui(i,c,!1,!1)):(h=ui(o,c,!0,!0),p=ui(c,i,!0,!0)):(h=ui(c,o,!1,!0),p=ui(i,c,!0,!1)),null!=r?[h,p,_h(u,c)]:[h,p]},I={a:x,b:w,bias:k,preluActivationWeights:v},$={transposeA:n,transposeB:s,activation:a,leakyreluAlpha:o};return null==r?Fo(((e,t,n)=>{const s=Mr.runKernel(zs,I,$);return n([e,t,s]),{value:vl(s,b),gradFunc:N}}))(x,w):Fo(((e,t,n,s)=>{const r=Mr.runKernel(zs,I,$);return s([e,t,r,n]),{value:vl(r,b),gradFunc:N}}))(x,w,k)}}),Vh=qr({hammingWindow_:function(e){return Ah(e,.54,.46)}}),Uh=qr({hannWindow_:function(e){return Ah(e,.5,.5)}}),Gh=qr({frame_:function(e,t,n,s=!1,r=0){let a=0;const i=[];for(;a+t<=e.size;)i.push(Sl(e,a,t)),a+=n;if(s)for(;a<e.size;){const s=a+t-e.size,o=$l([Sl(e,a,t-s),Lo([s],r)]);i.push(o),a+=n}return 0===i.length?uh([],[0,t]):vl($l(i),[i.length,t])}}),Hh=qr({stft_:function(e,t,n,s,r=Uh){null==s&&(s=Eh(t));const a=Gh(e,t,n),i=No(a,r(t)),o=[];for(let e=0;e<a.shape[0];e++)o.push(th(Sl(i,[e,0],[1,t]),s));return $l(o)}}),jh=qr({cropAndResize_:function(e,t,n,s,r="bilinear",a=0){const i=Gr(e,"image","cropAndResize"),o=Gr(t,"boxes","cropAndResize","float32"),l=Gr(n,"boxInd","cropAndResize","int32"),u=o.shape[0];Q(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),Q(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`)),Q(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`)),Q(2===s.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`)),Q(s[0]>=1&&s[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${s}`)),Q("bilinear"===r||"nearest"===r,(()=>`method must be bilinear or nearest, but was ${r}`));const c={image:i,boxes:o,boxInd:l},h={method:r,extrapolationValue:a,cropSize:s};return Mr.runKernel(Tt,c,h)}}),qh=qr({flipLeftRight_:function(e){const t=Gr(e,"image","flipLeftRight","float32");Q(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return Mr.runKernel(Kt,n,{})}}),Kh=qr({rotateWithOffset_:function(e,t,n=0,s=.5){const r=Gr(e,"image","rotateWithOffset","float32");Q(4===r.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`));const a={image:r},i={radians:t,fillValue:n,center:s};return Mr.runKernel(Ls,a,i)}});function Xh(e,t,n,s,r,a){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),Q(0<=s&&s<=1,(()=>`iouThreshold must be in [0, 1], but was '${s}'`)),Q(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),Q(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),Q(1===t.rank,(()=>"scores must be a 1D tensor")),Q(t.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`)),Q(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:s,scoreThreshold:r,softNmsSigma:a}}const Yh=qr({nonMaxSuppression_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Gr(e,"boxes","nonMaxSuppression"),i=Gr(t,"scores","nonMaxSuppression"),o=Xh(a,i,n,s,r),l={maxOutputSize:n=o.maxOutputSize,iouThreshold:s=o.iouThreshold,scoreThreshold:r=o.scoreThreshold};return Mr.runKernel(Ln,{boxes:a,scores:i},l)}});function Jh(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,r=e.length,a=0,i=!1;for(;s<r;){a=s+(r-s>>>1);const o=n(t,e[a]);o>0?s=a+1:(r=a,i=!o)}return i?s:-s-1}(e,t,n||Zh)}(e,t,n),r=s<0?-(s+1):s;e.splice(r,0,t)}function Zh(e,t){return e>t?1:e<t?-1:0}function Qh(e,t,n,s,r){return np(e,t,n,s,r,0)}function ep(e,t,n,s,r,a){return np(e,t,n,s,r,0,!1,a,!0)}function tp(e,t,n,s,r,a){return np(e,t,n,s,r,a,!0)}function np(e,t,n,s,r,a,i=!1,o=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>r&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(ap);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=t;if(n<r)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=sp(e,a,h[n]);if(i>=s){o=!0;break}if(t.score=t.score*rp(s,c,i),t.score<=r)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(a),p.push(t.score)):t.score>r&&Jh(u,t,ap))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:h};return i&&(m.selectedScores=p),l&&(m.validOutputs=d),m}function sp(e,t,n){const s=e.subarray(4*t,4*t+4),r=e.subarray(4*n,4*n+4),a=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),p=Math.max(r[1],r[3]),d=(o-a)*(l-i),f=(h-u)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function rp(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function ap(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const ip=qr({nonMaxSuppressionWithScore_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Gr(e,"boxes","nonMaxSuppression"),o=Gr(t,"scores","nonMaxSuppression"),l=Xh(i,o,n,s,r,a),u={boxes:i,scores:o},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},h=Mr.runKernel(Bn,u,c);return{selectedIndices:h[0],selectedScores:h[1]}}}),op=qr({nonMaxSuppressionPadded_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Gr(e,"boxes","nonMaxSuppression"),o=Gr(t,"scores","nonMaxSuppression"),l=Xh(i,o,n,s,r,null),u={boxes:i,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},h=Mr.runKernel(zn,u,c);return{selectedIndices:h[0],validOutputs:h[1]}}}),lp=qr({resizeBilinear_:function(e,t,n=!1,s=!1){const r=Gr(e,"images","resizeBilinear");Q(3===r.rank||4===r.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`)),Q(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),Q(!1===s||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=vl(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=Mr.runKernel(ts,o,l);return i?vl(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),up=qr({resizeNearestNeighbor_:function(e,t,n=!1,s=!1){const r=Gr(e,"images","resizeNearestNeighbor");Q(3===r.rank||4===r.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`)),Q(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),Q("float32"===r.dtype||"int32"===r.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),Q(!1===s||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=vl(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=Mr.runKernel(Qn,o,l);return i?vl(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),cp=qr({bandPart_:function(e,t,n){Q(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),Q(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const s=Gr(e,"a","bandPart");Q(s.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`));const r=s.shape,[a,i]=s.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=a),n<0&&(n=i);const o=vl(Tc(0,a,1,"int32"),[-1,1]),l=Tc(0,i,1,"int32"),u=Po(o,l),c=Hu($u(u,_o(+t,"int32")),bu(u,_o(-n,"int32"))),h=oc([a,i],s.dtype);return vl(rh(yh(vl(s,[-1,a,i])).map((e=>au(c,e,h)))),r)}}),hp=qr({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,Q(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)Q(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=eh(e,e.shape[0],0).map((e=>sh(e,[0])));Q(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],s=e;for(let t=0;t<e.length;++t)n.push(Mr.tidy((()=>{let e=s[t];if(t>0)for(let s=0;s<t;++s){const t=No(_u(No(n[s],e)),n[s]);e=Po(e,t)}return vo(e,Nh(e,"euclidean"))})));return t?rh(n,0):n}});function pp(e,t=!1){return Mr.tidy((()=>{Q(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],s=e.shape[1];let r=fu(n),a=Ga(e);const i=uh([[1]],[1,1]);let o=Ga(i);const l=n>=s?s:n;for(let e=0;e<l;++e){const t=a,l=o,u=r;[o,a,r]=Mr.tidy((()=>{const t=Sl(a,[e,e],[n-e,1]),l=Nh(t),u=Sl(a,[e,e],[1,1]),c=au(yu(u,0),uh([[-1]]),uh([[1]])),h=Po(u,No(c,l)),p=vo(t,h);o=1===p.shape[0]?Ga(i):$l([i,Sl(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=Au(vo(ui(c,h),l)),f=Sl(a,[e,0],[n-e,s]),m=No(d,o),g=hi(o);if(0===e)a=Po(f,ui(m,ui(g,f)));else{const t=Po(f,ui(m,ui(g,f)));a=$l([Sl(a,[0,0],[e,s]),t],0)}const y=hi(m),b=Sl(r,[0,e],[n,r.shape[1]-e]);if(0===e)r=Po(b,ui(ui(b,o),y));else{const t=Po(b,ui(ui(b,o),y));r=$l([Sl(r,[0,0],[n,e]),t],1)}return[o,a,r]})),oo([t,l,u])}return!t&&n>s&&(r=Sl(r,[0,0],[n,s]),a=Sl(a,[0,0],[s,s])),[r,a]}))}const dp=qr({qr_:function(e,t=!1){if(Q(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return pp(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),s=yh(vl(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),r=[],a=[];return s.forEach((e=>{const[n,s]=pp(e,t);r.push(n),a.push(s)})),[vl(rh(r,0),e.shape),vl(rh(a,0),e.shape)]}}});var fp;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(fp||(fp={}));const mp=qr({computeWeightedLoss_:function(e,t,n=fp.SUM_BY_NONZERO_WEIGHTS){const s=Gr(e,"losses","computeWeightedLoss");let r=null;null!=t&&(r=Gr(t,"weights","computeWeightedLoss"));const a=null==r?s:No(s,r);if(n===fp.NONE)return a;if(n===fp.SUM)return _u(a);if(n===fp.MEAN){if(null==r)return Zu(a);{const e=s.size/r.size,t=vo(_u(a),_u(r));return e>1?vo(t,_o(e)):t}}if(n===fp.SUM_BY_NONZERO_WEIGHTS){if(null==r)return vo(_u(a),_o(s.size));{const e=No(r,lc(s.shape)),t=Ua(_u(ic(e,_o(0))),"float32");return vo(_u(a),t)}}throw Error(`Unknown reduction: ${n}`)}}),gp=qr({absoluteDifference_:function(e,t,n,s=fp.SUM_BY_NONZERO_WEIGHTS){const r=Gr(e,"labels","absoluteDifference"),a=Gr(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=Gr(n,"weights","absoluteDifference")),ee(r.shape,a.shape,"Error in absoluteDifference: ");const o=Vo(Po(r,a));return mp(o,i,s)}}),yp=qr({cosineDistance_:function(e,t,n,s,r=fp.SUM_BY_NONZERO_WEIGHTS){const a=Gr(e,"labels","cosineDistance"),i=Gr(t,"predictions","cosineDistance");let o=null;null!=s&&(o=Gr(s,"weights","cosineDistance")),ee(a.shape,i.shape,"Error in cosineDistance: ");const l=_o(1),u=Po(l,_u(No(a,i),n,!0));return mp(u,o,r)}}),bp=qr({hingeLoss_:function(e,t,n,s=fp.SUM_BY_NONZERO_WEIGHTS){let r=Gr(e,"labels","hingeLoss");const a=Gr(t,"predictions","hingeLoss");let i=null;null!=n&&(i=Gr(n,"weights","hingeLoss")),ee(r.shape,a.shape,"Error in hingeLoss: ");const o=_o(1);r=Po(No(_o(2),r),o);const l=Rc(Po(o,No(r,a)));return mp(l,i,s)}}),xp=qr({huberLoss_:function(e,t,n,s=1,r=fp.SUM_BY_NONZERO_WEIGHTS){const a=Gr(e,"labels","huberLoss"),i=Gr(t,"predictions","huberLoss");let o=null;null!=n&&(o=Gr(n,"weights","huberLoss")),ee(a.shape,i.shape,"Error in huberLoss: ");const l=_o(s),u=Vo(Po(i,a)),c=ec(u,l),h=Po(u,c),p=wo(No(_o(.5),$o(c)),No(l,h));return mp(p,o,r)}}),wp=qr({logLoss_:function(e,t,n,s=1e-7,r=fp.SUM_BY_NONZERO_WEIGHTS){const a=Gr(e,"labels","logLoss"),i=Gr(t,"predictions","logLoss");let o=null;null!=n&&(o=Gr(n,"weights","logLoss")),ee(a.shape,i.shape,"Error in logLoss: ");const l=_o(1),u=_o(s),c=Au(No(a,Tu(wo(i,u)))),h=No(Po(l,a),Tu(wo(Po(l,i),u))),p=Po(c,h);return mp(p,o,r)}}),kp=qr({meanSquaredError_:function(e,t,n,s=fp.SUM_BY_NONZERO_WEIGHTS){const r=Gr(e,"labels","meanSquaredError"),a=Gr(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=Gr(n,"weights","meanSquaredError")),ee(r.shape,a.shape,"Error in meanSquaredError: ");const o=nh(r,a);return mp(o,i,s)}}),vp=qr({sigmoidCrossEntropy_:function(e,t,n,s=0,r=fp.SUM_BY_NONZERO_WEIGHTS){let a=Gr(e,"multiClassLabels","sigmoidCrossEntropy");const i=Gr(t,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=Gr(n,"weights","sigmoidCrossEntropy")),ee(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),s>0){const e=_o(s),t=_o(1),n=_o(.5);a=wo(No(a,Po(t,e)),No(n,e))}const l=function(e,t){const n=Gr(e,"labels","sigmoidCrossEntropyWithLogits"),s=Gr(t,"logits","sigmoidCrossEntropyWithLogits");ee(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=Rc(s),a=No(s,n),i=Eu(cu(Au(Vo(s))));return wo(Po(r,a),i)}(a,i);return mp(l,o,r)}}),Np=qr({softmaxCrossEntropy_:function(e,t,n,s=0,r=fp.SUM_BY_NONZERO_WEIGHTS){let a=Gr(e,"onehotLabels","softmaxCrossEntropy");const i=Gr(t,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=Gr(n,"weights","softmaxCrossEntropy")),ee(a.shape,i.shape,"Error in softmaxCrossEntropy: "),s>0){const e=_o(s),t=_o(1),n=_o(a.shape[1]);a=wo(No(a,Po(t,e)),vo(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);return Fo(((e,t,s)=>{const r=Gu(t,[n],!0),a=Po(Ua(t,"float32"),r);s([e,a]);const i=Au(No(a,e));return{value:_u(i,[n]),gradFunc:(e,t)=>{const[s,r]=t,a=Bu(e.shape,[n]);return[No(vl(e,a),Po(Ua(s,"float32"),cu(r))),No(vl(e,a),Po(cu(r),Ua(s,"float32")))]}}}))(e,t)}(a,i);return mp(l,o,r)}}),Ip={fft:Jc,ifft:Zc,rfft:th,irfft:Qc},$p={hammingWindow:Vh,hannWindow:Uh,frame:Gh,stft:Hh},Cp={flipLeftRight:qh,resizeNearestNeighbor:up,resizeBilinear:lp,rotateWithOffset:Kh,cropAndResize:jh,nonMaxSuppression:Yh,nonMaxSuppressionAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Gr(e,"boxes","nonMaxSuppressionAsync"),i=Gr(t,"scores","nonMaxSuppressionAsync"),o=Xh(a,i,n,s,r);n=o.maxOutputSize,s=o.iouThreshold,r=o.scoreThreshold;const l=await Promise.all([a.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:h}=Qh(u,c,n,s,r);return a!==e&&a.dispose(),i!==t&&i.dispose(),lh(h,"int32")},nonMaxSuppressionWithScore:ip,nonMaxSuppressionWithScoreAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Gr(e,"boxes","nonMaxSuppressionAsync"),o=Gr(t,"scores","nonMaxSuppressionAsync"),l=Xh(i,o,n,s,r,a);n=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),c=u[0],h=u[1],{selectedIndices:p,selectedScores:d}=tp(c,h,n,s,r,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:lh(p,"int32"),selectedScores:lh(d)}},nonMaxSuppressionPadded:op,nonMaxSuppressionPaddedAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Gr(e,"boxes","nonMaxSuppressionAsync"),o=Gr(t,"scores","nonMaxSuppressionAsync"),l=Xh(i,o,n,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=ep(p,d,u,c,h,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:lh(f,"int32"),validOutputs:_o(m,"int32")}}},Sp={bandPart:cp,gramSchmidt:hp,qr:dp},Tp={absoluteDifference:gp,computeWeightedLoss:mp,cosineDistance:yp,hingeLoss:bp,huberLoss:xp,logLoss:wp,meanSquaredError:kp,sigmoidCrossEntropy:vp,softmaxCrossEntropy:Np};class Ep{static sgd(e){return new Ko(e)}static momentum(e,t,n=!1){return new Xo(e,t,n)}static rmsprop(e,t=.9,n=0,s=null,r=!1){return new Yo(e,t,n,s,r)}static adam(e=.001,t=.9,n=.999,s=null){return new Wo(e,t,n,s)}static adadelta(e=.001,t=.95,n=null){return new Mo(e,t,n)}static adamax(e=.002,t=.9,n=.999,s=null,r=0){return new qo(e,t,n,s,r)}static adagrad(e,t=.1){return new zo(e,t)}}const Ap={sgd:Ep.sgd,momentum:Ep.momentum,adadelta:Ep.adadelta,adagrad:Ep.adagrad,rmsprop:Ep.rmsprop,adamax:Ep.adamax,adam:Ep.adam},Rp="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function Fp(){return new Promise((e=>Rp((()=>e()))))}function Dp(e,t){const n=e[0].length;e.forEach(((e,t)=>{Q(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),Q(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const s=e[0];e.forEach(((e,r)=>{for(let a=0;a<n;a++)Q(a===t||e[a]===s[a],(()=>`Error in concat${n}D: Shape of tensors[${r}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`))}))}function _p(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}const Op=30;function Mp(e){return e<=Op?e:Te(e,Math.floor(Math.sqrt(e)))}function Lp(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function zp(e,t,n,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(e[0]/n),r=r.concat(e.slice(1));else{r=r.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)r=r.concat([e[s+1]/t[s],t[s]]);r=r.concat(e.slice(n+1))}return r}function Bp(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],r=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?r.push(s):n.push(s);s.push(...n),s.push(0),s.push(...r)}return s}function Pp(e,t,n,s=!0){const r=[];s?r.push(e[0]/n):r.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?s?r.push(t[n-1]*e[n]):r.push(e[n]/t[n-1]):r.push(e[n]);return r}function Wp(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function Vp(e,t,n){const s=e.slice(0,1);for(let r=0;r<n;++r)s.push(e[r+1]-t[r][0]-t[r][1]);return s}const Up=1.7580993408473768,Gp=1.0507009873554805,Hp=.3275911,jp=.254829592,qp=-.284496736,Kp=1.421413741,Xp=-1.453152027,Yp=1.061405429;function Jp(...e){Pe().getBool("IS_TEST")||console.warn(...e)}function Zp(...e){Pe().getBool("IS_TEST")||console.log(...e)}function Qp(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function ed(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function td(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function nd(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function sd(e,t){return{real:e[2*t],imag:e[2*t+1]}}function rd(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function ad(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let r=0;r<Math.ceil(e/2);r++){const a=(t?2:-2)*Math.PI*(r/e);n[r]=Math.cos(a),s[r]=Math.sin(a)}return{real:n,imag:s}}function id(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}function od(e,t,n=0){let s=[];if("number"==typeof t)Q(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),s=new Array(t).fill(e.shape[n]/t);else{Q(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const r=t.indexOf(-1);if(-1!==r){const s=t.reduce(((e,t)=>t>0?e+t:e));t[r]=e.shape[n]-s}Q(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),s=t}return s}function ld(e,t){let n,s=!1;for(e<=Op?(n=e,s=!0):n=Te(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=Te(e,n+1);return n}function ud(e,t,n){const s=[],r=e.length;for(let a=0;a<r;a++)a!==t?s.push(e[a]):s.push(n);return s}function cd(e,t,n,s){const r=t.shape.length,a=e.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>a)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${a}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let n=0;n<s;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const i=e.shape[n],o=[];let l=1,u=1,c=1;for(let t=0;t<s;++t)o.push(e.shape[t]),l*=e.shape[t];for(let t=s;t<n;t++)o.push(e.shape[t]),u*=e.shape[t];for(let e=s;e<r;e++)o.push(t.shape[e]);for(let t=n+1;t<a;t++)o.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:o}}function hd(e){try{return e.map((e=>sr(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function pd(e){return e.map((e=>nr(e)))}const dd={kernelName:He,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>No(e,ah(Ua(n,"float32"),-1))}}},fd={kernelName:je,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=$o(Ua(n,"float32")),s=Io(Po(_o(1),t));return Au(vo(e,s))}}}},md={kernelName:qe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Io(Po($o(Ua(n,"float32")),1));return vo(e,t)}}}},gd={kernelName:Ke,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ho(n.shape,s.shape);return{a:()=>{let t=e;const s=Go(n.shape,r);return s.length>0&&(t=_u(t,s)),vl(t,n.shape)},b:()=>{let t=e;const n=Go(s.shape,r);return n.length>0&&(t=_u(t,n)),vl(t,s.shape)}}}},yd={kernelName:Xe,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,s)=>{n[s]=()=>e.clone()})),n}},bd={kernelName:Ze,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Co(n)}}},xd={kernelName:Qe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Co(n)}}},wd={kernelName:et,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>vo(e,Io(Po(_o(1),$o(Ua(n,"float32")))))}}},kd={kernelName:tt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Io(wo(_o(1),$o(Ua(n,"float32"))));return vo(e,t)}}}},vd={kernelName:rt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ho(n.shape,s.shape);return{a:()=>{const t=wo($o(n),$o(s));let a=No(e,vo(s,t));const i=Go(n.shape,r);return i.length>0&&(a=_u(a,i)),vl(a,n.shape)},b:()=>{const t=wo($o(n),$o(s));let a=Au(No(e,vo(n,t)));const i=Go(s.shape,r);return i.length>0&&(a=_u(a,i)),vl(a,s.shape)}}}},Nd={kernelName:nt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>vo(e,wo($o(Ua(n,"float32")),1))}}},Id={kernelName:st,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>vo(e,Po(_o(1),$o(Ua(n,"float32"))))}}},$d=qr({avgPool3dGrad_:function(e,t,n,s,r,a){const i=Gr(e,"dy","avgPool3dGrad"),o=Gr(t,"input","avgPool3dGrad");let l=i,u=o,c=!1;4===o.rank&&(c=!0,l=vl(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),u=vl(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),Q(5===l.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`)),Q(5===u.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`)),null!=a&&Q(ie(r),(()=>`Error in avgPool3dGrad: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`));const h={dy:l,input:u},p={filterSize:n,strides:s,pad:r,dimRoundingMode:a},d=Mr.runKernel(lt,h,p);return c?vl(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),Cd={kernelName:ot,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i,dimRoundingMode:o}=n;return{x:()=>$d(e,s,r,a,i,o)}}},Sd=qr({avgPoolGrad_:function(e,t,n,s,r){const a=Gr(e,"dy","avgPoolGrad"),i=Gr(t,"input","avgPoolGrad");Q(i.rank===a.rank,(()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`));let o=i,l=a,u=!1;3===i.rank&&(u=!0,o=vl(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=vl(a,[1,a.shape[0],a.shape[1],a.shape[2]])),Q(4===l.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),Q(4===o.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`));const c={dy:l,input:o},h={filterSize:n,strides:s,pad:r},p=Mr.runKernel(it,c,h);return u?vl(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Td={kernelName:at,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i}=n;return{x:()=>Sd(e,s,r,a,i)}}},Ed={kernelName:ut,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,r]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>ui(e,r,!1,!1),b:()=>ui(e,s,!0,!1)}:a&&!i?{a:()=>ui(r,e,!1,!0),b:()=>ui(s,e,!1,!1)}:{a:()=>ui(r,e,!0,!0),b:()=>ui(e,s,!0,!0)}:{a:()=>ui(e,r,!1,!0),b:()=>ui(s,e,!0,!1)}}},Ad={kernelName:ct,gradFunc:(e,t,n)=>{const{blockShape:s,crops:r}=n;return{x:()=>gc(e,s,r)}}},Rd={kernelName:pt,gradFunc:(e,t,n)=>{const s=n,r=s.inputShape,a=s.shape,i=Array.from(a);for(let e=r.length-1;e>=0;e--)if(r[e]===a[e])i[e]=1;else if(1!==r[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);const o=[];for(let e=0;e<i.length;e++)i[e]>1&&o.push(e);return{x:()=>_u(e,o,!0)}}},Fd={kernelName:dt,gradFunc:e=>({x:()=>e.clone()})},Dd={kernelName:ft,gradFunc:e=>({x:()=>Co(e)})},_d={kernelName:mt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:r,clipValueMax:a}=n;return{x:()=>au(Hu(bu(s,r),$u(s,a)),e,Co(e))}}},Od={kernelName:yt,inputsToSave:["x"],gradFunc:dd.gradFunc},Md={kernelName:bt,saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map((e=>e.shape)),{axis:r}=n,a=de(r,t[0].shape)[0],i=s.map((e=>e[a]));return eh(e,i,a).map((e=>()=>e))}},Ld={kernelName:xt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{dilations:a,strides:i,pad:o,dataFormat:l}=n;return Q(xl(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>Hl(s.shape,e,r,i,o,l),filter:()=>Fh(s,e,r.shape,i,o,l)}}},zd={kernelName:kt,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>Ul(e,r,a,i,o,1,l),filter:()=>Fh(e,s,r.shape,a,i,o,l)}}},Bd=qr({conv3DBackpropFilter_:function(e,t,n,s,r){let a=e;4===e.rank&&(a=vl(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;4===i.rank&&(i=vl(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),Q(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),Q(5===i.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`)),Q(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),Q(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),Q(i.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`));const o={x:a,dy:i},l={strides:s,pad:r,filterShape:n};return Mr.runKernel(Nt,o,l)}}),Pd={kernelName:vt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a}=n;Q(xl(s),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const[i,o]=t;return{x:()=>Kl(i.shape,e,o,r,a),filter:()=>Bd(i,e,o.shape,r,a)}}},Wd={kernelName:$t,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>No(Au(Gc(Ua(n,"float32"))),e)}}},Vd={kernelName:Ct,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>No(Hc(Ua(n,"float32")),e)}}},Ud={kernelName:St,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r,exclusive:a,reverse:i}=n;return{x:()=>{const t=Wu([r],s.rank);let n=Zl(e,r,a,!i);return null!=t&&(n=hi(n,t)),n}}}},Gd={kernelName:Rt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a,dimRoundingMode:i}=n,o=null==s?[1,1]:s;Q(xl(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[l,u]=t;return Q(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),Q(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),Q(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),Q(wl(r,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${o}'.`)),null!=i&&Q(ie(a),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`)),{x:()=>Bh(l.shape,e,u,r,a,s,i),filter:()=>zh(l,e,u.shape,r,a,s,i)}}},Hd={kernelName:Ot,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,a={x:s,filter:r,dy:e},i={x:s,filter:r,dy:e};return{x:()=>Mr.runKernel(Mt,a,n),filter:()=>Mr.runKernel(Lt,i,n)}}},jd={kernelName:Bt,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,s={dy:e,y:n};return{x:()=>Mr.runKernel(Pt,s)}}},qd={kernelName:Wt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=No(cu(Au($o(n))),2/Math.sqrt(Math.PI));return{x:()=>No(e,s)}}},Kd={kernelName:Ut,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>No(e,n)}}},Xd={kernelName:Gt,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>vl(e,n.shape)}}},Yd={kernelName:Ht,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>No(e,cu(n))}}},Jd={kernelName:Xt,gradFunc:e=>({x:()=>Co(e)})},Zd={kernelName:Yt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ho(n.shape,s.shape);return{a:()=>{const t=vo(e,Ua(s,"float32")),a=Go(n.shape,r);return a.length>0?vl(_u(t,a),n.shape):t},b:()=>{let t=No(e,Ua(n,"float32"));const a=Go(s.shape,r);a.length>0&&(t=vl(_u(t,a),s.shape));const i=$o(s);return Au(vo(t,Ua(i,"float32")))}}}},Qd={kernelName:Jt,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[r,a,i,o]=t,l=null==o?_o(1):o,u=Go(a.shape,r.shape),c=[];if(1===a.rank){for(let e=0;e<r.shape.length-1;++e)c.push(r.shape[e]);c.push(1)}const h=Po(r,a),p=No(e,l),d=Bc(wo(i,_o(s))),f=No(No(No(d,d),d),_o(-.5));return{x:()=>1===a.rank?vl(No(No(e,du(vl(d,[1,1,1,a.shape[0]]),c)),l),r.shape):vl(No(No(e,d),l),r.shape),mean:()=>{let e=No(No(d,_o(-1)),p);return 1===a.rank&&(e=_u(e,u)),vl(e,a.shape)},variance:()=>{let e=No(No(f,h),p);return 1===a.rank&&(e=_u(e,u)),vl(e,a.shape)},scale:()=>{const t=No(h,d);let n=No(e,t);return 1===a.rank&&(n=_u(n,u)),vl(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=_u(t,u)),vl(t,a.shape)}}}},ef={kernelName:Zt,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,r]=t,{axis:a}=n,i=de(a,s.shape)[0];return{x:()=>{const t=s.shape,n=r.size,o=t.slice(0,i),l=o.length,u=t.slice(a,t.length).slice(1),c=u.length,h=tf(0,l),p=tf(l+1,l+1+c),d=nf([o,[n],u]),f=vl(e,d),m=vl(r,[n]),g=nf([[l],h,p]),y=hi(f,g);let b=gh(y,m,s.shape[i]);const x=Vu(g);return b=hi(b,x),b},indices:()=>r}}};function tf(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function nf(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const sf={kernelName:tn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Co(n),b:()=>Co(s)}}},rf={kernelName:nn,gradFunc:e=>({x:()=>Ua(e,"float32")})},af={kernelName:an,gradFunc:e=>({x:()=>Co(e)})},of={kernelName:on,gradFunc:e=>({x:()=>Co(e)})},lf={kernelName:ln,gradFunc:e=>({x:()=>Co(e)})},uf={kernelName:un,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:r}=n,a=yu(s,0);return{x:()=>au(a,e,No(e,r))}}},cf={kernelName:fn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>vo(e,wo(n,1))}}},hf={kernelName:dn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>vo(e,Ua(n,"float32"))}}},pf={kernelName:bn,inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;return{logits:()=>{const t=cu(s);return Po(e,No(_u(e,r,!0),t))}}}},df=qr({localResponseNormalizationBackprop_:function(e,t,n,s=5,r=1,a=1,i=.5){const o={x:e,y:t,dy:n},l={depthRadius:s,bias:r,alpha:a,beta:i};return Mr.runKernel(wn,o,l)}}),ff={kernelName:xn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{depthRadius:a,bias:i,alpha:o,beta:l}=n;return{x:()=>df(s,r,e,a,i,o,l)}}};function mf(e,t,n,s){return t.rank<n.rank&&(t=vl(t,Bu(t.shape,s))),e.rank<n.rank&&(e=vl(e,Bu(e.shape,s))),{x:()=>No(e,Ua(ru(n,t),e.dtype))}}const gf={kernelName:kn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:r}=s,a=t[0],i=mf(e,t[1],a,de(r,a.shape));return{x:()=>i.x()}}},yf={kernelName:vn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>No(e,Ua(bu(n,s),"float32")),b:()=>No(e,Ua(Iu(n,s),"float32"))}}},bf=qr({maxPool3dGrad_:function(e,t,n,s,r,a,i){const o=Gr(e,"dy","maxPool3dGrad"),l=Gr(t,"input","maxPool3dGrad"),u=Gr(n,"output","maxPool3dGrad");let c=o,h=l,p=u,d=!1;4===l.rank&&(d=!0,c=vl(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),h=vl(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=vl(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),Q(5===c.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),Q(5===h.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`)),Q(5===p.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${p.rank}.`)),null!=i&&Q(ie(a),(()=>`Error in maxPool3dGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const f={dy:c,input:h,output:p},m={filterSize:s,strides:r,pad:a,dimRoundingMode:i},g=Mr.runKernel(Cn,f,m);return d?vl(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),xf={kernelName:$n,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=n;return{x:()=>bf(e,s,r,a,i,o,l)}}},wf=qr({maxPoolGrad_:function(e,t,n,s,r,a,i){const o=Gr(e,"dy","maxPoolGrad"),l=Gr(t,"input","maxPoolGrad"),u=Gr(n,"output","maxPoolGrad");Q(l.rank===o.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`)),Q(4===o.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`)),Q(4===l.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`)),null!=i&&Q(ie(a),(()=>`Error in maxPoolGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const c={dy:o,input:l,output:u},h={filterSize:s,strides:r,pad:a,dimRoundingMode:i};return Mr.runKernel(In,c,h)}}),kf={kernelName:Un,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>Sl(e,a,s.shape)}}},vf={kernelName:bs,gradFunc:(e,t,n)=>{const{blockShape:s,paddings:r}=n;return{x:()=>Al(e,s,r)}}},Nf={kernelName:xs,gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>$l(e,s)}}},If=[dd,fd,md,gd,yd,bd,xd,wd,kd,vd,Nd,Id,Cd,Td,Ed,Ad,Rd,Fd,Dd,_d,Od,Md,zd,Ld,Pd,Wd,Vd,Ud,Gd,Hd,{kernelName:zt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ho(n.shape,s.shape);return{a:()=>{const t=vo(e,Ua(s,"float32")),a=Go(n.shape,r);return a.length>0?vl(_u(t,a),n.shape):t},b:()=>{let t=No(e,Ua(n,"float32"));const a=Go(s.shape,r);a.length>0&&(t=vl(_u(t,a),s.shape));const i=$o(s);return Au(vo(t,Ua(i,"float32")))}}}},jd,qd,Kd,Xd,Yd,Zd,Jd,Qd,ef,sf,rf,af,of,lf,uf,cf,hf,pf,ff,gf,gf,yf,xf,{kernelName:Nn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>wf(e,s,r,a,i,o)}}},{kernelName:Tn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n,a=de(r,s.shape),i=se(zu(s.shape,a)[1]);return{x:()=>{const t=s.shape.slice();a.forEach((e=>{t[e]=1}));const n=vl(e,t);return vo(No(n,lc(s.shape,"float32")),i)}}}},{kernelName:En,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:r}=s,[a,i]=t,o=mf(e,i,a,de(r,a.shape));return{x:()=>o.x()}}},{kernelName:An,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>No(e,Ua($u(n,s),"float32")),b:()=>No(e,Ua(yu(n,s),"float32"))}}},{kernelName:Rn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>Sl(e,a,s.shape)}}},{kernelName:Fn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ho(n.shape,s.shape);return{a:()=>{const t=Go(n.shape,r);return t.length>0?vl(_u(e,t),n.shape):e},b:()=>{const t=No(e,Au(mu(vo(n,s)))),a=Go(s.shape,r);return a.length>0?vl(_u(t,a),s.shape):t}}}},{kernelName:_n,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ho(n.shape,s.shape);return{a:()=>{const t=No(e,Ua(s,"float32")),a=Go(n.shape,r);return a.length>0?vl(_u(t,a),n.shape):t},b:()=>{const t=No(e,Ua(n,"float32")),a=Go(s.shape,r);return a.length>0?vl(_u(t,a),s.shape):t}}}},{kernelName:On,gradFunc:e=>({x:()=>Au(e)})},{kernelName:Wn,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>oc(n.shape,"float32")}}},{kernelName:Pn,gradFunc:e=>({x:()=>Co(e)})},{kernelName:Vn,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return yh(e,s).map((e=>()=>e))}},kf,kf,{kernelName:Hn,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,s,r]=t,a=n,i=s,o=Ho(a.shape,i.shape);return{a:()=>{const t=Ua(i,"float32");let n=No(e,No(t,Bo(a,Po(t,_o(1)))));const s=Go(a.shape,o);return s.length>0&&(n=_u(n,s)),vl(n,a.shape)},b:()=>{const t=yu(a,0),n=au(t,Tu(a),Co(a));let s=No(e,No(r,n));const l=Go(i.shape,o);return l.length>0&&(s=_u(s,l)),vl(s,i.shape)}}}},{kernelName:jn,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,r=yu(n,0);return{x:()=>au(r,e,No(e,s)),alpha:()=>{let t=au(r,Co(e),No(e,n));const a=Go(s.shape,e.shape);return a.length>0&&(t=_u(t,a)),vl(t,s.shape)}}}},{kernelName:Yn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>vo(e,Au($o(n)))}}},{kernelName:ss,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=No($u(n,6),ah(n));return{x:()=>No(e,Ua(s,"float32"))}}},{kernelName:Jn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>No(e,Ua(ah(n),"float32"))}}},{kernelName:Zn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>vl(e,n.shape)}}},{kernelName:ts,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Mr.runKernel(ns,r,n)}}},{kernelName:Qn,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Mr.runKernel(es,r,n)}}},{kernelName:rs,gradFunc:(e,t,n)=>{const{dims:s}=n,r=de(s,e.shape);return{x:()=>Dc(e,r)}}},{kernelName:as,gradFunc:e=>({x:()=>Co(e)})},{kernelName:is,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Au(vo(e,No(Bo(n,1.5),2)))}}},{kernelName:ls,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>Ua(Co(n),"float32"),t:()=>No(e,Ua(n,e.dtype)),e:()=>No(e,Ua(ju(n),e.dtype))}}},{kernelName:us,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=yu(n,_o(0)),s=_o(Up),r=_o(Gp),a=No(e,r),i=No(No(e,s),cu(Ua(n,"float32")));return au(t,a,i)}}}},{kernelName:fs,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>No(e,No(n,Po(_o(1),n)))}}},{kernelName:ds,gradFunc:e=>({x:()=>Co(e)})},{kernelName:hs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>No(Yl(Ua(n,"float32")),e)}}},{kernelName:ps,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>No(Jl(Ua(n,"float32")),e)}}},{kernelName:cs,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:r,size:a}=n,i=s.shape,[o,l]=Oi(s,r,a),u=[];for(let t=0;t<e.rank;t++)u.push([o[t],i[t]-o[t]-l[t]]);return{x:()=>hc(e,u)}}},{kernelName:ws,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:r}=n,a=No(e,s);return{logits:()=>Po(a,No(_u(a,[r],!0),s))}}},{kernelName:ms,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>No(e,Cl(n))}}},vf,vf,Nf,Nf,{kernelName:gs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>vo(e,No(Io(Ua(n,"float32")),2))}}},{kernelName:ks,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=_o(2);return{a:()=>No(e,No(r,Po(n,s))),b:()=>No(e,No(r,Po(s,n)))}}},{kernelName:vs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>No(e,No(Ua(n,"float32"),2))}}},{kernelName:Os,gradFunc:e=>({x:()=>Co(e)})},{kernelName:Ns,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ho(n.shape,s.shape);return{a:()=>{let t=e;const s=Go(n.shape,r);return s.length>0&&(t=_u(t,s)),vl(t,n.shape)},b:()=>{let t=e;const n=Go(s.shape,r);return n.length>0&&(t=_u(t,n)),vl(Au(t),s.shape)}}}},{kernelName:ys,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,r=s.shape.slice(),{axis:a}=n;de(a,s.shape).forEach((e=>{r[e]=1}));const i=vl(e,r),o=No(i,lc(s.shape,"float32"));return{x:()=>o}}},{kernelName:Cs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>vo(e,$o(Yl(n)))}}},{kernelName:Ss,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>No(Po(_o(1),$o(n)),e)}}},{kernelName:Ts,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:r}=n;return{x:()=>{let t=Co(s);if(1===s.rank)for(let n=0;n<r[0];++n)t=wo(t,Sl(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)t=wo(t,Sl(e,[n*s.shape[0],a*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)t=wo(t,Sl(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)for(let o=0;o<r[3];++o)t=wo(t,Sl(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},{kernelName:As,gradFunc:(e,t,n)=>{const s=n,{perm:r}=s,a=Vu(r);return{x:()=>hi(e,a)}}},{kernelName:Fs,gradFunc:(e,t,n)=>{const s=n,{axis:r}=s;return{value:()=>rh(e,r)}}},{kernelName:Ds,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=jo(t,Co(t)),s=gu(e,n);let r=bu(t,_o(0,"int32"));const a=s.rank-r.rank;for(let e=0;e<a;++e)r=hu(r,e+1);r=Hu(r,lc(s.shape,"bool"));const i=Co(s);return au(r,s,i)}(e,n)}}},{kernelName:_s,gradFunc:e=>({x:()=>Co(e)})}];for(const e of If)qs(e);let $f;function Cf(){return null==$f&&($f=bo().epsilon()),$f}yr().prototype.abs=function(){return this.throwIfDisposed(),Vo(this)},yr().prototype.acos=function(){return this.throwIfDisposed(),Jo(this)},yr().prototype.acosh=function(){return this.throwIfDisposed(),Zo(this)},yr().prototype.add=function(e){return this.throwIfDisposed(),wo(this,e)},yr().prototype.all=function(e,t){return this.throwIfDisposed(),el(this,e,t)},yr().prototype.any=function(e,t){return this.throwIfDisposed(),tl(this,e,t)},yr().prototype.argMax=function(e){return this.throwIfDisposed(),nl(this,e)},yr().prototype.argMin=function(e){return this.throwIfDisposed(),sl(this,e)},yr().prototype.asScalar=function(){return this.throwIfDisposed(),Q(1===this.size,(()=>"The array must have only 1 element.")),vl(this,[])},yr().prototype.asType=function(e){return this.throwIfDisposed(),Ua(this,e)},yr().prototype.as1D=function(){return this.throwIfDisposed(),vl(this,[this.size])},yr().prototype.as2D=function(e,t){return this.throwIfDisposed(),vl(this,[e,t])},yr().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),vl(this,[e,t,n])},yr().prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),vl(this,[e,t,n,s])},yr().prototype.as5D=function(e,t,n,s,r){return this.throwIfDisposed(),vl(this,[e,t,n,s,r])},yr().prototype.asin=function(){return this.throwIfDisposed(),rl(this)},yr().prototype.asinh=function(){return this.throwIfDisposed(),al(this)},yr().prototype.atan=function(){return this.throwIfDisposed(),il(this)},yr().prototype.atan2=function(e){return this.throwIfDisposed(),ol(this,e)},yr().prototype.atanh=function(){return this.throwIfDisposed(),ll(this)},yr().prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),Nl(this,e,t,n,s)},yr().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),Al(this,e,t)},yr().prototype.batchNorm=function(e,t,n,s,r){return this.throwIfDisposed(),Rl(this,e,t,n,s,r)},yr().prototype.broadcastTo=function(e){return this.throwIfDisposed(),Ml(this,e)},yr().prototype.cast=function(e){return this.throwIfDisposed(),Ua(this,e)},yr().prototype.ceil=function(){return this.throwIfDisposed(),Ll(this)},yr().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),zl(this,e,t)},yr().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof gr&&(e=[e]),$l([this,...e],t)},yr().prototype.conv1d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Gl(this,e,t,n,s,r,a)},yr().prototype.conv2dTranspose=function(e,t,n,s,r){return this.throwIfDisposed(),jl(this,e,t,n,s,r)},yr().prototype.conv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Ul(this,e,t,n,s,r,a)},yr().prototype.cos=function(){return this.throwIfDisposed(),Yl(this)},yr().prototype.cosh=function(){return this.throwIfDisposed(),Jl(this)},yr().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),Zl(this,e,t,n)},yr().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),eu(this,e,t)},yr().prototype.depthwiseConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),tu(this,e,t,n,s,r,a)},yr().prototype.dilation2d=function(e,t,n,s,r){return this.throwIfDisposed(),su(this,e,t,n,s,r)},yr().prototype.divNoNan=function(e){return this.throwIfDisposed(),iu(this,e)},yr().prototype.div=function(e){return this.throwIfDisposed(),vo(this,e)},yr().prototype.dot=function(e){return this.throwIfDisposed(),ou(this,e)},yr().prototype.elu=function(){return this.throwIfDisposed(),lu(this)},yr().prototype.equal=function(e){return this.throwIfDisposed(),ru(this,e)},yr().prototype.erf=function(){return this.throwIfDisposed(),uu(this)},yr().prototype.exp=function(){return this.throwIfDisposed(),cu(this)},yr().prototype.expandDims=function(e){return this.throwIfDisposed(),hu(this,e)},yr().prototype.expm1=function(){return this.throwIfDisposed(),pu(this)},yr().prototype.fft=function(){return this.throwIfDisposed(),Jc(this)},yr().prototype.flatten=function(){return this.throwIfDisposed(),vl(this,[this.size])},yr().prototype.floor=function(){return this.throwIfDisposed(),mu(this)},yr().prototype.floorDiv=function(e){return this.throwIfDisposed(),ko(this,e)},yr().prototype.gather=function(e,t){return this.throwIfDisposed(),gu(this,e,t)},yr().prototype.greaterEqual=function(e){return this.throwIfDisposed(),bu(this,e)},yr().prototype.greater=function(e){return this.throwIfDisposed(),yu(this,e)},yr().prototype.ifft=function(){return this.throwIfDisposed(),Zc(this)},yr().prototype.irfft=function(){return this.throwIfDisposed(),Qc(this)},yr().prototype.isFinite=function(){return this.throwIfDisposed(),wu(this)},yr().prototype.isInf=function(){return this.throwIfDisposed(),ku(this)},yr().prototype.isNaN=function(){return this.throwIfDisposed(),vu(this)},yr().prototype.leakyRelu=function(e){return this.throwIfDisposed(),Nu(this,e)},yr().prototype.lessEqual=function(e){return this.throwIfDisposed(),$u(this,e)},yr().prototype.less=function(e){return this.throwIfDisposed(),Iu(this,e)},yr().prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),Su(this,e,t,n,s)},yr().prototype.logSigmoid=function(){return this.throwIfDisposed(),Fu(this)},yr().prototype.logSoftmax=function(e){return this.throwIfDisposed(),Ou(this,e)},yr().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),Gu(this,e,t)},yr().prototype.log=function(){return this.throwIfDisposed(),Tu(this)},yr().prototype.log1p=function(){return this.throwIfDisposed(),Eu(this)},yr().prototype.logicalAnd=function(e){return this.throwIfDisposed(),Hu(this,e)},yr().prototype.logicalNot=function(){return this.throwIfDisposed(),ju(this)},yr().prototype.logicalOr=function(e){return this.throwIfDisposed(),qu(this,e)},yr().prototype.logicalXor=function(e){return this.throwIfDisposed(),Ku(this,e)},yr().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),ui(this,e,t,n)},yr().prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),Xu(this,e,t,n,s)},yr().prototype.max=function(e,t){return this.throwIfDisposed(),Du(this,e,t)},yr().prototype.maximum=function(e){return this.throwIfDisposed(),jo(this,e)},yr().prototype.mean=function(e,t){return this.throwIfDisposed(),Zu(this,e,t)},yr().prototype.min=function(e,t){return this.throwIfDisposed(),Qu(this,e,t)},yr().prototype.minimum=function(e){return this.throwIfDisposed(),ec(this,e)},yr().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),tc(this,e,t)},yr().prototype.mod=function(e){return this.throwIfDisposed(),nc(this,e)},yr().prototype.mul=function(e){return this.throwIfDisposed(),No(this,e)},yr().prototype.neg=function(){return this.throwIfDisposed(),Au(this)},yr().prototype.norm=function(e,t,n){return this.throwIfDisposed(),Nh(this,e,t,n)},yr().prototype.notEqual=function(e){return this.throwIfDisposed(),ic(this,e)},yr().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),ci(this,e,t,n)},yr().prototype.onesLike=function(){return this.throwIfDisposed(),uc(this)},yr().prototype.pad=function(e,t){return this.throwIfDisposed(),hc(this,e,t)},yr().prototype.pool=function(e,t,n,s,r){return this.throwIfDisposed(),yc(this,e,t,n,s,r)},yr().prototype.pow=function(e){return this.throwIfDisposed(),Bo(this,e)},yr().prototype.prelu=function(e){return this.throwIfDisposed(),bc(this,e)},yr().prototype.prod=function(e,t){return this.throwIfDisposed(),xc(this,e,t)},yr().prototype.reciprocal=function(){return this.throwIfDisposed(),Ac(this)},yr().prototype.relu=function(){return this.throwIfDisposed(),Rc(this)},yr().prototype.relu6=function(){return this.throwIfDisposed(),Fc(this)},yr().prototype.reshapeAs=function(e){return this.throwIfDisposed(),vl(this,e.shape)},yr().prototype.reshape=function(e){return this.throwIfDisposed(),vl(this,e)},yr().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),lp(this,e,t,n)},yr().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),up(this,e,t,n)},yr().prototype.reverse=function(e){return this.throwIfDisposed(),Dc(this,e)},yr().prototype.rfft=function(){return this.throwIfDisposed(),th(this)},yr().prototype.round=function(){return this.throwIfDisposed(),zc(this)},yr().prototype.rsqrt=function(){return this.throwIfDisposed(),Bc(this)},yr().prototype.selu=function(){return this.throwIfDisposed(),Pc(this)},yr().prototype.separableConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Wc(this,e,t,n,s,r,a)},yr().prototype.sigmoid=function(){return this.throwIfDisposed(),Cl(this)},yr().prototype.sign=function(){return this.throwIfDisposed(),Uc(this)},yr().prototype.sin=function(){return this.throwIfDisposed(),Gc(this)},yr().prototype.sinh=function(){return this.throwIfDisposed(),Hc(this)},yr().prototype.slice=function(e,t){return this.throwIfDisposed(),Sl(this,e,t)},yr().prototype.softmax=function(e){return this.throwIfDisposed(),Yc(this,e)},yr().prototype.softplus=function(){return this.throwIfDisposed(),Ru(this)},yr().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),gc(this,e,t)},yr().prototype.split=function(e,t){return this.throwIfDisposed(),eh(this,e,t)},yr().prototype.sqrt=function(){return this.throwIfDisposed(),Io(this)},yr().prototype.square=function(){return this.throwIfDisposed(),$o(this)},yr().prototype.squaredDifference=function(e){return this.throwIfDisposed(),nh(this,e)},yr().prototype.squeeze=function(e){return this.throwIfDisposed(),sh(this,e)},yr().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof gr?[this,e]:[this,...e];return rh(n,t)},yr().prototype.step=function(e){return this.throwIfDisposed(),ah(this,e)},yr().prototype.stridedSlice=function(e,t,n,s,r,a,i,o){return this.throwIfDisposed(),ih(this,e,t,n,s,r,a,i,o)},yr().prototype.sub=function(e){return this.throwIfDisposed(),Po(this,e)},yr().prototype.sum=function(e,t){return this.throwIfDisposed(),_u(this,e,t)},yr().prototype.tan=function(){return this.throwIfDisposed(),oh(this)},yr().prototype.tanh=function(){return this.throwIfDisposed(),Tl(this)},yr().prototype.tile=function(e){return this.throwIfDisposed(),du(this,e)},yr().prototype.toBool=function(){return this.throwIfDisposed(),Ua(this,"bool")},yr().prototype.toFloat=function(){return this.throwIfDisposed(),Ua(this,"float32")},yr().prototype.toInt=function(){return this.throwIfDisposed(),Ua(this,"int32")},yr().prototype.topk=function(e,t){return this.throwIfDisposed(),dh(this,e,t)},yr().prototype.transpose=function(e){return this.throwIfDisposed(),hi(this,e)},yr().prototype.unique=function(e){return this.throwIfDisposed(),mh(this,e)},yr().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),gh(this,e,t)},yr().prototype.unstack=function(e){return this.throwIfDisposed(),yh(this,e)},yr().prototype.where=function(e,t){return this.throwIfDisposed(),au(e,this,t)},yr().prototype.zerosLike=function(){return this.throwIfDisposed(),Co(this)};class Sf extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Sf.prototype)}}class Tf extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Tf.prototype)}}class Ef extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Ef.prototype)}}class Af extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Af.prototype)}}class Rf extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Rf.prototype)}}function Ff(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function Df(e,t){if(!e)throw new Rf(t)}function _f(e,t){let n=0;for(const s of e)s===t&&n++;return n}function Of(e){return 1===e.length?e[0]:e}function Mf(e){return Array.isArray(e)?e:[e]}function Lf(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function zf(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}Error;let Bf={};function Pf(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function Wf(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>Wf(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?Wf(t):e[n]=t.value)}}}function Vf(e,t={},n={},s="object",r=!1){if("string"==typeof e){const r=e;let a;if(r in n)a=n[r];else if(r in Bf)a=Bf[r];else if(a=t[r],null==a)throw new Ef(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new Ef(`${s}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in Bf?[o,l]=Bf.className:i in t&&([o,l]=t[i]),null==o)throw new Ef(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(Bf))e[t]=Bf[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},Bf);for(const e of Object.keys(n))Bf[e]=n[e];Wf(a.config);const s=l(o,a.config,n,r);return Bf=Object.assign({},t),s}{const e=Object.assign({},Bf);for(const e of Object.keys(n))Bf[e]=n[e];const t=new o(a.config);return Bf=Object.assign({},e),t}}}function Uf(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function Gf(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function Hf(e){if(null==e)throw new Ef(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function jf(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new Ef(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function qf(e,t,n=0,s=1/0){return Df(n>=0),Df(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every((e=>typeof e===t))}function Kf(e,t){Array.isArray(e)?(Q(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>Kf(e,`element ${n+1} of ${t}`)))):Q(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${Xf(e)}.`))}function Xf(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>Xf(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function Yf(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}function Jf(e,t){return io((()=>Io(_u(No(e,e),t,!0))))}class Zf extends Li{getConfig(){return{}}}class Qf extends Zf{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return io((()=>{const t=Jf(e,this.axis),n=zl(t,0,this.maxValue);return No(e,vo(n,wo(Cf(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Qf.className="MaxNorm",Bi(Qf);class em extends Zf{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return io((()=>vo(e,wo(Cf(),Jf(e,this.axis)))))}getConfig(){return{axis:this.axis}}}em.className="UnitNorm",Bi(em);class tm extends Zf{apply(e){return Rc(e)}}tm.className="NonNeg",Bi(tm);class nm extends Zf{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return io((()=>{const t=Jf(e,this.axis),n=wo(No(this.rate,zl(t,this.minValue,this.maxValue)),No(1-this.rate,t));return No(e,vo(n,wo(Cf(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}nm.className="MinMaxNorm",Bi(nm);const sm={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function rm(e){return Pf(e)}function am(e,t={}){return Vf(e,zi.getMap().classNameMap,t,"constraint")}function im(e){return null==e?null:"string"==typeof e?am({className:e in sm?sm[e]:e,config:{}}):e instanceof Zf?e:am(e)}function om(e){return new Qf(e)}function lm(e){return new em(e)}function um(){return new tm}function cm(e){return new nm(e)}const hm=["channelsFirst","channelsLast"],pm=["nearest","bilinear"],dm=["valid","same","causal"],fm=["max","avg"],mm=["sum","mul","concat","ave"],gm=new Map;function ym(e){jf(hm,"DataFormat",e)}function bm(e){jf(dm,"PaddingMode",e)}function xm(e){jf(fm,"PoolMode",e)}const wm=[];function km(e,t){wm.push(e);try{const e=t();return wm.pop(),e}catch(e){throw wm.pop(),e}}function vm(e){if(!$m(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===wm.length?"":wm.join("/")+"/")+e}function Nm(e){if(!$m(e))throw new Error("Not a valid tensor name: '"+e+"'");gm.has(e)||gm.set(e,0);const t=gm.get(e);if(gm.set(e,gm.get(e)+1),t>0){const n=`${e}_${t}`;return gm.set(n,1),n}return e}const Im=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function $m(e){return!!e.match(Im)}function Cm(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let r=t;r<n;++r)s*=e[r];return s}function Sm(e){return lh(e=Array.isArray(e)?new Float32Array(e):e)}function Tm(e){return Qu(Sm(e)).dataSync()[0]}function Em(e){return Du(Sm(e)).dataSync()[0]}function Am(e,t){if(t<e)throw new Ef(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}function Rm(e,t){return e.asType(t)}function Fm(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),e.reshape(n)}function Dm(e,t,n){return io((()=>{switch(e.rank){case 1:return jc(e,t,n);case 2:return qc(e,[t,0],[n,e.shape[1]]);case 3:return Kc(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return Xc(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return Sl(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return Sl(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new Ef(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function _m(e,t,n){return io((()=>{switch(e.rank){case 1:return jc(e,t,n);case 2:return qc(e,[0,t],[e.shape[0],n]);case 3:return Kc(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return Xc(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new Ef(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Om(e,t,n,s){return io((()=>{switch(e.rank){case 1:return jc(e,t,n);case 2:switch(s){case 1:return Dm(e,t,n);case 2:return _m(e,t,n);default:throw new Ef(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return Dm(e,t,n);case 2:return Kc(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return _m(e,t,n);default:throw new Ef(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return Dm(e,t,n);case 2:return Xc(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return Xc(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return _m(e,t,n);default:throw new Ef(`The axis is not within the rank of the tensor ${s}`)}default:throw new Ef(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Mm(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),$l(e,t)}function Lm(e,t){switch(e.rank){case 1:return Bl([e,t]);case 2:return Pl([e,t],0);case 3:return Wl([e,t],0);case 4:return Vl([e,t],0);default:throw new Ef(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function zm(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new Ef(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return du(e,t)}function Bm(e,t=0,n=1,s,r){return Cc(e,t,n,s,r)}function Pm(e,t,n,s){if(e.rank<2||t.rank<2)throw new Af(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3&&e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new Af(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`);if(2===e.rank&&2===t.rank)return Wh({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?Um(e.rank,s,"channelsLast"):null,activation:n});{const r=e.shape.slice(),a=r.pop();e=e.reshape([-1,a]);const i=t.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=t.transpose(c).reshape([l,-1]);const h=[...r,...u];return Wh({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?Um(e.rank,s,"channelsLast"):null,activation:n}).reshape(h)}}function Wm(e,t,n){return io((()=>(t=Array.isArray(t)?lh(t,"int32"):t.toInt(),gu(e,t,n))))}function Vm(e){return No(e,e)}function Um(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new Ef(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1,1,1]):t.reshape([1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,1,1,s[0]]):t.reshape([1].concat(s))}else if(4===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1,1]):t.reshape([1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,1,s[0]]):t.reshape([1].concat(s))}else if(3===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1]):t.reshape([1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,s[0]]):t.reshape([1].concat(s))}else if(e<3)return t;throw new Ef(`Unsupported input rank by biasAdd: ${t.rank}`)}function Gm(e,t,n){return io((()=>(null==n&&(n="channelsLast"),ym(n),e.add(Um(e.rank,t,n)))))}function Hm(e,t,n,s){return io((()=>Th(e,t,n,s)))}function jm(e,t,n=!1){return n?e():t()}const qm=["fanIn","fanOut","fanAvg"],Km=["normal","uniform","truncatedNormal"];class Xm extends Li{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Ym extends Xm{apply(e,t){return oc(e,t)}}Ym.className="Zeros",Bi(Ym);class Jm extends Xm{apply(e,t){return lc(e,t)}}Jm.className="Ones",Bi(Jm);class Zm extends Xm{constructor(e){if(super(),"object"!=typeof e)throw new Ef(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new Ef(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return io((()=>No(_o(this.value),lc(e,t))))}getConfig(){return{value:this.value}}}Zm.className="Constant",Bi(Zm);class Qm extends Xm{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return Sc(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Qm.className="RandomUniform",Bi(Qm);class eg extends Xm{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Af(`randomNormal does not support dType ${t}.`);return Bm(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}eg.className="RandomNormal",Bi(eg);class tg extends Xm{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Af(`truncatedNormal does not support dType ${t}.`);return fh(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}tg.className="TruncatedNormal",Bi(tg);class ng extends Xm{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return io((()=>{if(2!==e.length||e[0]!==e[1])throw new Ef("Identity matrix initializer can only be used for 2D square matrices.");return No(this.gain,fu(e[0]))}))}getConfig(){return{gain:this.gain}}}ng.className="Identity",Bi(ng);class sg extends Xm{constructor(e){if(super(),e.scale<0)throw new Ef(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,jf(qm,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){jf(Km,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,s;if(ym(t),2===e.length)n=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=Cm(e,2);n=e[1]*t,s=e[0]*t}else if("channelsLast"===t){const t=Cm(e,0,e.length-2);n=e[e.length-2]*t,s=e[e.length-1]*t}}else{const t=Cm(e);n=Math.sqrt(t),s=Math.sqrt(t)}return[n,s]}(e),s=n[0],r=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,s):"fanOut"===this.mode?a/=Math.max(1,r):a/=Math.max(1,(s+r)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Af(`${this.getClassName()} does not support dType ${t}.`);return fh(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return Sc(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}sg.className="VarianceScaling",Bi(sg);class rg extends sg{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return sg.className}}rg.className="GlorotUniform",Bi(rg);class ag extends sg{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return sg.className}}ag.className="GlorotNormal",Bi(ag);class ig extends sg{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return sg.className}}ig.className="HeNormal",Bi(ig);class og extends sg{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return sg.className}}og.className="HeUniform",Bi(og);class lg extends sg{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return sg.className}}lg.className="LeCunNormal",Bi(lg);class ug extends sg{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return sg.className}}ug.className="LeCunNormal",Bi(ug);class cg extends Xm{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new Af("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return io((()=>{if(e.length<2)throw new Af("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=Bm(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=Sp.gramSchmidt(t);return e[0]>e[1]&&(n=n.transpose()),No(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}cg.className="Orthogonal",Bi(cg);const hg={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function pg(e,t={}){return Vf(e,zi.getMap().classNameMap,t,"initializer")}function dg(e){return Pf(e)}function fg(e){if("string"==typeof e){const t=e in hg?hg[e]:e;if("GlorotNormal"===t)return new ag;if("GlorotUniform"===t)return new rg;if("HeNormal"===t)return new ig;if("HeUniform"===t)return new og;if("LeCunNormal"===t)return new lg;if("LeCunUniform"===t)return new ug;{const e={};return e.className=t,e.config={},pg(e)}}return e instanceof Xm?e:pg(e)}function mg(){return new Ym}function gg(){return new Jm}function yg(e){return new Zm(e)}function bg(e){return new Qm(e)}function xg(e){return new eg(e)}function wg(e){return new tg(e)}function kg(e){return new ng(e)}function vg(e){return new sg(e)}function Ng(e){return new rg(e)}function Ig(e){return new ag(e)}function $g(e){return new ig(e)}function Cg(e){return new og(e)}function Sg(e){return new lg(e)}function Tg(e){return new ug(e)}function Eg(e){return new cg(e)}let Ag=0;function Rg(){return Ag++}const Fg={};function Dg(e=""){return e in Fg||(Fg[e]=0),Fg[e]+=1,e+Fg[e].toString()}function _g(e){return Array.isArray(e)&&Array.isArray(e[0])}function Og(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function Mg(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new Ef(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function Lg(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return(e=e)[0];throw new Ef(`Expected exactly 1 Shape; got ${e.length}`)}return e}function zg(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}class Bg{constructor(e,t="float32",n="Variable",s=!0,r=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=Rg(),n=null==n?"Variable":n,this.originalName=vm(n),this.name=Nm(this.originalName),this.trainable_=s,this.constraint=r,this.val=bh(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function Pg(e){return e.map((e=>e.read()))}function Wg(e){e.forEach((e=>{e[0].write(e[1])}))}class Vg{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class Ug{constructor(e,t,n,s,r,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=r,this.outputTensorIndex=i,this.id=Rg(),null!=a&&(this.originalName=vm(a),this.name=Nm(this.originalName)),this.rank=t.length}}let Gg=0;class Hg{constructor(e,t){this.callArgs=t,this.id=Gg++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let jg=0;class qg extends Li{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=jg++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=Lf(e)+"_"+Dg(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new Tf(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new Ef(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return Of(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return Of(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Sf(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new Sf(`Layer ${this.name} is not connected, no input to return.`);return Of(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Sf(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Sf(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Of(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=Mf(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=Mf(this.inputSpec);if(e.length!==t.length)throw new Ef(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const s=e[n],r=t[n];if(null==r)continue;const a=s.rank;if(null!=r.ndim&&a!==r.ndim)throw new Ef(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${a}`);if(null!=r.maxNDim&&a>r.maxNDim)throw new Ef(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${a}`);if(null!=r.minNDim&&a<r.minNDim)throw new Ef(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${a}.`);if(null!=r.dtype&&s.dtype!==r.dtype)throw new Ef(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${s.dtype}.`);if(r.axes){const e=s.shape;for(const t in r.axes){const s=Number(t),a=r.axes[t],i=s>=0?e[s]:e[e.length+s];if(null!=a&&-1===[a,null].indexOf(i))throw new Ef(`Input ${n} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=r.shape)for(let e=0;e<r.shape.length;++e){const t=r.shape[e],a=s.shape[e];if(null!=t&&null!=a&&t!==a)throw new Ef(`Input ${n} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${s.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=Mf(e);let s=!0;for(const e of n)if(!(e instanceof Ug)){s=!1;break}let r=!0;for(const e of n)if(e instanceof Ug){r=!1;break}if(s===r)throw new Ef("Arguments to apply() must be all SymbolicTensors or all Tensors");return km(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of Mf(e))t.push(n.shape);this.build(Of(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&r&&(this._refCount=1)}if(this.assertInputCompatibility(e),r){let s=this.call(e,t);const r=Mf(s),a=[];for(let e of r)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(s=Of(a),null!=this.activityRegularizer)throw new Af("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=Mf(e);const t=[];for(const n of e)t.push(n.shape);return Of(t)}(e),s=this.computeOutputShape(n);let r;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),r=null!=s&&s.length>0&&Array.isArray(s[0])?s.map(((n,s)=>new Ug(a,n,this,Mf(e),t,this.name,s))):new Ug(a,s,this,Mf(e),t,this.name),this.addInboundNode(e,r,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new Af("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Sf(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new Sf(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Tf(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return zg(this.weights)}build(e){this.built=!0}getWeights(e=!1){return Pg(e?this.trainableWeights:this.weights)}setWeights(e){io((()=>{const t=this.weights;if(t.length!==e.length)throw new Ef(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=Pg(t);for(let r=0;r<s.length;++r){const a=s[r],i=t[r],o=e[r];if(!ae(a.shape,o.shape))throw new Ef(`Layer weight shape ${a.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}Wg(n)}))}addWeight(e,t,n,s,r,a,i){if(-1!==this._addedWeightNames.indexOf(e))throw new Ef(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=fg("zeros"));const o=s.apply(t,n),l=new Bg(o,n,e,a,i);return o.dispose(),null!=r&&this.addLoss((()=>r.apply(l.read()))),null==a&&(a=!0),a?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=Mf(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,s,r,a,i=null){const o=Mf(e);t=Mf(t),n=Mf(n),s=Mf(s),r=Og(r),a=Og(a);const l=[],u=[],c=[];for(const e of o)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new Hg({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:r,outputShapes:a},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function Kg(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=Kg(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class Xg extends qg{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:Dg("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new Ef("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new Ef("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new Ef("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new Ug(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new Hg({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new Ef(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function Yg(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new Ef("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new Xg({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}async function Jg(e){if(null==e)return;const t=[],n=[],s=[];for(const r in e){const a=e[r];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(r),s.push(e)}}if(t.length>0){const r=await Promise.all(t);for(let t=0;t<r.length;++t)e[n[t]]=r[t][0];oo(s)}}function Zg(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var Qg;Xg.className="InputLayer",Bi(Xg),function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(Qg||(Qg={}));class ey{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class ty{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class ny extends ey{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const s=t[e];if("number"==typeof s)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+s*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const r=io((()=>wo(this.totals[e],No(s,n))));this.totals[e]=r,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:io((()=>{const n=No(vo(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),lo(t[e])})))}}class sy extends ey{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const r=this.history[s];for(let a=0;a<r.length;++a)if("number"!=typeof r[a]){const i=r[a];e.push(i.data()),t.push(s),n.push(a)}}const s=await Promise.all(e);for(let e=0;e<s.length;++e)this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=s[e][0]}}class ry extends ey{constructor(e,t){if(super(),this.currentEpoch=0,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");$e(this.yieldEvery)&&(this.maybeWait=function(e,t){let n,s=er();return(...r)=>{const a=er();return a-s<t||(s=a,n=e(...r)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const s=[];null!=this.yield&&(await Jg(n),s.push(this.yield(e,t,n))),s.push(Fp()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await Jg(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await Jg(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(Fp()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await Jg(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await Jg(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(Fp()):$e(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await Jg(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await Jg(e),await this.trainEnd(e))}}function ay(e,t){return null==e&&(e={}),e instanceof ey?[e]:Array.isArray(e)&&e[0]instanceof ey?e:Mf(e).map((e=>new ry(e,t)))}class iy{constructor(){}static registerCallbackConstructor(e,t){Q(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),iy.checkForDuplicate(t),null==iy.constructors[e]&&(iy.constructors[e]=[]),iy.constructors[e].push(t)}static checkForDuplicate(e){for(const t in iy.constructors)iy.constructors[+t].forEach((t=>{if(t===e)throw new Ef("Duplicate callback constructor.")}))}static clear(){iy.constructors={}}static createCallbacks(e){const t=[];for(const n in iy.constructors){const s=+n;e>=s&&t.push(...iy.constructors[s])}return t.map((e=>new e))}}function oy(e,t,n,s,r,a,i,o,l){const u=new sy,c=[new ny,...iy.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new ty(c);return h.setParams({epochs:n,initialEpoch:s,samples:r,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:h,history:u}}function ly(e,t={},n=!1){return Vf(e,zi.getMap().classNameMap,t,"layer",n)}function uy(e,t){return io((()=>{"float32"!==e.dtype&&(e=e.asType("float32"));const n=_u(Vm(e),t,!0),s=Lo(n.shape,Cf()),r=Io(jo(n,s));return vo(e,r)}))}function cy(e,t){return io((()=>Zu(Vm(Po(t,e)),-1)))}function hy(e,t){return io((()=>Zu(Vo(Po(t,e)),-1)))}function py(e,t){return io((()=>{const n=Po(e,t),s=zl(Vo(e),Cf(),Number.MAX_VALUE),r=Vo(vo(n,s));return No(100,Zu(r,-1))}))}function dy(e,t,n=!1){return io((()=>{if(n)t=Yc(t);else{const e=_u(t,t.shape.length-1,!0);t=vo(t,e)}return t=zl(t,Cf(),1-Cf()),Au(_u(No(e.toFloat(),Tu(t)),t.shape.length-1))}))}function fy(e,t,n=!1){return io((()=>{const s=mu(function(e){const t=[Cm(e.shape)];return e.reshape(t)}(e)).toInt(),r=(t=zl(t,Cf(),1-Cf())).shape;return dy(ci(s,r[r.length-1]).reshape(r),t,n)}))}function my(e,t){return io((()=>{let n;return n=zl(t,Cf(),1-Cf()),n=Tu(vo(n,Po(1,n))),Zu(function(e,t){if(!ae(e.shape,t.shape))throw new Ef(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return io((()=>{const n=t.relu(),s=t.abs().neg();return n.sub(t.mul(e)).add(s.exp().log1p())}))}(e,n),-1)}))}function gy(e,t){return io((()=>{const n=uy(e,-1),s=uy(t,-1),r=No(n,s);return Au(_u(r,-1))}))}iy.constructors={};const yy={meanSquaredError:cy,meanAbsoluteError:hy,meanAbsolutePercentageError:py,meanSquaredLogarithmicError:function(e,t){return io((()=>{const n=zl(t,Cf(),Number.MAX_VALUE),s=Tu(wo(1,n)),r=zl(e,Cf(),Number.MAX_VALUE),a=Tu(wo(1,r));return Zu(Vm(Po(s,a)),-1)}))},squaredHinge:function(e,t){return io((()=>{const n=jo(0,Po(1,No(e,t)));return Zu(Vm(n),-1)}))},hinge:function(e,t){return io((()=>{const n=jo(0,Po(1,No(e,t)));return Zu(n,-1)}))},categoricalHinge:function(e,t){return io((()=>{const n=_u(No(e,t),-1),s=Du(No(Po(1,e),t),-1);return jo(0,wo(1,Po(s,n)))}))},logcosh:function(e,t){return io((()=>{const n=Math.log(2),s=Po(t,e),r=Po(wo(s,Ru(No(-2,s))),n);return Zu(r,-1)}))},categoricalCrossentropy:dy,sparseCategoricalCrossentropy:fy,binaryCrossentropy:my,kullbackLeiblerDivergence:function(e,t){return io((()=>{const n=zl(e,Cf(),1),s=zl(t,Cf(),1);return _u(No(e,Tu(vo(n,s))),-1)}))},poisson:function(e,t){return io((()=>{const n=Tu(wo(Cf(),t));return Zu(Po(t,No(e,n)),-1)}))},cosineProximity:gy};function by(e){if("string"==typeof e){if(e in yy)return yy[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new Ef(t)}return e}function xy(e,t){return io((()=>{const n=No(.5,uc(t)),s=Rm(yu(t,n),e.dtype);return Zu(ru(e,s),-1)}))}function wy(e,t){return io((()=>Rm(ru(nl(e,-1),nl(t,-1)),"float32")))}function ky(e,t){return io((()=>Hu(e.equal(1),t.equal(1)).sum().cast("float32")))}function vy(e,t){return io((()=>{const n=ky(e,t),s=function(e,t){return io((()=>Hu(e.equal(0),t.equal(1)).sum().cast("float32")))}(e,t),r=n.add(s);return au(yu(r,0),n.div(r),0).cast("float32")}))}function Ny(e,t){return my(e,t)}function Iy(e,t){return e.rank===t.rank&&(e=e.squeeze([e.rank-1])),(t=t.argMax(-1)).dtype!==e.dtype&&(t=t.asType(e.dtype)),ru(e,t).asType("float32")}const $y=dy,Cy=fy,Sy={binaryAccuracy:xy,categoricalAccuracy:wy,precision:vy,categoricalCrossentropy:$y,sparseCategoricalCrossentropy:Cy,mse:cy,MSE:cy,mae:hy,MAE:hy,mape:py,MAPE:py,cosine:gy};function Ty(e){if("string"==typeof e&&e in Sy)return Sy[e];if("string"!=typeof e&&null!=e)return e;throw new Ef(`Unknown metric ${e}`)}function Ey(e){if(Df(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(yy))if(yy[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(Sy))if(Sy[n]===e){t=n;break}return void 0!==t?t:e.name}}function Ay(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!Ry(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Ry(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!Ry(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!Ry(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function Fy(e,t,n=console.log){let s="";for(let n=0;n<e.length;++n)n>0&&(s=s.slice(0,s.length-1)+" "),s+=e[n],s=s.slice(0,t[n]),s+=" ".repeat(t[n]-s.length);n(s)}function Dy(e,t,n){let s;try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}Fy([`${e.name} (${e.getClassName()})`,s,e.countParams().toString()],t,n)}function _y(e,t,n,s){let r;try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}const a=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,s=t.nodeIndices[e],r=t.tensorIndices[e];a.push(`${n}[${s}][${r}]`)}const i=e.name,o=e.getClassName(),l=0===a.length?"":a[0];Fy([`${i} (${o})`,r,e.countParams().toString(),l],t,s);for(let e=1;e<a.length;++e)Fy(["","","",a[e]],t,s)}function Oy(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function My(e,t){if(null===e)return null;if("string"==typeof e)return zf(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];Oy(t,r,s)?n.push(s):n.push(My(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=zf(n);t[e]=My(s,e)}}return t}}function Ly(e,t){if(null==e)return null;if("string"==typeof e)return Lf(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];Oy(t,r,s)?n.push(s):n.push(Ly(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];t[Lf(n)]="name"!==n&&"className"!==n||"string"!=typeof s?Ly(s,n):s}return t}}const zy="3.1.0";class By{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof By)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new Ef(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return Ua(t,e.dtype)}catch(n){throw new Ef(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof Ug){if(null==this.id2Value[e.id])throw new Ef(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new Ef(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof Ug){if(null==this.id2Value[e.id])throw new Ef(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new Ef(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&oo(this.id2Mask)}}const Py={},Wy={};function Vy(e,t,n,s){const r=null!=n&&n.training,a=Array.isArray(e),i=a?e:[e],o=i.map((e=>e.name)),l=[],u=t.names();for(const e of o)-1!==u.indexOf(e)?l.push(t.getValue(e)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=o.join(",")+"|"+t.names().join(",");let h,p;if(null==Py[c]){const e=function(e,t){Q(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],s={};if(1===e.length){const r=Gy(e[0],t);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of e){const{sorted:e,recipientMap:i}=Gy(a,t);for(const t of e)r.has(t.name)||(n.push(t),r.add(t.name));for(const e in i)null==s[e]&&(s[e]=new Set),i[e].forEach((t=>s[e].add(t)))}}return{sorted:n,recipientCounts:Uy(s)}}(i,t);h=e.sorted,p=e.recipientCounts,Py[c]=h,Wy[c]=p}h=Py[c],p={},r||Object.assign(p,Wy[c]);const d=new By(t);for(let e=0;e<h.length;++e){if(null!=s){const e=ro().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const a=h[e],i=a.sourceLayer;if(i instanceof Xg)continue;const u=[],c=[],f=[];let m=!1;for(const e of a.inputs){const n=d.getValue(e),s=d.getMask(e);u.push(n),c.push(s),null!=s&&(m=!0),r||(p[e.name]--,0!==p[e.name]||t.hasKey(e)||-1!==o.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=Mf(i.apply(u,n));let y=null;i.supportsMasking&&(y=i.computeMask(u,c));const b=Hy(a),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){d.hasKey(x[e])||d.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=o.indexOf(x[e].name);-1!==t&&(l[t]=g[e])}r||oo(f)}return d.disposeMasks(),a?l:l[0]}function Uy(e){const t={};for(const n in e)t[n]=e[n].size;return t}function Gy(e,t){const n=new Set,s=[],r={};for(const e of t.names())n.add(e);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),s.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==r[t.name]&&(r[t.name]=new Set),r[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:s,recipientMap:r}}function Hy(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}class jy extends qg{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=Dg(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],Gf(this.inputs).length!==this.inputs.length)throw new Ef(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);Gf(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(s)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;Df(0===n,"input layer has >1 nodes"),Df(0===s,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof Xg))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},s={},r={},a={},i=[],o=(e,t,n,s,r,l)=>{null!=s&&null!=r&&null!=l||(s=e.sourceLayer,r=e.nodeIndex,l=e.tensorIndex);const u=s.inboundNodes[r];if(-1!==n.indexOf(u))throw new Tf(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(jy.nodeKey(s,r)),s.id in a||(a[s.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++){const s=u.inputTensors[e],r=u.inboundLayers[e],a=u.nodeIndices[e],i=u.tensorIndices[e];o(s,t,n,r,a,i)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const e of this.outputs)o(e,l,u);const c=i.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];const i=null==s[e.outboundLayer.id]?0:s[e.outboundLayer.id];a=Math.max(a,i),s[e.outboundLayer.id]=a,r[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let s=0;s<e.inboundLayers.length;s++){const r=e.inboundLayers[s],i=e.nodeIndices[s],o=r.inboundNodes[i],l=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(a+1,l),n[o.id]=o}}const h={};for(const e in t){const s=t[e];s in h||(h[s]=[]),h[s].push(n[e])}const p={};for(const e in s){const t=s[e];t in p||(p[t]=[]),p[t].push(r[e])}let d=Object.keys(p).map((e=>parseInt(e,10))).sort(Uf);this.layers=[];for(const e of d){const t=p[e];t.sort(((e,t)=>{const n=a[e.id],s=a[t.id];return n<s?-1:n>s?1:0}));for(const e of t)e instanceof jy&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=p,d=Object.keys(h).map((e=>parseInt(e,10))).sort(Uf);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new Tf(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new Tf(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new Hg({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new Ef("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let s=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new Ef(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,s++}const r=[];for(const s in e){let a=s;if(null==n[s]){const e=s.split("/");a=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[a])r.push([n[a],e[s]]);else if(t)throw new Ef(`Provided weight data has no target variable: ${s}`);delete n[a]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new Ef(`${e.length} of ${s} weights are not set: ${e}`)}Wg(r)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${zy}`,t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=Ly(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return io((()=>{e=Mf(e);const n=new By;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return Vy(this.outputs,n,t)}))}computeMask(e,t){return io((()=>{let n;return e=Mf(e),n=null==t?Ff(null,e.length):Mf(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=Og(e);if(t.length!==this.inputLayers.length)throw new Ef(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const s=this.inputLayers[e],r=t[e];n[s.name+"_0_0"]=r}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(Uf);if(s.length>1)for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const s=[];for(let t=0;t<e.inboundLayers.length;t++){const r=e.inboundLayers[t],a=e.nodeIndices[t],i=e.tensorIndices[t],o=n[`${r.name}_${a}_${i}`];s.push(o)}const r=Og(t.computeOutputShape(Of(s))),a=t.inboundNodes.indexOf(e);for(let e=0;e<r.length;e++)n[`${t.name}_${a}_${e}`]=r[e]}}const r=[],a=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],s=this.outputLayersTensorIndices[e],r=`${t.name}_${n}_${s}`;a.push(r)}for(let e=0;e<a.length;e++){const t=a[e];Df(t in n),r.push(n[t])}return Of(r)}runInternalGraph(e,t){null==t&&(t=Ff(null,e.length));const n={};for(let s=0;s<this.inputs.length;++s){const r=this.inputs[s],a=e[s],i=t[s];n[r.id]=[a,i]}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(Uf);for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,s=e.inputTensors,r=e.outputTensors,a=new Array;for(const e of s)e.id in n&&a.push(n[e.id]);if(a.length===s.length){let s,i,o,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===a.length){const[e,n]=a[0];null==u.mask&&(u.mask=n),o=Mf(t.call(e,u)),l=Mf(t.computeMask(e,n)),s=[e],i=[n]}else s=a.map((e=>e[0])),i=a.map((e=>e[1])),null==u.mask&&(u.mask=i),o=Mf(t.call(s,u)),l=Mf(t.computeMask(s,i));if(t.activityRegularizer)throw new Af("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<r.length;++e){const t=r[e],s=o[e],a=l[e];n[t.id]=[s,a]}}}}const r=[],a=[],i=[];for(const e of this.outputs){Df(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,s]=n[e.id];i.push(t.shape),r.push(t),a.push(s)}return[r,a,i]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof jy?1:0;for(let s=0;s<e.inboundNodes.length;s++){const r=jy.nodeKey(e,s);this.containerNodes.has(r)&&(t[r]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new Ef(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new Ef("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new Ef(`No such layer: ${e}`)}calculateLosses(){return io((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=jy.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const s=e.getClassName(),r=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const s=e.inboundNodes[n],r=jy.nodeKey(e,n);let i={};if(this.containerNodes.has(r)){if(s.callArgs)try{JSON.stringify(s.callArgs),i=s.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${s.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(s.inboundLayers.length>0){const e=[];for(let n=0;n<s.inboundLayers.length;n++){const r=s.inboundLayers[n],a=s.nodeIndices[n],o=s.tensorIndices[n];let l=t[jy.nodeKey(r,a)];null==l&&(l=0),e.push([r.name,l,o,i])}a.push(e)}}}const i={};i.name=e.name,i.className=s,i.config=r,i.inboundNodes=a,n.push(i)}e.layers=n;const s=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],r=this.inputLayersNodeIndices[e],a=jy.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[e];s.push([n.name,i,o])}e.inputLayers=s;const r=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],s=this.outputLayersNodeIndices[e],a=jy.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[e];r.push([n.name,i,o])}return e.outputLayers=r,e}static fromConfig(e,t,n={},s=!1){const r={},a={};function i(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function o(e,t){const n=[];let s;for(const a of t){const o=a[0],l=a[1],u=a[2];if(s=null==a[3]?{}:a[3],!(o in r))return void i(e,t);const c=r[o];if(c.inboundNodes.length<=l)return void i(e,t);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&e.apply(Of(n),s)}function l(e){const n=e.name,a=ly(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(s),r[n]=a,e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new Ef(`Corrupted configuration, expected array for nodeData: ${e}`);i(a,e)}))}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!Hf(a);)for(const e of c){const t=r[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)o(t,n)}}const h=[],p=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],s=e[2];Df(t in r);const a=r[t].inboundNodes[n].outputTensors;h.push(a[s])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],s=e[2];Df(t in r);const a=r[t].inboundNodes[n].outputTensors;p.push(a[s])}return new e({inputs:h,outputs:p,name:u})}get stateful(){if(this._stateful)throw new Ef("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){io((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function qy(e,t){return function(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}(e,t,"classWeight")}async function Ky(e,t,n,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=io((()=>{if(1===e.shape.length)return e.clone();if(2===e.shape.length){if(e.shape[1]>1){const t=1;return e.argMax(t)}if(1===e.shape[1])return e.reshape([e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),s=Array.from(await t.data());oo(t);const r=[];return s.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);r.push(n[e])})),lh(r,"float32")}return null}function Xy(e,t){return No(e,t)}function Yy(e,t){let n,s;const r=t;n=r.xs,s=r.ys,Q(null!=n&&null!=s,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const a=Jy("input",e.inputNames,n),i=Jy("output",e.outputNames,s),o=a[0].shape[0];Q(a.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),Q(i.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<a.length;t++)Q(a[t].shape[0]===o,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));for(let t=0;t<i.length;t++)Q(i[t].shape[0]===o,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${i[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));return{xs:a,ys:i}}function Jy(e,t,n){if(n instanceof gr)return[n];if(Array.isArray(n))return Q(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const s=[];for(const r of t){if(null==n[r])throw new Ef(`The feature data generated by the dataset lacks the required ${e} key '${r}'.`);s.push(n[r])}return s}}function Zy(e){return"function"==typeof e.iterator}function Qy(e){Q(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function eb(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>Dm(e,t,n-t))):Dm(e,t,n-t)}function tb(e,t){return io((()=>null==e?null:Array.isArray(e)?e.map((e=>tb(e,t))):Wm(e,"int32"===t.dtype?t:t.toInt())))}function nb(e,t){const n=[];let s=0,r=null;for(;s<e;)r=s+t,r>=e&&(r=e),n.push([s,r]),s=r;return n}function sb(e){const t=[];e instanceof gr&&(e=[e]);for(let n=0;n<e.length;++n){const s=e[n];if(1===s.rank)t.push(Fm(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function rb(e,t){if(null==e)return;const n=[];if(t instanceof gr)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const s=t[e];n.push(s.id)}const s=[];if(e instanceof gr)-1===n.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&s.push(e)}));else if(null!=e)for(const t in e){const r=e[t];-1===n.indexOf(r.id)&&s.push(r)}s.forEach((e=>{e.isDisposed||e.dispose()}))}function ab(e){return Array.isArray(e)}function ib(e){return!function(e){return e instanceof gr}(e)&&!ab(e)}function ob(e,t,n,s=!0,r=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(ab(e)&&e.length>0)t=!0;else if(ib(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new Ef(`Error when checking model ${r} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let a;if(ib(e)){e=e,a=[];for(const n of t){if(null==e[n])throw new Ef(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(ab(e)){if((e=e).length!==t.length)throw new Ef(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(e=e,t.length>1)throw new Ef(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=sb(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new Ef(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let a=0;a<n[e].length;++a){if(0===a&&!s)continue;const o=i.shape[a],l=n[e][a];if(null!=l&&l>=0&&o!==l)throw new Ef(`Error when checking ${r}: expected ${t[e]} to have shape [${n[e]}], but got array with shape [${i.shape}].`)}}return a}function lb(e,t,n,s=!0,r=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new Ef(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new Ef(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new Ef(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!s)continue;const o=i.shape[a],l=n[e][a];if(null!=l&&l!==o)throw new Ef(`Error when checking ${r}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class ub extends jy{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new Ef("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,n,s=console.log){const r=function(e){let t=!0;const n=[],s=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}s.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const r of n.inboundNodes)if(-1!==s.indexOf(r)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Output shape","Param #"];let i;if(r?(t=t||65,n=n||[.45,.85,1]):(t=t||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!r){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}s("_".repeat(t)),Fy(a,n,s),s("=".repeat(t));const o=e.layers;for(let e=0;e<o.length;++e)r?Dy(o[e],n,s):_y(o[e],n,i,s),s((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;return t=null!=e.collectedTrainableWeights?zg(e.collectedTrainableWeights):zg(e.trainableWeights),t}(e),u=zg(e.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>Ap.adagrad(.01),Adadelta:()=>Ap.adadelta(1,.95,Cf()),Adam:()=>Ap.adam(.001,.9,.999,Cf()),Adamax:()=>Ap.adamax(.002,.9,.999,Cf(),0),RMSProp:()=>Ap.rmsprop(.001,.9,0,Cf()),SGD:()=>Ap.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new Ef(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Oo))throw new Ef("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new Ef(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>by(e)))}else{const n=by(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new Ef(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(by(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],km("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const s=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),r=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};km("metric",(()=>{for(let e=0;e<this.outputs.length;++e)-1===n.indexOf(e)&&(t=>{let n,s,a;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let r;1===t[t.length-1]||this.lossFunctions[e]===my?-1!==["accuracy","acc"].indexOf(i)?s=xy:-1!==["crossentropy","ce"].indexOf(i)&&(s=Ny):this.lossFunctions[e]===fy?-1!==["accuracy","acc"].indexOf(i)?s=Iy:-1!==["crossentropy","ce"].indexOf(i)&&(s=Cy):-1!==["accuracy","acc"].indexOf(i)?s=wy:-1!==["crossentropy","ce"].indexOf(i)&&(s=$y),-1!==["accuracy","acc"].indexOf(i)?r="acc":-1!==["crossentropy","ce"].indexOf(i)&&(r="ce"),a=s,n=""+r}else{const e=Ty(i);a=e,n=""+Ey(i)}let t;km(n,(()=>{t=a})),r(e,n,t)}})(s[e])})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const s=null==n.batchSize?32:n.batchSize;Qy(s);const r=this.standardizeUserDataXY(e,t,!0,s);try{const a=r[0].concat(r[1]);this.makeTestFunction();const i=this.testFunction;return Of(this.testLoop(i,a,s,n.verbose,n.steps))}finally{rb(r[0],e),rb(r[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const s=null!=(n=n||{}).batches,r=e.testFunction;let a=[];if(n.verbose>0)throw new Af("Verbose mode is not implemented yet.");Q(!s||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const i="function"==typeof t.next?t:await t.iterator();let o=0,l=0;for(;!s||l<n.batches;){const t=await i.next();if(a=io((()=>{if(t.value){const{xs:n,ys:s}=Yy(e,t.value),i=n.concat(s),u=io((()=>r(i)));if(oo(i),0===l)for(let e=0;e<u.length;++e)a.push(_o(0));const c=i[0].shape[0];for(let e=0;e<u.length;++e){const t=u[e],n=a[e];a[e]=io((()=>wo(a[e],No(c,t)))),l>0&&oo(n)}oo(u),o+=c,++l}return a})),t.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=vo(a[e],o),oo(t)}return Of(a)}(this,e,t)}checkNumSamples(e,t,n,s="steps"){let r;if(null!=n){if(r=null,null!=t)throw new Ef(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new Ef(`Either the input data should have a defined shape, or ${s} shoud be specified.`);r=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return r}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new Ef("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),s=n?t:[t],r=this.retrieveSymbolicTensors(s),a=new By;if(e instanceof gr&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new Ef(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new Ef(`No value is provided for the model's input ${t.name}`);a.add(t,n)}const i=Vy(r,a);return n?i:i[0]}retrieveSymbolicTensors(e){const t=Ff(null,e.length);let n=e.length;for(const s of this.layers){const r=Array.isArray(s.output)?s.output:[s.output],a=r.map((e=>e.name));for(let s=0;s<e.length;++s){const i=a.indexOf(e[s]);if(-1!==i&&(t[s]=r[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,s)=>{null==t&&n.push(e[s])})),new Ef(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return io((()=>{const s=this.checkNumSamples(e);if(n)throw new Af("Verbose predictLoop() is not implemented yet.");const r=nb(s,t),a=this.outputs.map((e=>[]));for(let t=0;t<r.length;++t)io((()=>{const n=r[t][0],s=r[t][1],a=eb(e,n,s),i=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)i.push({key:this.inputs[e],value:a[e]});else i.push({key:this.inputs[0],value:a});const o=new By(i);return Vy(this.outputs,o)})).forEach(((e,t)=>a[t].push(e)));return Of(a.map((e=>$l(e,0))))}))}predict(e,t={}){const n=sb(e);lb(n,this.inputNames,this.feedInputShapes,!1);try{const s=null==t.batchSize?32:t.batchSize;return Qy(s),this.predictLoop(n,s)}finally{rb(n,e)}}predictOnBatch(e){lb(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,s){if(null==this.optimizer_)throw new Tf("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const r=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===fy?r.push(t.slice(0,t.length-1).concat([1])):r.push(t)}if(function(e,t,n){const s=Gf(e.map((e=>e.shape[0])));s.sort();const r=Gf(t.map((e=>e.shape[0])));if(r.sort(),s.length>1)throw new Ef(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(r.length>1)throw new Ef(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(s.length>0&&r.length>0&&!ae(s,r))throw new Ef(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=ob(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=ob(t,this.feedOutputNames,r,!1,"target")),function(e,t,n){const s=[cy,my,dy];for(let r=0;r<e.length;++r){const a=e[r],i=t[r],o=n[r];if(null!=i){if(i===dy&&1===a.shape[a.shape.length-1])throw new Ef(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const s=e[n],r=t[n];if(null!=r&&s!==r)throw new Ef(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!=0)throw new Ef(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,s,r=!0,a){const[i,o]=this.standardizeUserDataXY(e,t,r,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const e=qy(s,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await Ky(o[t],null,e[t]))}return[i,o,l]}testLoop(e,t,n,s=0,r){return io((()=>{const a=this.checkNumSamples(t,n,r,"steps"),i=[];if(s>0)throw new Af("Verbose mode is not implemented yet.");if(null!=r)throw new Af("steps mode in testLoop() is not implemented yet");{const s=nb(a,n),r=lh(Am(0,a));for(let n=0;n<s.length;++n){const a=s[n][0],o=s[n][1],l=Dm(r,a,o-a),u=tb(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)i.push(_o(0));for(let e=0;e<c.length;++e){const t=c[e];i[e]=wo(i[e],No(o-a,t))}}for(let e=0;e<i.length;++e)i[e]=vo(i[e],a)}return i}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let r=s;_f(e,s)>1&&(r+=`_${_f(e.slice(0,n),s)}`),t.push(r)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new By(e),o=Vy(this.outputs,i,{training:!0});let l;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(s[e],o[e]);null!=r[e]&&(n=Xy(n,r[e]));const a=Zu(n);t.push(a),l=0===e?n:wo(l,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],r=this.metricsTensors[e][1];n=Zu(t(s[r],o[r]))}lo(n),a.push(n)}return l=Zu(l),this.calculateLosses().forEach((e=>{l=wo(l,e)})),l}),!0,i)].concat(a)}}makeTestFunction(){this.testFunction=e=>io((()=>{const t=[];let n;const s=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:s[e]});const i=new By(a),o=Vy(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const s=this.lossFunctions[e],a=Zu(s(r[e],o[e]));n=0===e?a:wo(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],s=this.metricsTensors[e][1],a=Zu(n(r[s],o[s]));t.push(a)}return t}))}async fit(e,t,n={}){return async function(e,t,n,s={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let r,a,i,o,l,u,c;e.isTraining=!0;try{const h=null==s.batchSize?32:s.batchSize;Qy(h);const p=!1,d=await e.standardizeUserData(t,n,s.sampleWeight,s.classWeight,p,h);r=d[0],a=d[1],c=d[2];let f,m=!1;if(null!=s.validationData&&s.validationData.length>0){if(m=!0,2!==s.validationData.length)throw 3===s.validationData.length?new Af("validationData including sample weights is not supported yet."):new Ef(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);i=s.validationData[0],o=s.validationData[1];const t=!0,n=await e.standardizeUserData(i,o,null,null,t,h);l=n[0],u=n[1],f=l.concat(u)}else if(null!=s.validationSplit&&s.validationSplit>0&&s.validationSplit<1){m=!0;const e=Math.floor(r[0].shape[0]*(1-s.validationSplit)),t=r[0].shape[0];l=eb(r,e,t),r=eb(r,0,e),u=eb(a,e,t),a=eb(a,0,e),f=l.concat(u)}else null!=s.validationSteps&&(m=!0);const g=r.concat(a).concat(c);e.checkTrainableWeightsConsistency();const y=e.makeTrainFunction(),b=e.getDedupedMetricsNames();let x,w;m?(e.makeTestFunction(),x=e.testFunction,w=b.slice().concat(b.map((e=>"val_"+e)))):(x=null,f=[],w=b.slice());const k=ay(s.callbacks,s.yieldEvery);return await async function(e,t,n,s,r,a,i,o,l,u,c,h,p,d,f){null==r&&(r=32),null==a&&(a=1),null==c&&(c=!0),null==p&&(p=0);let m=!1;null!=l&&null!=u&&(m=!0);const g=e.checkNumSamples(n,r,d,"steps_per_epoch");let y;null!=g&&(y=Am(0,g)),null==i&&(i=1);const{callbackList:b,history:x}=oy(o,i,a,p,g,d,r,m,h);b.setModel(e),e.history=x,await b.onTrainBegin(),e.stopTraining_=!1;for(let i=p;i<a;++i){await b.onEpochBegin(i);const a={};{if("batch"===c)throw new Af("batch shuffling is not implemneted yet");c&&j(y);const i=lh(y),o=nb(g,r);for(let c=0;c<o.length;++c){const h={};if(await b.onBatchBegin(c,h),io((()=>{const p=o[c][0],d=o[c][1],f=Dm(i,p,d-p);h.batch=c,h.size=d-p;const g=tb(n,f),y=t(g);for(let e=0;e<s.length;++e){const t=s[e],n=y[e];h[t]=n,lo(n)}if(c===o.length-1&&m){const t=e.testLoop(l,u,r);for(let e=0;e<s.length;++e){const n=s[e],r=t[e];lo(r),a["val_"+n]=r}}})),await b.onBatchEnd(c,h),Zg(h),e.stopTraining_)break}i.dispose()}if(await b.onEpochEnd(i,a),e.stopTraining_)break}return await b.onTrainEnd(),await e.history.syncData(),e.history}(e,y,g,b,h,s.epochs,s.verbose,k,x,f,s.shuffle,w,s.initialEpoch,null)}finally{e.isTraining=!1,rb(r,t),rb(a,n),rb(l,i),rb(u,o),null!=c&&oo(c)}}(this,e,t,n)}async fitDataset(e,t){return async function(e,t,n){const s=null!=n.batchesPerEpoch;if(Q(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),Q(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),Q(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),Q(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),Q(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const r=null!=n.validationData;let a,i;if(r)if(Zy(n.validationData))Q(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new Af("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,i=e.ys}const o=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map((e=>"val_"+e))):l.slice();const c=ay(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:p,history:d}=oy(c,h,n.epochs,null,null,function(e,t){let n=null;return null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size),n}(t,n),null,r,u);p.setModel(e),e.history=d,await p.onTrainBegin(),e.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;f<n.epochs;){const u={};await p.onEpochBegin(f);let c=0,h=0;for(s||(m=await t.iterator());!s||c<n.batchesPerEpoch;){const t=await m.next();if(s&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:s,ys:r}=Yy(e,t.value),a={};a.batch=h,a.size=s[0].shape[0],await p.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const t=qy(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await Ky(r[e],null,t[e]))}const u=s.concat(r).concat(i),d=o(u);oo(u);for(let e=0;e<l.length;++e){const t=l[e],n=d[e];a[t]=n,lo(n)}await p.onBatchEnd(h,a),Zg(a),h++,c++}if(s?c>=n.batchesPerEpoch:t.done){if(r){let t;t=Zy(n.validationData)?Mf(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):Mf(e.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)u[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await p.onEpochEnd(f,u),f++,e.stopTraining_)break}return await p.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),s=n[0],r=n[1],a=this.makeTrainFunction()(s.concat(r)),i=[];for(const e of a){const t=await e.data();i.push(t[0])}return oo(a),Of(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,r=this.getWeights(n);for(let e=0;e<s.length;++e)n&&!s[e].trainable||t.push({name:s[e].originalName,tensor:r[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=ro().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-ro().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=Lf(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>Lf(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=Lf(n[s])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Lf(Ey(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>Lf(Ey(e))));{const e={};for(const t in this.metrics)e[t]=Lf(Ey(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=ly(My(e.optimizer_config));let n,s;if("string"==typeof e.loss)n=zf(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>zf(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=zf(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map((e=>zf(e)));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=zf(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}async save(e,t){if("string"==typeof e){const t=ca(e);if(0===t.length)throw new Ef(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Ef(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Ef("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await Zr(this.getNamedWeights(t)),s={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:`TensorFlow.js tfjs-layers v${zy}`,convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){s.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:r}=await Zr(await this.optimizer.getWeights(),e);n.specs.push(...r),n.data=sa([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;Ay(this.userDefinedMetadata,this.name,e),s.userDefinedMetadata=this.userDefinedMetadata}return s.weightData=n.data,s.weightSpecs=n.specs,e.save(s)}setUserDefinedMetadata(e){Ay(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}ub.className="Model",Bi(ub);class cb extends ub{}async function hb(e,t){"modelTopology"in e||(e={modelTopology:e});let n=(e=e).modelTopology;null!=n.model_config&&(n=n.model_config);const s=ly(My(n),t);if(null!=e.weightsManifest){const t=await Za(e.weightsManifest,e.pathPrefix,s.weights.map((e=>e.originalName))),n={};for(const e of s.weights)n[e.originalName]=t[e.originalName];s.loadWeights(n),oo(t)}return s}cb.className="Functional",Bi(cb);class pb extends ub{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:Dg("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new Ef(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof pb||e instanceof ub;let n;if(t){if(n=e,1!==n.outputs.length)throw new Ef("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new Ef("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new Ef("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=Yg({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new Ef(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new Ef("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=Kg(this.outputs[0])}this.inboundNodes=[],new Hg({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Ff(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(Lg(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new ub({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new Tf("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new Tf("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new Tf("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new Tf("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},s=!1){let r,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new Ef("Legacy serialization format not supported yet.");r=t}else Q(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),r=t.layers,delete t.layers,a=t;const i=new e(a);if(!(i instanceof pb))throw new Af(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(const e of r){const t=ly(e,void 0,s);s&&t.setFastWeightInitDuringBuild(!0),i.add(t)}return i}set stopTraining(e){if(null==this.model)throw new Ef("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new Ef("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}function db(e){return new ub(e)}function fb(e){return new pb(e)}function mb(e,t){return null==t&&(t={}),async function(e,t){if(null==t&&(t={}),"string"==typeof e){const n=ha(e,t);if(0===n.length)n.push(ri(e,t));else if(n.length>1)throw new Ef(`Found more than one (${n.length}) load handlers for URL '${e}'`);e=n[0]}return async function(e,t,n){if(null==n&&(n={}),null==e.load)throw new Ef("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const s=await e.load();let r=s.modelTopology;null!=r.model_config&&(r=r.model_config);const a=null==n.strict||n.strict,i=null!=s.weightData&&null!=s.weightSpecs&&a,o=ly(My(r),void 0,i),l=s.trainingConfig;if(null!=l&&o.loadTrainingConfig(l),null!=s.userDefinedMetadata&&o.setUserDefinedMetadata(s.userDefinedMetadata),null!=s.weightData){if(null==s.weightSpecs)throw new Ef("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:e,optimizerWeights:t}=function(e,t){const n=Qr(e,t),s={},r=[];return t.forEach((e=>{"optimizer"===e.group?r.push({name:e.name,tensor:n[e.name]}):s[e.name]=n[e.name]})),{modelWeights:s,optimizerWeights:r}}(s.weightData,s.weightSpecs);o.loadWeights(e,a),null!=o.optimizer&&t.length>0&&await o.optimizer.setWeights(t),oo(e),oo(t.map((e=>e.tensor)))}return o}(e,0,t)}(e,t)}function gb(e){return Yg(e)}function yb(e,t){iy.registerCallbackConstructor(e,t)}pb.className="Sequential",Bi(pb);class bb extends Li{getConfig(){return{}}}class xb extends bb{apply(e,t=1){return function(e,t=1){if(1!==t)throw new Af(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return lu(e)}(e,t)}}xb.className="elu",Bi(xb);class wb extends bb{apply(e){return Pc(e)}}wb.className="selu",Bi(wb);class kb extends bb{apply(e){return Rc(e)}}kb.className="relu",Bi(kb);class vb extends bb{apply(e){return io((()=>ec(6,Rc(e))))}}vb.className="relu6",Bi(vb);class Nb extends bb{apply(e){return e}}Nb.className="linear",Bi(Nb);class Ib extends bb{apply(e){return Cl(e)}}Ib.className="sigmoid",Bi(Ib);class $b extends bb{apply(e){return function(e){return io((()=>{const t=wo(.5,No(.2,e));return zl(t,0,1)}))}(e)}}$b.className="hardSigmoid",Bi($b);class Cb extends bb{apply(e){return Ru(e)}}Cb.className="softplus",Bi(Cb);class Sb extends bb{apply(e){return function(e){return io((()=>vo(e,Vo(e).add(1))))}(e)}}Sb.className="softsign",Bi(Sb);class Tb extends bb{apply(e){return Tl(e)}}Tb.className="tanh",Bi(Tb);class Eb extends bb{apply(e,t=-1){return Yc(e,t)}}Eb.className="softmax",Bi(Eb);class Ab extends bb{apply(e,t=-1){return Ou(e,t)}}Ab.className="logSoftmax",Bi(Ab);class Rb extends bb{apply(e,t=1){return io((()=>Cl(e.mul(t)).mul(e)))}}function Fb(e){return e.getClassName()}function Db(e,t={}){return Vf(e,zi.getMap().classNameMap,t,"activation")}function _b(e){if(null==e){return Db({className:"linear",config:{}})}if("string"==typeof e){const t={};return t.className=e,t.config={},Db(t)}return e instanceof bb?e:Db(e)}function Ob(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}Rb.className="swish",Bi(Rb);class Mb extends Li{}class Lb extends Mb{constructor(e){super(),Ob(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return io((()=>{let t=oc([1]);return this.hasL1&&(t=wo(t,_u(No(this.l1,Vo(e))))),this.hasL2&&(t=wo(t,_u(No(this.l2,Vm(e))))),t.asScalar()}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}Lb.className="L1L2",Bi(Lb);const zb={l1l2:"L1L2"};function Bb(e){return Pf(e)}function Pb(e,t={}){return Vf(e,zi.getMap().classNameMap,t,"regularizer")}function Wb(e){return null==e?null:"string"==typeof e?Pb({className:e in zb?zb[e]:e,config:{}}):e instanceof Mb?e:Pb(e)}class Vb extends qg{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=Mg(e);let n=Rc(e);return null!=this.maxValue&&(n=zl(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}Vb.className="ReLU",Bi(Vb);class Ub extends qg{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Mg(e);return Nu(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}Ub.className="LeakyReLU",Bi(Ub);class Gb extends qg{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=fg(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Wb(e.alphaRegularizer),this.alphaConstraint=im(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new Ef(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=Lg(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new Vg({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=Mg(e),bc(e,this.alpha.read())}getConfig(){const e={alphaInitializer:dg(this.alphaInitializer),alphaRegularizer:Bb(this.alphaRegularizer),alphaConstraint:rm(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}Gb.className="PReLU",Bi(Gb);class Hb extends qg{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new Af(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Mg(e);return lu(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}Hb.className="ELU",Bi(Hb);class jb extends qg{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=Mg(e);return n.mul(Rm(n.greater(this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}jb.className="ThresholdedReLU",Bi(jb);class qb extends qg{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new Eb).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=Mg(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Kb(e,t,n){if("number"==typeof e)return Ff(e,t);if(e.length!==t)throw new Ef(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let r=0;r<t;++r){const a=e[r];if((s=a)!==parseInt(s.toString(),10))throw new Ef(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var s}function Xb(e,t,n,s,r=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(r-1))+1,Math.floor((a+s-1)/s)}function Yb(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+Em([n-t,0]);else{if("same"!==s)throw new Ef(`Unsupport padding mode: ${s}.`);e*=t}return e}function Jb(e,t){return io((()=>(ym(t),"channelsFirst"===t?hi(e,[0,2,3,1]):e)))}function Zb(e,t){return io((()=>(ym(t),"channelsFirst"===t?hi(e,[0,2,3,4,1]):e)))}function Qb(e,t,n,s=[1,1],r="valid",a,i,o=null){return io((()=>{if(null==a&&(a="channelsLast"),ym(a),3!==e.rank&&4!==e.rank)throw new Ef(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new Ef(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=Jb(e,a);if("causal"===r)throw new Af("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=Lh({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=hi(l,[0,3,1,2])),l}))}qb.className="Softmax",Bi(qb);class ex extends qg{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",ex.verifyArgs(t),this.rank=e,Kf(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Af(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Kb(t.kernelSize,e,"kernelSize"),this.strides=Kb(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,bm(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,ym(this.dataFormat),this.activation=_b(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=fg(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=im(t.biasConstraint),this.biasRegularizer=Wb(t.biasRegularizer),this.activityRegularizer=Wb(t.activityRegularizer),this.dilationRate=Kb(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new Ef(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new Ef(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new Ef(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(Df("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!qf(e.kernelSize,"number",1,3))throw new Ef(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Fb(this.activation),useBias:this.useBias,biasInitializer:dg(this.biasInitializer),biasRegularizer:Bb(this.biasRegularizer),activityRegularizer:Bb(this.activityRegularizer),biasConstraint:rm(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class tx extends ex{constructor(e,t){super(e,t),this.kernel=null,tx.verifyArgs(t),this.filters=t.filters,Kf(this.filters,"filters"),this.kernelInitializer=fg(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=im(t.kernelConstraint),this.kernelRegularizer=Wb(t.kernelRegularizer)}build(e){e=Lg(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Ef(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return io((()=>{let t;e=Mg(e);const n=null==this.bias?null:this.bias.read(),s=Yf(this.activation.getClassName());if(null!=s&&2===this.rank)t=Qb(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)t=function(e,t,n,s=1,r="valid",a,i=1){return io((()=>{if(null==a&&(a="channelsLast"),ym(a),3!==e.shape.length)throw new Ef(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new Ef(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new Ef(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===a&&(e=hi(e,[0,2,1])),"causal"===r)throw new Af("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=Gl(e,t,s,"same"===r?"same":"valid","NWC",i);return null!=n&&(o=Gm(o,n)),o}))}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=Qb(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Af("convolutions greater than 3D are not implemented yet.");t=function(e,t,n,s=[1,1,1],r="valid",a,i){return io((()=>{if(null==a&&(a="channelsLast"),ym(a),4!==e.rank&&5!==e.rank)throw new Ef(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new Ef(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=Zb(e,a);if("causal"===r)throw new Af("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=ql(o,t,s,"same"===r?"same":"valid","NDHWC",i),null!=n&&(o=Gm(o,n)),"channelsFirst"===a&&(o=hi(o,[0,4,1,2,3])),o}))}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=Lg(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const s=Xb(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(s)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:dg(this.kernelInitializer),kernelRegularizer:Bb(this.kernelRegularizer),kernelConstraint:rm(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new Ef(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class nx extends tx{constructor(e){super(2,e),nx.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!qf(e.kernelSize,"number",1,2))throw new Ef(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}nx.className="Conv2D",Bi(nx);class sx extends tx{constructor(e){super(3,e),sx.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new Ef(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}sx.className="Conv3D",Bi(sx);class rx extends nx{constructor(e){if(super(e),this.inputSpec=[new Vg({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new Ef(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=Lg(e)).length)throw new Ef("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Ef("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Vg({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return io((()=>{let t=Mg(e);if(4!==t.shape.length)throw new Ef(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a;"channelsFirst"===this.dataFormat?(r=2,a=3):(r=1,a=2);const i=n[r],o=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[s,Yb(i,c,l,this.padding),Yb(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=hi(t,[0,2,3,1]));let d=jl(t,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=hi(d,[0,3,1,2])),null!=this.bias&&(d=Gm(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=Lg(e)).slice();let n,s,r;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3):(n=3,s=1,r=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[s]=Yb(t[s],o,a,this.padding),t[r]=Yb(t[r],l,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}rx.className="Conv2DTranspose",Bi(rx);class ax extends tx{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new Ef("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new Ef("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new Ef(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=fg(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Wb(t.depthwiseRegularizer),this.depthwiseConstraint=im(t.depthwiseConstraint),this.pointwiseInitializer=fg(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Wb(t.pointwiseRegularizer),this.pointwiseConstraint=im(t.pointwiseConstraint)}build(e){if((e=Lg(e)).length<this.rank+2)throw new Ef(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new Ef(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),r=[];for(let e=0;e<this.rank;++e)r.push(1);r.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",r,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new Vg({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return io((()=>{let t;if(e=Mg(e),1===this.rank)throw new Af("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=hi(e,[0,2,3,1])),t=Wc(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=Gm(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=hi(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=dg(this.depthwiseInitializer),e.pointwiseInitializer=dg(this.pointwiseInitializer),e.depthwiseRegularizer=Bb(this.depthwiseRegularizer),e.pointwiseRegularizer=Bb(this.pointwiseRegularizer),e.depthwiseConstraint=rm(this.depthwiseConstraint),e.pointwiseConstraint=rm(this.pointwiseConstraint),e}}ax.className="SeparableConv";class ix extends ax{constructor(e){super(2,e)}}ix.className="SeparableConv2D",Bi(ix);class ox extends tx{constructor(e){super(1,e),ox.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!qf(e.kernelSize,"number",1,1))throw new Ef(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}ox.className="Conv1D",Bi(ox);class lx extends qg{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return io((()=>{if(e=Mg(e),"channelsLast"===this.dataFormat){const t=Om(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Om(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=Om(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Om(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}lx.className="Cropping2D",Bi(lx);class ux extends qg{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,ym(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,jf(pm,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return io((()=>{let t=Mg(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=hi(t,[0,2,3,1]);const e=this.size[0]*n[2],s=this.size[1]*n[3],r="nearest"===this.interpolation?t.resizeNearestNeighbor([e,s]):t.resizeBilinear([e,s]);return hi(r,[0,3,1,2])}{const e=this.size[0]*n[1],s=this.size[1]*n[2];return"nearest"===this.interpolation?t.resizeNearestNeighbor([e,s]):t.resizeBilinear([e,s])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}ux.className="UpSampling2D",Bi(ux);class cx extends ex{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=fg(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=im(e.depthwiseConstraint),this.depthwiseRegularizer=Wb(e.depthwiseRegularizer)}build(e){if((e=Lg(e)).length<4)throw new Ef(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new Ef(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return io((()=>{let t=function(e,t,n=[1,1],s="valid",r,a){return io((()=>{null==r&&(r="channelsLast"),ym(r);let i=Jb(e,r);if(4!==e.rank)throw new Ef(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new Ef(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=tu(i,t,n,"same"===s?"same":"valid","NHWC",a),"channelsFirst"===r&&(i=hi(i,[0,3,1,2])),i}))}(e=Mg(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=Gm(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=Lg(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,r=Xb(t,this.kernelSize[0],this.padding,this.strides[0]),a=Xb(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],s,r,a]:[e[0],r,a,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=dg(this.depthwiseInitializer),e.depthwiseRegularizer=Bb(this.depthwiseRegularizer),e.depthwiseConstraint=rm(this.depthwiseRegularizer),e}}function hx(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new Ef("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function r(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=r(t),constants:n=r(n)}}function px(e,t,n,s=!1,r,a,i=!1,o=!1){return io((()=>{const l=t.shape.length;if(l<3)throw new Ef(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(Am(2,l));if(t=hi(t,u),null!=a)throw new Af("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=r.asType("bool").asType("float32")).rank===l-1&&(r=hu(r,-1)),r=hi(r,u)),s&&(t=Dc(t,0),null!=r&&(r=Dc(r,0)));const c=[];let h,p=n;const d=t.shape[0],f=yh(t);let m,g;null!=r&&(m=yh(r));for(let t=0;t<d;++t){const n=f[t],s=io((()=>e(n,p)));if(null==r)h=s[0],p=s[1];else{const e=io((()=>{const e=m[t],n=uc(e).sub(e);return{output:s[0].mul(e).add(p[0].mul(n)),newStates:p.map(((t,r)=>s[1][r].mul(e).add(t.mul(n))))}}));h=e.output,p=e.newStates}o&&c.push(h)}return o&&(g=rh(c,1)),[h,g,p]}))}cx.className="DepthwiseConv2D",Bi(cx);class dx extends qg{constructor(e){let t;if(super(e),null==e.cell)throw new Ef("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new kx({cells:e.cell}):e.cell,null==t.stateSize)throw new Ef("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new Vg({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?Am(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null)):this.states_}setStates(e){this.states_=e}computeOutputShape(e){_g(e)&&(e=e[0]),e=e;let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(e,t){return io((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new Af("Constants support is not implemented in RNN yet.");_g(e)&&(e=e[0]),e=e;const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new Vg({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let r;if(this.cell.build(s),r=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!ae(this.stateSpec.map((e=>e.shape[e.shape.length-1])),r))throw new Ef(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=r.map((e=>new Vg({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){io((()=>{if(!this.stateful)throw new Sf("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new Ef("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>oc([n,e]))):this.states_=[oc([n,this.cell.stateSize])];else if(null==e)oo(this.states_),null!=this.keptStates&&(oo(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>oc([n,e]))):this.states_[0]=oc([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Ef(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):oo(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],r=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,r];if(!ae(s.shape,a))throw new Ef(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map((e=>lo(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=hx(e,n,s,this.numConstants);e=r.inputs,n=r.initialState,s=r.constants;let a=[],i=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new Vg({shape:e.shape}));i=i.concat(this.stateSpec)}if(null!=s&&(t.constants=s,a=a.concat(s),this.numConstants=s.length),a[0]instanceof Ug){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return io((()=>{const n=null==t?null:t.mask,s=null==t?null:t.training;let r=null==t?null:t.initialState;e=Mg(e),null==r&&(r=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(r.length!==a)throw new Ef(`RNN Layer has ${a} state(s) but was passed ${r.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:s},o=px(((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]}),e,r,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h}))}getInitialState(e){return io((()=>{let t=oc(e.shape);return t=_u(t,[1,2]),t=Fm(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?zm(t,[1,e]):t)):this.cell.stateSize>1?[zm(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===dx.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const s=ly(t.cell,n);return new e(Object.assign(t,{cell:s}))}}dx.className="RNN",Bi(dx);class fx extends qg{}class mx extends fx{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Kf(this.units,"units"),this.activation=_b(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=fg(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=fg(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=fg(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Wb(e.kernelRegularizer),this.recurrentRegularizer=Wb(e.recurrentRegularizer),this.biasRegularizer=Wb(e.biasRegularizer),this.kernelConstraint=im(e.kernelConstraint),this.recurrentConstraint=im(e.recurrentConstraint),this.biasConstraint=im(e.biasConstraint),this.dropout=Tm([1,Em([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Tm([1,Em([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=Lg(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return io((()=>{if(2!==(e=e).length)throw new Ef(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const s=null!=t.training&&t.training;let r;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=vx({ones:()=>uc(e),rate:this.dropout,training:s})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=vx({ones:()=>uc(n),rate:this.recurrentDropout,training:s}));const a=this.dropoutMask,i=this.recurrentDropoutMask;r=Pm(null!=a?No(e,a):e,this.kernel.read()),null!=this.bias&&(r=Gm(r,this.bias.read())),null!=i&&(n=No(n,i));let o=wo(r,Pm(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Fb(this.activation),useBias:this.useBias,kernelInitializer:dg(this.kernelInitializer),recurrentInitializer:dg(this.recurrentInitializer),biasInitializer:dg(this.biasInitializer),kernelRegularizer:Bb(this.kernelRegularizer),recurrentRegularizer:Bb(this.recurrentRegularizer),biasRegularizer:Bb(this.biasRegularizer),activityRegularizer:Bb(this.activityRegularizer),kernelConstraint:rm(this.kernelConstraint),recurrentConstraint:rm(this.recurrentConstraint),biasConstraint:rm(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}mx.className="SimpleRNNCell",Bi(mx);class gx extends dx{constructor(e){e.cell=new mx(e),super(e)}call(e,t){return io((()=>{null!=this.cell.dropoutMask&&(oo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(oo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return new e(t)}}gx.className="SimpleRNN",Bi(gx);class yx extends fx{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new Ef("GRUCell does not support reset_after parameter set to true.");this.units=e.units,Kf(this.units,"units"),this.activation=_b(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=_b(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=fg(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=fg(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=fg(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Wb(e.kernelRegularizer),this.recurrentRegularizer=Wb(e.recurrentRegularizer),this.biasRegularizer=Wb(e.biasRegularizer),this.kernelConstraint=im(e.kernelConstraint),this.recurrentConstraint=im(e.recurrentConstraint),this.biasConstraint=im(e.biasConstraint),this.dropout=Tm([1,Em([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Tm([1,Em([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=Lg(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return io((()=>{if(2!==(e=e).length)throw new Ef(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=vx({ones:()=>uc(e),rate:this.dropout,training:n,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=vx({ones:()=>uc(s),rate:this.recurrentDropout,training:n,count:3}));const r=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(e=No(e,r[0]));let u=Pm(e,this.kernel.read());this.useBias&&(u=Gm(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=No(s,a[0]));const c=this.recurrentKernel.read(),[h,p]=eh(c,[2*this.units,this.units],c.rank-1),d=Pm(s,h),[f,m,g]=eh(u,3,u.rank-1),[y,b]=eh(d,2,d.rank-1);i=this.recurrentActivation.apply(wo(f,y)),o=this.recurrentActivation.apply(wo(m,b));const x=Pm(No(o,s),p);l=this.activation.apply(wo(g,x));const w=wo(No(i,s),No(wo(1,Au(i)),l));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Fb(this.activation),recurrentActivation:Fb(this.recurrentActivation),useBias:this.useBias,kernelInitializer:dg(this.kernelInitializer),recurrentInitializer:dg(this.recurrentInitializer),biasInitializer:dg(this.biasInitializer),kernelRegularizer:Bb(this.kernelRegularizer),recurrentRegularizer:Bb(this.recurrentRegularizer),biasRegularizer:Bb(this.biasRegularizer),activityRegularizer:Bb(this.activityRegularizer),kernelConstraint:rm(this.kernelConstraint),recurrentConstraint:rm(this.recurrentConstraint),biasConstraint:rm(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}yx.className="GRUCell",Bi(yx);class bx extends dx{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new yx(e),super(e)}call(e,t){return io((()=>{null!=this.cell.dropoutMask&&(oo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(oo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}bx.className="GRU",Bi(bx);class xx extends fx{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Kf(this.units,"units"),this.activation=_b(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=_b(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=fg(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=fg(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=fg(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=Wb(e.kernelRegularizer),this.recurrentRegularizer=Wb(e.recurrentRegularizer),this.biasRegularizer=Wb(e.biasRegularizer),this.kernelConstraint=im(e.kernelConstraint),this.recurrentConstraint=im(e.recurrentConstraint),this.biasConstraint=im(e.biasConstraint),this.dropout=Tm([1,Em([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Tm([1,Em([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=Lg(e))[e.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;s=new((t=class extends Xm{apply(t,s){const r=e.apply([n]),a=(new Jm).apply([n]),i=e.apply([2*n]);return Lm(Lm(r,a),i)}}).className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return io((()=>{const n=null!=t.training&&t.training;if(3!==(e=e).length)throw new Ef(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1];const r=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=vx({ones:()=>uc(e),rate:this.dropout,training:n,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=vx({ones:()=>uc(s),rate:this.recurrentDropout,training:n,count:4}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(e=No(e,a[0]));let h=Pm(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=No(s,i[0])),h=wo(h,Pm(s,this.recurrentKernel.read())),this.useBias&&(h=Gm(h,this.bias.read()));const[p,d,f,m]=eh(h,4,h.rank-1);o=this.recurrentActivation.apply(p),l=this.recurrentActivation.apply(d),u=wo(No(l,r),No(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=No(c,this.activation.apply(u));return[g,g,u]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Fb(this.activation),recurrentActivation:Fb(this.recurrentActivation),useBias:this.useBias,kernelInitializer:dg(this.kernelInitializer),recurrentInitializer:dg(this.recurrentInitializer),biasInitializer:dg(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Bb(this.kernelRegularizer),recurrentRegularizer:Bb(this.recurrentRegularizer),biasRegularizer:Bb(this.biasRegularizer),activityRegularizer:Bb(this.activityRegularizer),kernelConstraint:rm(this.kernelConstraint),recurrentConstraint:rm(this.recurrentConstraint),biasConstraint:rm(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}xx.className="LSTMCell",Bi(xx);class wx extends dx{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new xx(e),super(e)}call(e,t){return io((()=>{null!=this.cell.dropoutMask&&(oo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(oo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}wx.className="LSTM",Bi(wx);class kx extends fx{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return io((()=>{let n=(e=e).slice(1);const s=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?s.push(n.splice(0,e.stateSize.length)):s.push(n.splice(0,1));s.reverse();const r=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=s[i],a=0===i?[e[0]].concat(n):[a[0]].concat(n),a=o.call(a,t),r.push(a.slice(1))}n=[];for(const e of r.slice().reverse())n.push(...e);return[a[0]].concat(n)}))}build(e){let t;_g(e)&&(e=e[0]),e=e,this.cells.forEach(((n,s)=>{km(`RNNCell_${s}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign({},e,t)}static fromConfig(e,t,n={}){const s=[];for(const e of t.cells)s.push(ly(e,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return Pg(e)}setWeights(e){const t=[];for(const n of this.cells){const s=n.weights.length,r=e.splice(s);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],r[e]])}Wg(t)}}function vx(e){const{ones:t,rate:n,training:s=!1,count:r=1}=e,a=()=>Hm(t(),n),i=()=>jm(a,t,s);return!r||r<=1?lo(i().clone()):Array(r).fill(void 0).map(i).map((e=>lo(e.clone())))}kx.className="StackedRNNCells",Bi(kx);class Nx extends dx{constructor(e){if(e.unroll)throw new Af("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Af("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new Vg({ndim:5})]}call(e,t){return io((()=>{if(null!=this.cell.dropoutMask&&(oo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(oo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new Ef("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return io((()=>{const{stateSize:t}=this.cell,n=e.shape,s=this.computeSingleOutputShape(n),r=oc([s[0],...s.slice(2)]);return Array.isArray(t)?Array(t.length).fill(r):[r]}))}resetStates(e,t=!1){io((()=>{if(!this.stateful)throw new Sf("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),r=[s[0],...s.slice(2)];if(null==n[0])throw new Ef("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>oc(r))):this.states_=[oc(r)];else if(null==e)oo(this.states_),null!=this.keptStates&&(oo(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>oc(r))):this.states_[0]=oc(r);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Ef(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):oo(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=r;if(!ae(n.shape,s))throw new Ef(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>lo(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:r,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?3:2],u=e[o?4:3],c=Xb(l,s[0],r,a[0],i[0]),h=Xb(u,s[1],r,a[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}Nx.className="ConvRNN2D";class Ix extends xx{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:r,dataFormat:a,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,Kf(this.filters,"filters"),this.kernelSize=Kb(n,2,"kernelSize"),this.kernelSize.forEach((e=>Kf(e,"kernelSize"))),this.strides=Kb(s||1,2,"strides"),this.strides.forEach((e=>Kf(e,"strides"))),this.padding=r||"valid",bm(this.padding),this.dataFormat=a||"channelsLast",ym(this.dataFormat),this.dilationRate=Kb(i||1,2,"dilationRate"),this.dilationRate.forEach((e=>Kf(e,"dilationRate")))}build(e){var t;e=Lg(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new Ef(`The channel dimension of the input should be defined. Found ${e[n]}`);const s=e[n],r=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;e=new((t=class extends Xm{apply(e,t){return Mm([n.apply([s]),lc([s]),n.apply([2*s])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return io((()=>{if(3!==e.length)throw new Ef(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,s=e[0],r=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=vx({ones:()=>uc(s),rate:this.dropout,training:n,count:4}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?No(t[n],e):e;let l=o(s,i,0),u=o(s,i,1),c=o(s,i,2),h=o(s,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=vx({ones:()=>uc(r),rate:this.recurrentDropout,training:n,count:4}));const p=this.recurrentDropoutMask;let d=o(r,p,0),f=o(r,p,1),m=o(r,p,2),g=o(r,p,3);const[y,b,x,w]=eh(this.kernel.read(),4,3),[k,v,N,I]=this.useBias?eh(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,k,this.padding),u=this.inputConv(u,b,v,this.padding),c=this.inputConv(c,x,N,this.padding),h=this.inputConv(h,w,I,this.padding);const[$,C,S,T]=eh(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,$),f=this.recurrentConv(f,C),m=this.recurrentConv(m,S),g=this.recurrentConv(g,T);const E=this.recurrentActivation.apply(wo(l,d)),A=this.recurrentActivation.apply(wo(u,f)),R=wo(No(A,a),No(E,this.activation.apply(wo(c,m)))),F=No(this.recurrentActivation.apply(wo(h,g)),this.activation.apply(R));return[F,F,R]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(e);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(e,s[r])&&(n[s[r]]=e[s[r]])}return n}(e,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,s)}inputConv(e,t,n,s){const r=Ul(e,t,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?Gm(r,n,this.dataFormat):r}recurrentConv(e,t){return Ul(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}Ix.className="ConvLSTM2DCell",Bi(Ix);class $x extends Nx{constructor(e){const t=new Ix(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}$x.className="ConvLSTM2D",Bi($x);class Cx extends qg{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return io((()=>{this.invokeCallHook(e,t);const n=Mg(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,s=this.getNoiseShape(n);return jm((()=>Hm(n,this.rate,s,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}Cx.className="Dropout",Bi(Cx);class Sx extends Cx{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}Sx.className="SpatialDropout1D",Bi(Sx);class Tx extends qg{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,Kf(this.units,"units"),this.activation=_b(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=fg(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=fg(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=im(e.kernelConstraint),this.biasConstraint=im(e.biasConstraint),this.kernelRegularizer=Wb(e.kernelRegularizer),this.biasRegularizer=Wb(e.biasRegularizer),this.activityRegularizer=Wb(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=Lg(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=Lg(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return io((()=>{this.invokeCallHook(e,t);const n=Mg(e),s=Yf(this.activation.getClassName());let r;return null!=s?r=Pm(n,this.kernel.read(),s,this.bias?this.bias.read():null):(r=Pm(n,this.kernel.read()),null!=this.bias&&(r=Gm(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r}))}getConfig(){const e={units:this.units,activation:Fb(this.activation),useBias:this.useBias,kernelInitializer:dg(this.kernelInitializer),biasInitializer:dg(this.biasInitializer),kernelRegularizer:Bb(this.kernelRegularizer),biasRegularizer:Bb(this.biasRegularizer),activityRegularizer:Bb(this.activityRegularizer),kernelConstraint:rm(this.kernelConstraint),biasConstraint:rm(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Tx.className="Dense",Bi(Tx);class Ex extends qg{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=Lg(e);for(const t of e.slice(1))if(null==t)throw new Ef(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],Cm(e,1)]}call(e,t){return io((()=>{this.invokeCallHook(e,t);let n=Mg(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=n.transpose(e)}return function(e){if(e.rank<=1)throw new Ef(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],Cm(e.shape,1)];return e.reshape(t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}Ex.className="Flatten",Bi(Ex);class Ax extends qg{constructor(e){super(e),this.supportsMasking=!0,this.activation=_b(e.activation)}call(e,t){return io((()=>{this.invokeCallHook(e,t);const n=Mg(e);return this.activation.apply(n)}))}getConfig(){const e={activation:Fb(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}Ax.className="Activation",Bi(Ax);class Rx extends qg{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return io((()=>{return e=Mg(e),t=e,n=this.n,io((()=>{if(2!==t.shape.length)throw new Ef(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return zm(Fm(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}Rx.className="RepeatVector",Bi(Rx);class Fx extends qg{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let r=1,a=null;for(let e=0;e<s.length;++e){const t=s[e];if(this.isUnknown(t)){if(null!==a)throw new Ef("Can only specifiy one unknown dimension.");a=e}else r*=t}const i=Cm(e);if(null!==a){if(0===r||i%r!=0)throw new Ef(n);s[a]=i/r}else if(i!==r)throw new Ef(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return io((()=>{this.invokeCallHook(e,t);const n=Mg(e),s=n.shape,r=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return n.reshape(r)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}Fx.className="Reshape",Bi(Fx);class Dx extends qg{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=Am(1,e.dims.length+1);if(!ae(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Vg({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=Lg(e)).slice();return this.dims.forEach(((n,s)=>{t[s+1]=e[n]})),t}call(e,t){return hi(Mg(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}Dx.className="Permute",Bi(Dx);class _x extends qg{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=Mg(e);return tl(ic(n,this.maskValue),-1)}call(e,t){return io((()=>{this.invokeCallHook(e,t);const n=Mg(e),s=tl(ic(n,this.maskValue),-1,!0);return n.mul(s.asType(n.dtype))}))}}_x.className="Masking",Bi(_x);class Ox extends qg{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(Mf(e.inputLength))}this.inputDim=e.inputDim,Kf(this.inputDim,"inputDim"),this.outputDim=e.outputDim,Kf(this.outputDim,"outputDim"),this.embeddingsInitializer=fg(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Wb(e.embeddingsRegularizer),this.activityRegularizer=Wb(e.activityRegularizer),this.embeddingsConstraint=im(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return io((()=>this.maskZero?(e=Mg(e),ic(e,Co(e))):null))}computeOutputShape(e){if(e=Lg(e),null==this.inputLength)return[...e,this.outputDim];const t=Mf(this.inputLength);if(t.length!==e.length-1)throw new Ef(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let s=0;s<t.length;++s){const r=t[s],a=e[s+1];if(null!=r&&null!=a&&r!==a)throw new Ef(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==r&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return io((()=>{this.invokeCallHook(e,t);let n=Mg(e);return"int32"!==n.dtype&&(n=Rm(n,"int32")),Wm(this.embeddings.read(),n.as1D()).reshape(Lg(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:dg(this.embeddingsInitializer),embeddingsRegularizer:Bb(this.embeddingsRegularizer),activityRegularizer:Bb(this.activityRegularizer),embeddingsConstraint:rm(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}Ox.className="Embedding",Bi(Ox);class Mx extends qg{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new Af}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const r=e[e.length-t.length+s],a=t[s];if(null==r||null==a||r<0||a<0)n.push(null);else if(1===r)n.push(a);else if(1===a)n.push(r);else{if(r!==a)throw new Ef("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(r)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[Lg(e)]),(e=e).length<2)throw new Ef(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=Gf(t),t.length>1)throw new Ef(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const s=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,s)}const s=e.map((e=>e.length));-1===e.indexOf(null)&&1===Gf(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return io((()=>{if(e=e,this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const s=Em(n);for(let n of e){const e=n.rank;for(let t=0;t<s-e;++t)n=Fm(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const s of e){const e=s.rank;if(null==e){const e=s.shape,r=e[0],a=e.slice(1).concat([r]);let i=s.reshape([r].concat(Cm(e.slice(1))));i=hi(i,[1,0]),i=i.reshape(a),t.push(i),n=!0}else if(e>1){const r=Am(1,e).concat([0]);t.push(hi(s,r)),n=!0}else t.push(s)}let s=this.mergeFunction(t);const r=s.rank;if(n)if(null==r){const e=s.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));s=hi(s.reshape([-1,t]),[1,0]).reshape(n)}else if(r>1){const e=[r-1].concat(Am(0,r-1));s=hi(s,e)}return s}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==(e=e)[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const s=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,s)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=Gf(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return io((()=>{if(null==t)return null;if(!Array.isArray(t))throw new Ef("`mask` should be an Array");if(!Array.isArray(e))throw new Ef("`inputs` should be an Array");if(t.length!==e.length)throw new Ef(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:hu(e,0))))[0];for(let e=1;e<t.length-1;++e)n=Hu(n,t[e]);return n}))}}class Lx extends Mx{constructor(e){super(e)}mergeFunction(e){return io((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=wo(t,e[n]);return t}))}}Lx.className="Add",Bi(Lx);class zx extends Mx{constructor(e){super(e)}mergeFunction(e){return io((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=No(t,e[n]);return t}))}}zx.className="Multiply",Bi(zx);class Bx extends Mx{constructor(e){super(e)}mergeFunction(e){return io((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=wo(t,e[n]);return No(1/e.length,t)}))}}Bx.className="Average",Bi(Bx);class Px extends Mx{constructor(e){super(e)}mergeFunction(e){return io((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=jo(t,e[n]);return t}))}}Px.className="Maximum",Bi(Px);class Wx extends Mx{constructor(e){super(e)}mergeFunction(e){return io((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=ec(t,e[n]);return t}))}}Wx.className="Minimum",Bi(Wx);class Vx extends Mx{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new Ef("A `Concatenate` layer should be called on a list of at least 2 inputs");e=e;let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const s=e[t].slice();s.splice(this.axis,1);let r=!1;for(const e of n)if(ae(e,s)){r=!0;break}r||n.push(s)}if(n.length>1)throw new Ef("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return io((()=>Mm(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new Ef("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[s]||null==e[s]){n[s]=null;break}n[s]+=e[s]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new Ef("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new Ef("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new Ef(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return io((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const s=[];for(let n=0;n<e.length;++n)null==t[n]?s.push(uc(e[n]).asType("bool")):t[n].rank<e[n].rank?s.push(hu(t[n],-1)):s.push(t[n]);const r=$l(s,this.axis);return el(r,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Ux(e,t){for(;e<0;)e+=t;return e}Vx.className="Concatenate",Bi(Vx);class Gx extends Mx{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){Q(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new Af("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new Ef(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new Ef(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>Ux(t,e[n].shape.length))):[Ux(this.axes,n.shape.length),Ux(this.axes,s.shape.length)],this.normalize&&(n=uy(n,t[0]),s=uy(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new Af("batchDot is not implemented for tensors of 4D or higher rank yet");if(Q(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),Q(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new Af("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,r=t.shape.length;null==n&&(n=[s-1,r-2]);const a=n;return io((()=>{let n,i;if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=a[0]===a[1]?e.mul(t).sum(a[0]):e.transpose([1,0]).mul(t).sum(a[1]);else{const n=a[0]!==e.shape.length-1,s=a[1]===t.shape.length-1;i=e.matMul(t,n,s)}if(n>0){let e;e=s>r?s+r-3:s-1;const t=[];for(let s=e;s<e+n;++s)t.push(s);i=i.squeeze(t)}return 1===i.shape.length&&(i=i.expandDims(1)),i}))}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[Ux(this.axes,e.length),Ux(this.axes,t.length)],n}computeOutputShape(e){Q(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new Af("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const r=t.concat(n);return 1===r.length&&r.push(1),r}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}Gx.className="Dot",Bi(Gx);class Hx extends qg{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return io((()=>{this.invokeCallHook(e,t);const n=Mg(e);return jm((()=>Bm(n.shape,0,this.stddev).add(n)),(()=>n),t.training||!1)}))}}Hx.className="GaussianNoise",Bi(Hx);class jx extends qg{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return io((()=>{this.invokeCallHook(e,t);const n=Mg(e);return this.rate>0&&this.rate<1?jm((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return n.mul(Bm(n.shape,1,e))}),(()=>n),t.training||!1):n}))}}jx.className="GaussianDropout",Bi(jx);class qx extends qg{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||Mg(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return io((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return jm((()=>{const t=Mg(e),s=-1.7580993408473766;let r=bu(Sc(n),this.rate);r=Rm(r,"float32");const a=((1-this.rate)*(1+this.rate*s**2))**-.5,i=-a*s*this.rate;return t.mul(r).add(r.add(-1).mul(s)).mul(a).add(i)}),(()=>Mg(e)),t.training||!1)}return e}))}}function Kx(e,t,n,s,r,a=.001){let i;if(2===e.rank)i=Fl(e,t,n,s,r,a);else if(3===e.rank)i=Dl(e,t,n,s,r,a);else{if(4!==e.rank)throw new Af(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=_l(e,t,n,s,r,a)}return i}qx.className="AlphaDropout",Bi(qx);class Xx extends qg{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=fg(e.betaInitializer||"zeros"),this.gammaInitializer=fg(e.gammaInitializer||"ones"),this.movingMeanInitializer=fg(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=fg(e.movingVarianceInitializer||"ones"),this.betaConstraint=im(e.betaConstraint),this.gammaConstraint=im(e.gammaConstraint),this.betaRegularizer=Wb(e.betaRegularizer),this.gammaRegularizer=Wb(e.gammaRegularizer)}build(e){e=Lg(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new Ef(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new Vg({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return io((()=>{const n=null!=t.training&&t.training,s=Mg(e),r=s.shape,a=r.length,i=Am(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const l=Ff(1,a);l[o]=r[o];const u=i.slice();u.sort();const c=!ae(u,Am(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=this.movingMean.read().reshape(l),t=this.movingVariance.read().reshape(l),n=this.center?this.beta.read().reshape(l):null,r=this.scale?this.gamma.read().reshape(l):null;return Kx(s,e,t,n,r,this.epsilon)}return Kx(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,p,d]=function(e,t,n,s,r=.001){return ae(s.slice().sort(),Am(0,e.rank-1))?function(e,t,n,s,r=.001){return io((()=>{const a=sc(e,s),i=a.mean,o=a.variance;return[Kx(e,i,o,n,t,r),i,o]}))}(e,t,n,s,r):function(e,t,n,s,r=.001){return io((()=>{const a=sc(e,s),i=a.mean,o=a.variance,l=[];for(const t of Am(0,e.rank))-1!==s.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=i.reshape(l),c=o.reshape(l),h=null==t?null:t.reshape(l),p=null==n?null:n.reshape(l);return[Kx(e,u,c,p,h,r),i,o]}))}(e,t,n,s,r)}(s,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(e,t,n)=>{io((()=>{const s=1-n,r=e.read(),a=r.sub(t).mul(s);e.write(r.sub(a))}))};return(()=>{f(this.movingMean,p,this.momentum),f(this.movingVariance,d,this.momentum)})(),h}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:dg(this.betaInitializer),gammaInitializer:dg(this.gammaInitializer),movingMeanInitializer:dg(this.movingMeanInitializer),movingVarianceInitializer:dg(this.movingVarianceInitializer),betaRegularizer:Bb(this.betaRegularizer),gammaRegularizer:Bb(this.gammaRegularizer),betaConstraint:rm(this.betaConstraint),gammaConstraint:rm(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Xx.className="BatchNormalization",Bi(Xx);class Yx extends qg{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=fg(e.betaInitializer||"zeros"),this.gammaInitializer=fg(e.gammaInitializer||"ones"),this.betaRegularizer=Wb(e.betaRegularizer),this.gammaRegularizer=Wb(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=Lg(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==Gf(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(e,t){const n=Mg(e),s=n.shape,r=s.length;return io((()=>{let{mean:e,variance:t}=sc(n,this.axis,!0);const a=Ff(1,r);for(const e of this.axis)a[e]=s[e];const i=e=>null!=e&&e.shape.length!==r&&this.axis!==[r-1]?e.reshape(a):e;let o=i(this.gamma.read()),l=i(this.beta.read());const u=[],c=[];for(let e=0;e<r;++e)-1!==this.axis.indexOf(e)?(u.push(s[e]),c.push(1)):(u.push(1),c.push(s[e]));return e=e.tile(u),t=t.tile(u),o=o.tile(c),l=l.tile(c),Kx(n,e,t,l,o,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:dg(this.betaInitializer),gammaInitializer:dg(this.gammaInitializer),betaRegularizer:Bb(this.betaRegularizer),gammaRegularizer:Bb(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}Yx.className="LayerNormalization",Bi(Yx);class Jx extends qg{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new Ef(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new Ef(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new Ef(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new Vg({ndim:4})]}computeOutputShape(e){let t,n;return e=Lg(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return io((()=>{return t=Mg(e),n=this.padding,s=this.dataFormat,io((()=>{if(4!==t.rank)throw new Ef(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new Ef("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new Ef(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],hc(t,e)}));var t,n,s}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function Zx(e,t,n,s,r,a){return io((()=>{let i;ym(r),xm(a),bm(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=Jb(e,r);const o="same"===s?"same":"valid";return i="max"===a?Xu(e,t,n,o):Nl(e,t,n,o),"channelsFirst"===r&&(i=hi(i,[0,3,1,2])),i}))}function Qx(e,t,n,s,r,a){return io((()=>{let i;ym(r),xm(a),bm(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=Zb(e,r);const o="same"===s?"same":"valid";return i="max"===a?Yu(e,t,n,o):Il(e,t,n,o),"channelsFirst"===r&&(i=hi(i,[0,4,1,2,3])),i}))}Jx.className="ZeroPadding2D",Bi(Jx);class ew extends qg{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new Ef(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(Kf(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new Ef(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}Kf(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,bm(this.padding),this.inputSpec=[new Vg({ndim:3})]}computeOutputShape(e){const t=Xb((e=Lg(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return io((()=>{this.invokeCallHook(e,t),e=Fm(Mg(e),2);const n=this.poolingFunction(Mg(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return sh(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class tw extends ew{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return ym(r),bm(s),Zx(e,t,n,s,r,"max")}}tw.className="MaxPooling1D",Bi(tw);class nw extends ew{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return ym(r),bm(s),Zx(e,t,n,s,r,"avg")}}nw.className="AveragePooling1D",Bi(nw);class sw extends qg{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new Ef(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];Kf(this.poolSize,"poolSize"),Kf(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,ym(this.dataFormat),bm(this.padding),this.inputSpec=[new Vg({ndim:4})]}computeOutputShape(e){e=Lg(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=Xb(t,this.poolSize[0],this.padding,this.strides[0]),n=Xb(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return io((()=>(this.invokeCallHook(e,t),this.poolingFunction(Mg(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class rw extends sw{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return ym(r),bm(s),Zx(e,t,n,s,r,"max")}}rw.className="MaxPooling2D",Bi(rw);class aw extends sw{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return ym(r),bm(s),Zx(e,t,n,s,r,"avg")}}aw.className="AveragePooling2D",Bi(aw);class iw extends qg{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new Ef(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];Kf(this.poolSize,"poolSize"),Kf(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,ym(this.dataFormat),bm(this.padding),this.inputSpec=[new Vg({ndim:5})]}computeOutputShape(e){e=Lg(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=Xb(t,this.poolSize[0],this.padding,this.strides[0]),n=Xb(n,this.poolSize[1],this.padding,this.strides[1]),s=Xb(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(e,t){return io((()=>(this.invokeCallHook(e,t),this.poolingFunction(Mg(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class ow extends iw{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return ym(r),bm(s),Qx(e,t,n,s,r,"max")}}ow.className="MaxPooling3D",Bi(ow);class lw extends iw{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return ym(r),bm(s),Qx(e,t,n,s,r,"avg")}}lw.className="AveragePooling3D",Bi(lw);class uw extends qg{constructor(e){super(e),this.inputSpec=[new Vg({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new Af}}class cw extends uw{constructor(e){super(e||{})}call(e,t){return io((()=>{const t=Mg(e);return Zu(t,1)}))}}cw.className="GlobalAveragePooling1D",Bi(cw);class hw extends uw{constructor(e){super(e||{})}call(e,t){return io((()=>{const t=Mg(e);return Du(t,1)}))}}hw.className="GlobalMaxPooling1D",Bi(hw);class pw extends qg{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,ym(this.dataFormat),this.inputSpec=[new Vg({ndim:4})]}computeOutputShape(e){return e=e,"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new Af}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class dw extends pw{call(e,t){return io((()=>{const t=Mg(e);return"channelsLast"===this.dataFormat?Zu(t,[1,2]):Zu(t,[2,3])}))}}dw.className="GlobalAveragePooling2D",Bi(dw);class fw extends pw{call(e,t){return io((()=>{const t=Mg(e);return"channelsLast"===this.dataFormat?Du(t,[1,2]):Du(t,[2,3])}))}}fw.className="GlobalMaxPooling2D",Bi(fw);class mw extends qg{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const s=ly(t.layer,n);delete t.layer;const r={layer:s};return Object.assign(r,t),new e(r)}}class gw extends mw{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=Lg(e)).length<3)throw new Ef(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=Lg(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),s=e[1];return[n[0],s].concat(n.slice(1))}call(e,t){return io((()=>px(((e,n)=>[Mg(this.layer.call(e,t)),[]]),e=Mg(e),[],!1,null,null,!1,!0)[1]))}}gw.className="TimeDistributed",Bi(gw);class yw extends mw{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=ly(n),t.goBackwards=!0!==t.goBackwards;const s={};var r;if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=ly(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,r=this.mergeMode,jf(mm,"BidirectionalMergeMode",r),e.weights)throw new Af("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,s,r=this.forwardLayer.computeOutputShape(e);return Array.isArray(r)&&Array.isArray(r[0])||(r=[r]),r=r,this.returnState?(s=r.slice(1),t=r[0]):t=r[0],t=t,"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):Of(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=hx(e,n,s,this.numConstants);if(e=r.inputs,n=r.initialState,s=r.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new Ef("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const s=n.map((e=>new Vg({shape:e.shape})));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),i.push(...s)}if(null!=s)throw new Af("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof Ug;for(const e of a)if(e instanceof Ug!==o)throw new Ef("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return io((()=>{const n=t.initialState;let s,r,a,i;if(null==n)s=this.forwardLayer.call(e,t),r=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),r=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(s)&&(a=s.slice(1).concat(r.slice(1))),s=s[0],r=r[0]),this.returnSequences&&(r=Dc(r,1)),"concat"===this.mergeMode?i=Mm([s,r]):"sum"===this.mergeMode?i=wo(s,r):"ave"===this.mergeMode?i=No(.5,wo(s,r)):"mul"===this.mergeMode?i=No(s,r):null==this.mergeMode&&(i=[s,r]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){km(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),km(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=ly(t.layer);if(delete t.layer,null!=t.numConstants)throw new Af("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}function bw(e){return new Xg(e)}function xw(e){return new Hb(e)}function ww(e){return new Vb(e)}function kw(e){return new Ub(e)}function vw(e){return new Gb(e)}function Nw(e){return new qb(e)}function Iw(e){return new jb(e)}function $w(e){return new ox(e)}function Cw(e){return new nx(e)}function Sw(e){return new rx(e)}function Tw(e){return new sx(e)}function Ew(e){return new ix(e)}function Aw(e){return new lx(e)}function Rw(e){return new ux(e)}function Fw(e){return new cx(e)}function Dw(e){return new Ax(e)}function _w(e){return new Tx(e)}function Ow(e){return new Cx(e)}function Mw(e){return new Sx(e)}function Lw(e){return new Ex(e)}function zw(e){return new Rx(e)}function Bw(e){return new Fx(e)}function Pw(e){return new Dx(e)}function Ww(e){return new Ox(e)}function Vw(e){return new Lx(e)}function Uw(e){return new Bx(e)}function Gw(e){return new Vx(e)}function Hw(e){return new Px(e)}function jw(e){return new Wx(e)}function qw(e){return new zx(e)}function Kw(e){return new Gx(e)}function Xw(e){return new Xx(e)}function Yw(e){return new Yx(e)}function Jw(e){return new Jx(e)}function Zw(e){return new nw(e)}function Qw(e){return Zw(e)}function ek(e){return Zw(e)}function tk(e){return new aw(e)}function nk(e){return tk(e)}function sk(e){return tk(e)}function rk(e){return new lw(e)}function ak(e){return rk(e)}function ik(e){return rk(e)}function ok(e){return new cw(e)}function lk(e){return new dw(e)}function uk(e){return new hw(e)}function ck(e){return new fw(e)}function hk(e){return new tw(e)}function pk(e){return new rw(e)}function dk(e){return new ow(e)}function fk(e){return new bx(e)}function mk(e){return new yx(e)}function gk(e){return new wx(e)}function yk(e){return new xx(e)}function bk(e){return new gx(e)}function xk(e){return new mx(e)}function wk(e){return new $x(e)}function kk(e){return new Ix(e)}function vk(e){return new dx(e)}function Nk(e){return new kx(e)}function Ik(e){return new yw(e)}function $k(e){return new gw(e)}yw.className="Bidirectional",Bi(yw);const Ck=uk,Sk=ck,Tk=hk,Ek=pk;function Ak(e){return new Hx(e)}function Rk(e){return new jx(e)}function Fk(e){return new qx(e)}function Dk(e){return new _x(e)}function _k(e,t){return xy(e,t)}function Ok(e,t){return Ny(e,t)}function Mk(e,t){return Iy(e,t)}function Lk(e,t){return wy(e,t)}function zk(e,t){return $y(e,t)}function Bk(e,t){return vy(e,t)}function Pk(e,t){return function(e,t){return io((()=>{const n=ky(e,t),s=function(e,t){return io((()=>Hu(e.equal(1),t.equal(0)).sum().cast("float32")))}(e,t),r=n.add(s);return au(yu(r,0),n.div(r),0).cast("float32")}))}(e,t)}function Wk(e,t){return gy(e,t)}function Vk(e,t){return hy(e,t)}function Uk(e,t){return py(e,t)}function Gk(e,t){return py(e,t)}function Hk(e,t){return py(e,t)}function jk(e,t){return cy(e,t)}function qk(e,t){return cy(e,t)}function Kk(e,t){return cy(e,t)}function Xk(e){return new Lb(e)}function Yk(e){return Ob(t=e),new Lb({l1:null!=t?t.l1:null,l2:0});var t}function Jk(e){return Ob(t=e),new Lb({l2:null!=t?t.l2:null,l1:0});var t}class Zk extends ey{constructor(){super(...arguments),this.model=null}setModel(e){if(!(e instanceof ub))throw new Error("model must be a LayersModel, not some other Container");this.model=e}}function Qk(e,t){return e<t}function ev(e,t){return e>t}class tv extends Zk{constructor(e){if(super(),null==e&&(e={}),e.restoreBestWeights)throw new Af("restoreBestWeights = True is not implemented in EarlyStopping yet.");this.monitor=e.monitor||"val_loss",this.minDelta=Math.abs(e.minDelta||0),this.patience=e.patience||0,this.verbose=e.verbose||0,this.mode=e.mode||"auto",this.baseline=e.baseline,-1===["auto","min","max"].indexOf(this.mode)&&(console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`),this.mode="auto"),"min"===this.mode?this.monitorFunc=Qk:"max"===this.mode||-1!==this.monitor.indexOf("acc")?this.monitorFunc=ev:this.monitorFunc=Qk,this.monitorFunc===Qk&&(this.minDelta*=-1)}async onTrainBegin(e){this.wait=0,this.stoppedEpoch=0,null!=this.baseline?this.best=this.baseline:this.best=this.monitorFunc===Qk?1/0:-1/0}async onEpochEnd(e,t){await Jg(t);const n=this.getMonitorValue(t);null!=n&&(this.monitorFunc(n-this.minDelta,this.best)?(this.best=n,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=e,this.model.stopTraining=!0)))}async onTrainEnd(e){this.stoppedEpoch>0&&this.verbose&&console.log(`Epoch ${this.stoppedEpoch}: early stopping.`)}getMonitorValue(e){null==e&&(e={});const t=e[this.monitor];return null==t&&console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(e)}`),t}}const nv={earlyStopping:function(e){return new tv(e)}};var sv,rv;!function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(sv||(sv={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(rv||(rv={}));const av={};function iv(e,t){const n={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:t};av[e]=n}function ov(e){return av[e]}function lv(e){delete av[e]}function uv(e,t,n,s,r){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,i=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd;if("tensor"===a.type)return cv(t.inputNames[a.inputIndexStart],n,s,r);if("tensors"===a.type)return t.inputNames.slice(e,i).map((e=>cv(e,n,s,r)));const o=cv(t.inputNames.slice(e)[0],n,s,r),l=o.dataSync();return"number"===a.type?l[0]:Re(o.shape,l)}const i=t.attrParams[e];return i&&i.value}function cv(e,t,n,s){const[r,a]=dv(e);if(null!=s){const e=s.getHashTableHandleByName(r);if(null!=e)return e}const i=n.currentContextIds.find((e=>!!t[pv(r,e)]));return void 0!==i?t[pv(r,i)][a]:void 0}function hv(e,t){const[n,s]=dv(e);return[pv(n,t&&t.currentContextId),s]}function pv(e,t){return t?`${e}-${t}`:e}function dv(e){const t=e.split(":");return 1===t.length?[e,0]:[t[0],Number(t[t.length-1])]}function fv(e,t,n){let s=uv("pad",e,t,n);if("explicit"===s){s=uv("explicitPaddings",e,t,n);const r=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)r[e][0]=s[2*e],r[e][1]=s[2*e+1];return r}return s}function mv(e){return e.kept?e:Ga(e)}const gv=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],yv=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],bv=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}],xv=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],wv=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],kv=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],vv=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],Nv=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],Iv=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]}],$v=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}],Cv=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Sv=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Tv=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],Ev=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],Av=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],Rv=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],Fv=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}];class Dv{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[I,$,C,S,T,E,A,_,D,R,O,M,L,z,B,P,F].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,s=[],r=[],a=[],i=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?s.push(e[t.name]):"Const"===t.op?r.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let o=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const h=Object.keys(i);h.forEach((e=>{const t=i[e];t.inputNames.forEach((e=>{const[n]=hv(e);t.inputs.push(i[n]),i[n].children.push(t)}))})),0===Object.keys(c).length?h.forEach((e=>{const t=i[e];0===t.children.length&&l.push(t)})):Object.keys(c).forEach((e=>{const[t]=hv(e),n=i[t];null!=n&&(n.signatureKey=c[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{const[t]=hv(e),n=i[t];n&&(n.signatureKey=u[e],o.push(n))})):o=s;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:i,inputs:o,outputs:l,weights:r,placeholders:s,signature:t,functions:p};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=ov(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.substr(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const s=n.type;let r;switch(n.type){case"string":r=Ov(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Ov(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":r=Hv(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Hv(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":r=Lv(e.attr,n.tfName,n.defaultValue||0),void 0===r&&n.tfDeprecatedName&&(r=Lv(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":r=Gv(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Gv(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":r=Mv(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Mv(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":r=qv(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=qv(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":r=Uv(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Uv(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":r=jv(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=jv(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":r=Pv(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Pv(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":r=Wv(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Wv(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":r=Bv(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Bv(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:r,type:s},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let s={};null!=t&&(s=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const r=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=hv(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:zv(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,r.push(n),s[t]=n})),Object.keys(s).forEach((e=>{const t=s[e];t.inputNames.forEach((e=>{const[n]=hv(e);t.inputs.push(s[n]),s[n].children.push(t)}))}));const i=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=hv(i[e.name]),r=s[t];null!=r&&(r.defaultOutput=n,a.push(r))}));const o=this.mapArgsToSignature(e);return{nodes:s,inputs:r,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function _v(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=Pe().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function Ov(e,t,n,s=!1){const r=e[t];return null!=r?_v(r.s,s):n}function Mv(e,t,n){const s=e[t];return s?s.b:n}function Lv(e,t,n){const s=e[t]||{},r=null!=s.i?s.i:null!=s.f?s.f:n;return"number"==typeof r?r:parseInt(r,10)}function zv(e){switch("string"==typeof e&&(e=sv[e]),e){case sv.DT_FLOAT:return"float32";case sv.DT_INT32:case sv.DT_INT64:case sv.DT_INT8:case sv.DT_UINT8:return"int32";case sv.DT_BOOL:return"bool";case sv.DT_DOUBLE:return"float32";case sv.DT_STRING:return"string";default:return null}}function Bv(e,t,n){const s=e[t];return s&&s.func?s.func.name:n}function Pv(e,t,n){const s=e[t];return s&&s.type?zv(s.type):n}function Wv(e,t,n){const s=e[t];return s&&s.list&&s.list.type?s.list.type.map((e=>zv(e))):n}function Vv(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function Uv(e,t,n){const s=e[t];return s&&s.shape?Vv(s.shape):n}function Gv(e,t,n){const s=e[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function Hv(e,t,n,s=!1){const r=e[t];return r&&r.list&&r.list.s?r.list.s.map((e=>_v(e,s))):n}function jv(e,t,n){const s=e[t];return s&&s.list&&s.list.shape?s.list.shape.map((e=>Vv(e))):n}function qv(e,t,n){const s=e[t];return s&&s.list&&s.list.b?s.list.b:n}class Kv{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return cv(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return cv(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Lv(this.node.rawAttrs,e,t);if(null!=n.s)return Ov(this.node.rawAttrs,e,t);if(null!=n.b)return Mv(this.node.rawAttrs,e,t);if(null!=n.shape)return Uv(this.node.rawAttrs,e,t);if(null!=n.type)return Pv(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Gv(this.node.rawAttrs,e,t);if(null!=n.list.s)return Hv(this.node.rawAttrs,e,t);if(null!=n.list.shape)return jv(this.node.rawAttrs,e,t);if(null!=n.list.b)return qv(this.node.rawAttrs,e,t);if(null!=n.list.type)return Wv(this.node.rawAttrs,e,t)}return t}}function Xv(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){Q(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let s=0;s<e.length;s++){const r=e[s],a=t[s];Q(r<0||a<0||r===a,(()=>n+` Shapes ${e} and ${t} must match`))}}}function Yv(e){return"number"!=typeof e&&!e.some((e=>e<0))}function Jv(e,t,n){let s=Zv(e,n);const r=!Yv(s);if(r&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);if(r&&t.forEach((e=>{s=Zv(e.shape,s)})),!Yv(s))throw new Error(`Non-fully-defined elementShape: ${s}`);return s}function Zv(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let s=0;s<e.length;++s){const r=e[s],a=t[s];if(r>=0&&a>=0&&r!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[s]=r>=0?r:a}return n}class Qv{constructor(e,t,n,s,r,a,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=s,this.identicalElementShapes=r,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=_o(0),lo(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),Xv(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,lo(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return Yr([],[0].concat(this.elementShape));const n=this.readMany(e);return Xv(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),rh(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return Yr([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return Xv(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),$l(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,yh(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const s=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const r=0===n?0:t.size/n,a=[];io((()=>{t=vl(t,[1,n,r]);for(let n=0;n<e.length;++n){const i=[0,0===n?0:s[n-1],0],o=[1,e[n],r];a[n]=vl(Sl(t,i,o),this.elementShape)}return a}));const i=[];for(let t=0;t<e.length;t++)i[t]=t;this.writeMany(i,a)}}class eN{constructor(e,t,n,s=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);Xv(t,e.shape,"TensorList shape mismatch: "),lo(e)})),this.idTensor=_o(0),this.maxNumElements=s,lo(this.idTensor)}get id(){return this.idTensor.id}copy(){return new eN([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);Xv(e,this.elementShape,"TensorList shape mismatch: ");const s=Jv(this.elementShape,this.tensors,e);return io((()=>{const e=this.tensors.map((e=>vl(e,s)));return rh(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=Jv(this.elementShape,this.tensors,e),s=this.tensors.pop();return Xv(s.shape,e,"TensorList shape mismatch: "),vl(s,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(Xv(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");lo(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);Xv(this.tensors[e].shape,t,"TensorList shape mismatch: ");const s=Jv(this.elementShape,this.tensors,t);return vl(this.tensors[e],s)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);Xv(this.elementShape,t.shape,"TensorList shape mismatch: "),lo(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);Xv(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const s=Jv(this.elementShape,this.tensors,n);return 0===e.length?Yr([],[0].concat(s)):io((()=>{const t=e.map((e=>vl(this.tensors[e],s)));return rh(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);Xv(this.elementShape,t,"TensorList shape mismatch: ");const n=Jv(this.elementShape,this.tensors,t);return 0===this.size()?Yr([],[0].concat(n)):io((()=>{const e=this.tensors.map((e=>vl(e,n)));return $l(e,0)}))}}function tN(e,t,n){const[s,r]=uv("fusedOps",e,t,n),a="biasadd"===s,i="prelu"===r,o="fusedbatchnorm"===s,l=uv("numArgs",e,t,n);if(a){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(o)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const u=uv("strides",e,t,n),c=fv(e,t,n),h=uv("dataFormat",e,t,n).toUpperCase(),p=uv("dilations",e,t,n),[d,f]=uv("args",e,t,n);return{stride:u,pad:c,dataFormat:h,dilations:p,biasArg:d,preluArg:f,activationFunc:r,leakyreluAlpha:uv("leakyreluAlpha",e,t,n)}}function nN(e,t,n){return{boxes:uv("boxes",e,t,n),scores:uv("scores",e,t,n),maxOutputSize:uv("maxOutputSize",e,t,n),iouThreshold:uv("iouThreshold",e,t,n),scoreThreshold:uv("scoreThreshold",e,t,n),softNmsSigma:uv("softNmsSigma",e,t,n)}}class sN{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=_o(0),this.tensorMap=new Map,lo(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),io((()=>{const e=yh(t),s=n.length,r=e.length;Q(s===r,(()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${r} elements.`));for(let t=0;t<s;t++){const s=n[t],r=e[t];lo(r),this.tensorMap.set(s,r)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return io((()=>{const e=[];for(let s=0;s<n.length;s++){const r=n[s],a=this.findWithDefault(r,t);e.push(a)}return rh(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function rN(e,t,n,s){const r=((e,t,n)=>{switch(e.category){case"arithmetic":return io((()=>((e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[wo(uv("a",e,t,n),uv("b",e,t,n))];case"AddN":return[Qo(uv("tensors",e,t,n))];case"FloorMod":case"Mod":return[nc(uv("a",e,t,n),uv("b",e,t,n))];case"Mul":return[No(uv("a",e,t,n),uv("b",e,t,n))];case"RealDiv":case"Div":return[vo(uv("a",e,t,n),uv("b",e,t,n))];case"DivNoNan":return[iu(uv("a",e,t,n),uv("b",e,t,n))];case"FloorDiv":return[ko(uv("a",e,t,n),uv("b",e,t,n))];case"Sub":return[Po(uv("a",e,t,n),uv("b",e,t,n))];case"Minimum":return[ec(uv("a",e,t,n),uv("b",e,t,n))];case"Maximum":return[jo(uv("a",e,t,n),uv("b",e,t,n))];case"Pow":return[Bo(uv("a",e,t,n),uv("b",e,t,n))];case"SquaredDifference":return[nh(uv("a",e,t,n),uv("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return io((()=>((e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":return[Vo(uv("x",e,t,n))];case"Acos":return[Jo(uv("x",e,t,n))];case"Acosh":return[Zo(uv("x",e,t,n))];case"Asin":return[rl(uv("x",e,t,n))];case"Asinh":return[al(uv("x",e,t,n))];case"Atan":return[il(uv("x",e,t,n))];case"Atan2":return[ol(uv("x",e,t,n),uv("y",e,t,n))];case"Atanh":return[ll(uv("x",e,t,n))];case"Ceil":return[Ll(uv("x",e,t,n))];case"Complex":return[Kr(uv("real",e,t,n),uv("imag",e,t,n))];case"Cos":return[Yl(uv("x",e,t,n))];case"Cosh":return[Jl(uv("x",e,t,n))];case"Elu":return[lu(uv("x",e,t,n))];case"Erf":return[uu(uv("x",e,t,n))];case"Exp":return[cu(uv("x",e,t,n))];case"Expm1":return[pu(uv("x",e,t,n))];case"Floor":return[mu(uv("x",e,t,n))];case"Log":return[Tu(uv("x",e,t,n))];case"Log1p":return[Eu(uv("x",e,t,n))];case"Imag":return[xu(uv("x",e,t,n))];case"Neg":return[Au(uv("x",e,t,n))];case"Reciprocal":return[Ac(uv("x",e,t,n))];case"Real":return[Ec(uv("x",e,t,n))];case"Relu":return[Rc(uv("x",e,t,n))];case"Round":return[zc(uv("x",e,t,n))];case"Selu":return[Pc(uv("x",e,t,n))];case"Sigmoid":return[Cl(uv("x",e,t,n))];case"Sin":return[Gc(uv("x",e,t,n))];case"Sign":return[Uc(uv("x",e,t,n))];case"Sinh":return[Hc(uv("x",e,t,n))];case"Softplus":return[Ru(uv("x",e,t,n))];case"Sqrt":return[Io(uv("x",e,t,n))];case"Square":return[$o(uv("x",e,t,n))];case"Tanh":return[Tl(uv("x",e,t,n))];case"Tan":return[oh(uv("x",e,t,n))];case"ClipByValue":return[zl(uv("x",e,t,n),uv("clipValueMin",e,t,n),uv("clipValueMax",e,t,n))];case"Relu6":return[Fc(uv("x",e,t,n))];case"Rsqrt":return[Bc(cv(e.inputNames[0],t,n))];case"Prod":return[xc(uv("x",e,t,n),uv("axes",e,t,n))];case"LeakyRelu":return[Nu(uv("x",e,t,n),uv("alpha",e,t,n))];case"Prelu":return[bc(uv("x",e,t,n),uv("alpha",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return(async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const s=uv("thenBranch",e,t,n),r=uv("elseBranch",e,t,n),a=uv("cond",e,t,n),i=uv("args",e,t,n);return(await a.data())[0]?n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const s=uv("body",e,t,n),r=uv("cond",e,t,n),a=uv("args",e,t,n),i=await n.functionMap[r].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map((e=>e.id));let l=await i[0].data();i.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()}));let u=a;for(;l[0];){const e=u;u=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const t=u.map((e=>e.id));e.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await a[0].data(),a.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return u}case"LoopCond":return[mv(uv("pred",e,t,n))];case"Switch":{const s=uv("pred",e,t,n);let r=uv("data",e,t,n);return r.kept||(r=mv(r)),(await s.data())[0]?[void 0,r]:[r,void 0]}case"Merge":{const s=e.inputNames.find((e=>void 0!==cv(e,t,n)));return s?[mv(cv(s,t,n))]:void 0}case"Enter":{const s=uv("frameName",e,t,n),r=uv("tensor",e,t,n);return n.enterFrame(s),[mv(r)]}case"Exit":{const s=uv("tensor",e,t,n);return n.exitFrame(),[mv(s)]}case"NextIteration":{const s=uv("tensor",e,t,n);return n.nextIteration(),[mv(s)]}case"TensorArrayV3":{const s=uv("size",e,t,n),r=uv("dtype",e,t,n),a=uv("elementShape",e,t,n),i=uv("dynamicSize",e,t,n),o=uv("clearAfterRead",e,t,n),l=uv("identicalElementShapes",e,t,n),u=uv("name",e,t,n),c=new Qv(u,r,s,a,l,i,o);return n.addTensorArray(c),[c.idTensor,_o(1)]}case"TensorArrayWriteV3":{const s=uv("tensorArrayId",e,t,n),r=uv("index",e,t,n),a=uv("tensor",e,t,n),i=n.getTensorArray(s.id);return i.write(r,a),[i.idTensor]}case"TensorArrayReadV3":{const s=uv("tensorArrayId",e,t,n),r=uv("index",e,t,n);return[n.getTensorArray(s.id).read(r)]}case"TensorArrayGatherV3":{const s=uv("tensorArrayId",e,t,n),r=uv("indices",e,t,n),a=uv("dtype",e,t,n);return[n.getTensorArray(s.id).gather(r,a)]}case"TensorArrayScatterV3":{const s=uv("tensorArrayId",e,t,n),r=uv("indices",e,t,n),a=uv("tensor",e,t,n),i=n.getTensorArray(s.id);return i.scatter(r,a),[i.idTensor]}case"TensorArrayConcatV3":{const s=uv("tensorArrayId",e,t,n),r=n.getTensorArray(s.id),a=uv("dtype",e,t,n);return[r.concat(a)]}case"TensorArraySplitV3":{const s=uv("tensorArrayId",e,t,n),r=uv("tensor",e,t,n),a=uv("lengths",e,t,n),i=n.getTensorArray(s.id);return i.split(a,r),[i.idTensor]}case"TensorArraySizeV3":{const s=uv("tensorArrayId",e,t,n);return[_o(n.getTensorArray(s.id).size(),"int32")]}case"TensorArrayCloseV3":{const s=uv("tensorArrayId",e,t,n),r=n.getTensorArray(s.id);return r.clearAndClose(),[r.idTensor]}case"TensorListSetItem":{const s=uv("tensorListId",e,t,n),r=uv("index",e,t,n),a=uv("tensor",e,t,n),i=n.getTensorList(s.id);return i.setItem(r,a),[i.idTensor]}case"TensorListGetItem":{const s=uv("tensorListId",e,t,n),r=uv("index",e,t,n),a=uv("elementShape",e,t,n),i=uv("elementDType",e,t,n);return[n.getTensorList(s.id).getItem(r,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const s=uv("indices",e,t,n),r=function(e,t,n,s){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const r=Math.max(...t);if(null!=s&&-1!==s&&r>=s)throw new Error(`Max index must be < array size (${r}  vs. ${s})`);const a=new eN([],n,e.dtype,s),i=yh(e,0);return t.forEach(((e,t)=>{a.setItem(e,i[t])})),a}(uv("tensor",e,t,n),s,uv("elementShape",e,t,n),uv("numElements",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const s=uv("elementShape",e,t,n),r=uv("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const i=function(e,t,n){return new eN([],e,t,n)}(s,r,uv(a,e,t,n));return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const s=uv("tensorListId",e,t,n),r=uv("indices",e,t,n),a=uv("elementShape",e,t,n),i=uv("elementDType",e,t,n);return[n.getTensorList(s.id).gather(r,i,a)]}case"TensorListStack":{const s=uv("tensorListId",e,t,n),r=uv("elementShape",e,t,n),a=uv("elementDType",e,t,n),i=uv("numElements",e,t,n);return[n.getTensorList(s.id).stack(r,a,i)]}case"TensorListFromTensor":{const s=function(e,t,n){const s=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);Xv(e.shape.slice(1),t,"TensorList shape mismatch: ");const r=yh(e);return new eN(r,t,s)}(uv("tensor",e,t,n),uv("elementShape",e,t,n),uv("elementDType",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListConcat":{const s=uv("tensorListId",e,t,n),r=n.getTensorList(s.id),a=uv("dtype",e,t,n),i=uv("elementShape",e,t,n);return[r.concat(a,i)]}case"TensorListPushBack":{const s=uv("tensorListId",e,t,n),r=uv("tensor",e,t,n),a=n.getTensorList(s.id);return a.pushBack(r),[a.idTensor]}case"TensorListPopBack":{const s=uv("tensorListId",e,t,n),r=uv("elementShape",e,t,n),a=uv("elementDType",e,t,n);return[n.getTensorList(s.id).popBack(r,a)]}case"TensorListSplit":{const s=uv("tensor",e,t,n),r=uv("elementShape",e,t,n),a=function(e,t,n){let s=0;const r=t.map((e=>(s+=e,s)));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);const a=Zv(e.shape.slice(1),n),i=0===s?0:e.size/s,o=io((()=>{const n=[];e=vl(e,[1,s,i]);for(let s=0;s<t.length;++s){const o=[0,0===s?0:r[s-1],0],l=[1,t[s],i];n[s]=vl(Sl(e,o,l),a)}return e.dispose(),n})),l=new eN([],n,e.dtype,t.length);for(let e=0;e<o.length;e++)l.setItem(e,o[e]);return l}(s,uv("lengths",e,t,n),r);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"convolution":return io((()=>((e,t,n)=>{switch(e.op){case"Conv1D":{const s=uv("stride",e,t,n),r=uv("pad",e,t,n),a=uv("dataFormat",e,t,n).toUpperCase(),i=uv("dilation",e,t,n);return[Gl(uv("x",e,t,n),uv("filter",e,t,n),s,r,a,i)]}case"Conv2D":{const s=uv("strides",e,t,n),r=fv(e,t,n),a=uv("dataFormat",e,t,n).toUpperCase(),i=uv("dilations",e,t,n);return[Ul(uv("x",e,t,n),uv("filter",e,t,n),[s[1],s[2]],r,a,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:r,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=tN(e,t,n);return[Lh({x:uv("x",e,t,n),filter:uv("filter",e,t,n),strides:[s[1],s[2]],pad:r,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:r,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=tN(e,t,n);return[Ph({x:uv("x",e,t,n),filter:uv("filter",e,t,n),strides:[s[1],s[2]],pad:r,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=uv("outputShape",e,t,n),r=uv("strides",e,t,n),a=fv(e,t,n);return[jl(uv("x",e,t,n),uv("filter",e,t,n),s,[r[1],r[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=uv("strides",e,t,n),r=fv(e,t,n),a=uv("dilations",e,t,n),i=uv("dataFormat",e,t,n).toUpperCase();return[tu(uv("input",e,t,n),uv("filter",e,t,n),[s[1],s[2]],r,i,[a[1],a[2]])]}case"Conv3D":{const s=uv("strides",e,t,n),r=uv("pad",e,t,n),a=uv("dataFormat",e,t,n).toUpperCase(),i=uv("dilations",e,t,n);return[ql(uv("x",e,t,n),uv("filter",e,t,n),[s[1],s[2],s[3]],r,a,[i[1],i[2],i[3]])]}case"AvgPool":{const s=uv("strides",e,t,n),r=uv("pad",e,t,n),a=uv("kernelSize",e,t,n);return[Nl(uv("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r)]}case"MaxPool":{const s=uv("strides",e,t,n),r=uv("pad",e,t,n),a=uv("kernelSize",e,t,n);return[Xu(uv("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r)]}case"MaxPoolWithArgmax":{const s=uv("strides",e,t,n),r=uv("pad",e,t,n),a=uv("kernelSize",e,t,n),i=uv("includeBatchInIndex",e,t,n),{result:o,indexes:l}=Ju(uv("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r,i);return[o,l]}case"AvgPool3D":{const s=uv("strides",e,t,n),r=uv("pad",e,t,n),a=uv("kernelSize",e,t,n);return[Il(uv("x",e,t,n),[a[1],a[2],a[3]],[s[1],s[2],s[3]],r)]}case"MaxPool3D":{const s=uv("strides",e,t,n),r=uv("pad",e,t,n),a=uv("kernelSize",e,t,n);return[Yu(uv("x",e,t,n),[a[1],a[2],a[3]],[s[1],s[2],s[3]],r)]}case"Dilation2D":{const s=uv("strides",e,t,n),r=uv("pad",e,t,n),a=uv("dilations",e,t,n),i=s[1],o=s[2],l=a[1],u=a[2];return[su(uv("x",e,t,n),uv("filter",e,t,n),[i,o],r,[l,u],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return io((()=>((e,t,n)=>{switch(e.op){case"Fill":{const s=uv("shape",e,t,n),r=uv("dtype",e,t,n);return[Lo(s,uv("value",e,t,n),r)]}case"LinSpace":return[Cu(uv("start",e,t,n),uv("stop",e,t,n),uv("num",e,t,n))];case"Multinomial":{const s=uv("logits",e,t,n),r=uv("numSamples",e,t,n),a=uv("seed",e,t,n);return[ac(s,r,a)]}case"OneHot":{const s=uv("indices",e,t,n),r=uv("depth",e,t,n),a=uv("onValue",e,t,n),i=uv("offValue",e,t,n);return[ci(s,r,a,i)]}case"Ones":return[lc(uv("shape",e,t,n),uv("dtype",e,t,n))];case"OnesLike":return[uc(uv("x",e,t,n))];case"RandomUniform":return[Sc(uv("shape",e,t,n),uv("minval",e,t,n),uv("maxval",e,t,n),uv("dtype",e,t,n))];case"Range":return[Tc(uv("start",e,t,n),uv("stop",e,t,n),uv("step",e,t,n),uv("dtype",e,t,n))];case"TruncatedNormal":{const s=uv("shape",e,t,n),r=uv("mean",e,t,n),a=uv("stdDev",e,t,n),i=uv("seed",e,t,n);return[fh(s,r,a,uv("dtype",e,t,n),i)]}case"Zeros":return[oc(uv("shape",e,t,n),uv("dtype",e,t,n))];case"ZerosLike":return[Co(uv("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=nN(e,t,n),u=await Cp.nonMaxSuppressionWithScoreAsync(s,r,a,i,o,l);return[u.selectedIndices,u.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=nN(e,t,n),l=uv("padToMaxOutputSize",e,t,n),u=await Cp.nonMaxSuppressionPaddedAsync(s,r,a,i,o,l);return[u.selectedIndices,u.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=nN(e,t,n);return[await Cp.nonMaxSuppressionAsync(s,r,a,i,o)]}case"Where":{const s=Ua(uv("condition",e,t,n),"bool"),r=[await wh(s)];return s.dispose(),r}case"ListDiff":return Vc(uv("x",e,t,n),uv("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return io((()=>((e,t,n)=>{switch(e.op){case"TopKV2":{const s=uv("x",e,t,n),r=uv("k",e,t,n),a=uv("sorted",e,t,n),i=dh(s,r,a);return[i.values,i.indices]}case"Unique":{const s=uv("x",e,t,n),r=mh(s);return[r.values,r.indices]}case"UniqueV2":{const s=uv("x",e,t,n),r=uv("axis",e,t,n),a=mh(s,r);return[a.values,a.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return io((()=>((e,t,n)=>{switch(e.op){case"ResizeBilinear":{const s=uv("images",e,t,n),r=uv("size",e,t,n),a=uv("alignCorners",e,t,n),i=uv("halfPixelCenters",e,t,n);return[Cp.resizeBilinear(s,[r[0],r[1]],a,i)]}case"ResizeNearestNeighbor":{const s=uv("images",e,t,n),r=uv("size",e,t,n),a=uv("alignCorners",e,t,n),i=uv("halfPixelCenters",e,t,n);return[Cp.resizeNearestNeighbor(s,[r[0],r[1]],a,i)]}case"CropAndResize":{const s=uv("image",e,t,n),r=uv("boxes",e,t,n),a=uv("boxInd",e,t,n),i=uv("cropSize",e,t,n),o=uv("method",e,t,n),l=uv("extrapolationValue",e,t,n);return[Cp.cropAndResize(s,r,a,i,o,l)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return io((()=>((e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=uv("default",e,t,n);return[cv(e.name,t,n)||s];case"Placeholder":return[cv(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[mv(uv("x",e,t,n))];case"IdentityN":return uv("x",e,t,n).map((e=>mv(e)));case"Snapshot":return[mv(uv("x",e,t,n))];case"Shape":return[lh(uv("x",e,t,n).shape,"int32")];case"ShapeN":return uv("x",e,t,n).map((e=>lh(e.shape)));case"Size":return[_o(uv("x",e,t,n).size,"int32")];case"Rank":return[_o(uv("x",e,t,n).rank,"int32")];case"NoOp":return[_o(1)];case"Print":const r=uv("x",e,t,n),a=uv("data",e,t,n),i=uv("message",e,t,n),o=uv("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<a.length;e++)console.log(Array.prototype.slice.call(a[e].dataSync()).slice(0,o));return[r];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return io((()=>((e,t,n)=>{switch(e.op){case"Equal":return[ru(uv("a",e,t,n),uv("b",e,t,n))];case"NotEqual":return[ic(uv("a",e,t,n),uv("b",e,t,n))];case"Greater":return[yu(uv("a",e,t,n),uv("b",e,t,n))];case"GreaterEqual":return[bu(uv("a",e,t,n),uv("b",e,t,n))];case"Less":return[Iu(uv("a",e,t,n),uv("b",e,t,n))];case"LessEqual":return[$u(uv("a",e,t,n),uv("b",e,t,n))];case"LogicalAnd":return[Hu(uv("a",e,t,n),uv("b",e,t,n))];case"LogicalNot":return[ju(uv("a",e,t,n))];case"LogicalOr":return[qu(uv("a",e,t,n),uv("b",e,t,n))];case"Select":case"SelectV2":return[au(uv("condition",e,t,n),uv("a",e,t,n),uv("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return io((()=>((e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[ui(uv("a",e,t,n),uv("b",e,t,n),uv("transposeA",e,t,n),uv("transposeB",e,t,n))];case"Transpose":return[hi(uv("x",e,t,n),uv("perm",e,t,n))];case"_FusedMatMul":const[s,r]=uv("fusedOps",e,t,n),a="biasadd"===s,i="prelu"===r,o=uv("numArgs",e,t,n),l=uv("leakyreluAlpha",e,t,n);if(a){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[u,c]=uv("args",e,t,n);return[Wh({a:uv("a",e,t,n),b:uv("b",e,t,n),transposeA:uv("transposeA",e,t,n),transposeB:uv("transposeB",e,t,n),bias:u,activation:r,preluActivationWeights:c,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return io((()=>((e,t,n)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[Rl(uv("x",e,t,n),uv("mean",e,t,n),uv("variance",e,t,n),uv("offset",e,t,n),uv("scale",e,t,n),uv("epsilon",e,t,n))];case"LRN":return[Su(uv("x",e,t,n),uv("radius",e,t,n),uv("bias",e,t,n),uv("alpha",e,t,n),uv("beta",e,t,n))];case"Softmax":return[Yc(uv("x",e,t,n))];case"LogSoftmax":return[Ou(uv("x",e,t,n))];case"SparseToDense":return[Ch(uv("sparseIndices",e,t,n),uv("outputShape",e,t,n),uv("sparseValues",e,t,n),uv("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return io((()=>((e,t,n)=>{switch(e.op){case"Max":{const s=uv("axis",e,t,n),r=uv("keepDims",e,t,n);return[Du(uv("x",e,t,n),s,r)]}case"Mean":{const s=uv("axis",e,t,n),r=uv("keepDims",e,t,n);return[Zu(uv("x",e,t,n),s,r)]}case"Min":{const s=uv("axis",e,t,n),r=uv("keepDims",e,t,n);return[Qu(uv("x",e,t,n),s,r)]}case"Sum":{const s=uv("axis",e,t,n),r=uv("keepDims",e,t,n);return[_u(uv("x",e,t,n),s,r)]}case"All":{const s=uv("axis",e,t,n),r=uv("keepDims",e,t,n);return[el(uv("x",e,t,n),s,r)]}case"Any":{const s=uv("axis",e,t,n),r=uv("keepDims",e,t,n);return[tl(uv("x",e,t,n),s,r)]}case"ArgMax":{const s=uv("axis",e,t,n);return[nl(uv("x",e,t,n),s)]}case"ArgMin":{const s=uv("axis",e,t,n);return[sl(uv("x",e,t,n),s)]}case"Prod":{const s=uv("axis",e,t,n),r=uv("keepDims",e,t,n);return[xc(uv("x",e,t,n),s,r)]}case"Cumsum":{const s=uv("axis",e,t,n),r=uv("exclusive",e,t,n),a=uv("reverse",e,t,n);return[Zl(uv("x",e,t,n),s,r,a)]}case"Bincount":const s=uv("x",e,t,n),r=uv("weights",e,t,n),a=uv("size",e,t,n);return[Ol(s,r,a)];case"DenseBincount":{const s=uv("x",e,t,n),r=uv("weights",e,t,n),a=uv("size",e,t,n),i=uv("binaryOutput",e,t,n);return[Ql(s,r,a,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return io((()=>((e,t,n)=>{switch(e.op){case"ConcatV2":case"Concat":{const s=uv("n",e,t,n),r=uv("axis",e,t,n);let a=uv("tensors",e,t,n);return a=a.slice(0,s),[$l(a,r)]}case"Gather":{const s=uv("x",e,t,n),r=uv("indices",e,t,n);return[gu(s,Ua(r,"int32"),0)]}case"GatherV2":{const s=uv("axis",e,t,n),r=uv("batchDims",e,t,n),a=uv("x",e,t,n),i=uv("indices",e,t,n);return[gu(a,Ua(i,"int32"),s,r)]}case"Reverse":{const s=uv("dims",e,t,n),r=[];for(let e=0;e<s.length;e++)s[e]&&r.push(e);const a=uv("x",e,t,n);return[Dc(a,r)]}case"ReverseV2":{const s=uv("axis",e,t,n),r=uv("x",e,t,n);return[Dc(r,s)]}case"Slice":{const s=uv("begin",e,t,n),r=uv("size",e,t,n);return[Sl(uv("x",e,t,n),s,r)]}case"StridedSlice":{const s=uv("begin",e,t,n),r=uv("end",e,t,n),a=uv("strides",e,t,n),i=uv("beginMask",e,t,n),o=uv("endMask",e,t,n),l=uv("ellipsisMask",e,t,n),u=uv("newAxisMask",e,t,n),c=uv("shrinkAxisMask",e,t,n),h=uv("x",e,t,n);return[ih(h,s,r,a,i,o,l,u,c)]}case"Pack":return io((()=>{const s=uv("axis",e,t,n),r=uv("tensors",e,t,n),a=r[0].shape,i=sh(r[0]).shape,o=r.map((e=>{const t=ae(e.shape,a);if(!t&&!ae(sh(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:vl(e,a)}));return[rh(o,s)]}));case"Unpack":{const s=uv("axis",e,t,n),r=uv("tensor",e,t,n);return yh(r,s)}case"Tile":{const s=uv("reps",e,t,n);return[du(uv("x",e,t,n),s)]}case"Split":case"SplitV":{const s=uv("axis",e,t,n),r=uv("numOrSizeSplits",e,t,n),a=uv("x",e,t,n);return eh(a,r,s)}case"ScatterNd":{const s=uv("indices",e,t,n),r=uv("values",e,t,n),a=uv("shape",e,t,n);return[$h(s,r,a)]}case"GatherNd":{const s=uv("x",e,t,n),r=uv("indices",e,t,n);return[Sh(s,r)]}case"SparseToDense":{const s=uv("sparseIndices",e,t,n),r=uv("outputShape",e,t,n),a=uv("sparseValues",e,t,n),i=uv("defaultValue",e,t,n);return[Ch(s,a,r,a.dtype===i.dtype?i:Ua(i,a.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return io((()=>((e,t,n)=>{switch(e.op){case"FFT":return[Jc(uv("x",e,t,n))];case"IFFT":return[Zc(uv("x",e,t,n))];case"RFFT":return[th(uv("x",e,t,n))];case"IRFFT":return[Qc(uv("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return io((()=>((e,t,n)=>{switch(e.op){case"Cast":return[Ua(uv("x",e,t,n),uv("dtype",e,t,n))];case"ExpandDims":{const s=uv("axis",e,t,n);return[hu(uv("x",e,t,n),s)]}case"Squeeze":{const s=uv("axis",e,t,n);return[sh(uv("x",e,t,n),s)]}case"Reshape":return[vl(uv("x",e,t,n),uv("shape",e,t,n))];case"MirrorPad":return[tc(uv("x",e,t,n),uv("padding",e,t,n),uv("mode",e,t,n))];case"PadV2":case"Pad":return[hc(uv("x",e,t,n),uv("padding",e,t,n),uv("constantValue",e,t,n))];case"SpaceToBatchND":{const s=uv("blockShape",e,t,n),r=uv("paddings",e,t,n);return[gc(uv("x",e,t,n),s,r)]}case"BatchToSpaceND":{const s=uv("blockShape",e,t,n),r=uv("crops",e,t,n);return[Al(uv("x",e,t,n),s,r)]}case"DepthToSpace":{const s=uv("blockSize",e,t,n),r=uv("dataFormat",e,t,n).toUpperCase();return[eu(uv("x",e,t,n),s,r)]}case"BroadcastTo":return[Ml(uv("x",e,t,n),uv("shape",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,s)=>{switch(e.op){case"HashTable":case"HashTableV2":{const r=uv("keyDType",e,t,n),a=uv("valueDType",e,t,n),i=new sN(r,a);return s.addHashTable(e.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const r=uv("tableHandle",e,t,n,s),a=uv("keys",e,t,n),i=uv("values",e,t,n),o=s.getHashTableById(r.id);return[await o.import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const r=uv("tableHandle",e,t,n,s),a=uv("keys",e,t,n),i=uv("defaultValue",e,t,n),o=s.getHashTableById(r.id);return[await o.find(a,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,s);case"custom":const r=ov(e.op);if(r&&r.customExecutor)return r.customExecutor(new Kv(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return ze(r)?r.then((e=>[].concat(e))):[].concat(r)}class aN{constructor(e={},t={},n={},s={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function iN(e,t,n,s){const r=new Set,a=[];let i=null,o=null;const l=new Set,u=Object.keys(e).map((e=>dv(e)[0]));let c=[];null!=s&&(c=s.map((e=>dv(e.name)[0])));const h=[...t];for(;h.length>0;){const e=h.pop();(cN(e)||hN(e)||pN(e))&&null==i&&(i=e,o=i.children.map((e=>e.name)).filter((e=>r.has(e)))),r.add(e.name),null==n[e.name]&&-1===u.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),h.push(e))})):a.push(e.name))}return{inputs:e,outputs:t,usedNodes:r,missingInputs:a,dynamicNode:i,syncInputs:o}}const oN=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],lN=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],uN=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2"];function cN(e){return oN.indexOf(e.op)>=0}function hN(e){return lN.indexOf(e.op)>=0}function pN(e){return uN.indexOf(e.op)>=0}class dN{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new dN(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),s=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+s.join(this.SEPERATOR)}compile(e,t){const n=iN(e,t,this.weightMap,this._initNodes),{missingInputs:s,dynamicNode:r,syncInputs:a}=n;if(null!=r)throw new Error(`This execution contains the node '${r.name}', which has the dynamic op '${r.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(s.length>0){const n=t.map((e=>e.name)),r=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${r}]. Missing the following inputs: [${s}]`)}return function(e,t,n){const{usedNodes:s,inputs:r}=n,a=[],i=Object.keys(r).map((e=>dv(e)[0])).map((t=>e.nodes[t])),o=e.initNodes;i.forEach((e=>{s.has(e.name)&&a.push(e)})),e.weights.forEach((e=>{s.has(e.name)&&a.push(e)})),null!=o&&o.forEach((e=>{s.has(e.name)&&a.push(e)}));const l=new Set,u=[];for(;a.length>0;){const e=a.pop();l.add(e.name),t[e.name]||u.push(e),e.children.forEach((e=>{!l.has(e.name)&&s.has(e.name)&&e.inputs.every((e=>l.has(e.name)))&&a.push(e)}))}return u}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const s=n.map((e=>this.graph.nodes[dv(e)[0]])),r=t.map((e=>dv(e)[0]));let a=r.map((e=>this.graph.nodes[e]));0===a.length&&(a=this._outputs);const i=this.getCompilationKey(s,a);let o=this.compiledMap.get(i);null==o&&(o=this.compile(e,a),this.compiledMap.set(i,o));const l={},u={};return io((()=>{const n=new aN(this.weightMap,l,u,this.functionExecutorMap),s=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=dv(t),a=[];a[r]=e[t],s[n]=a}));const a=this.getFrozenTensorIds(s),i={};for(let e=0;e<o.length;e++){const t=o[e];if(!s[t.name]){const e=rN(t,s,n,this._resourceManager);if(ze(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);s[t.name]=e,this.checkTensorForDisposal(t.name,t,s,n,a,r,i)}}return null==this.parent&&n.dispose(a),t.map((e=>cv(e,s,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,s,r,a,i){"control"!==t.category&&-1===a.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(i[e.id]=(i[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const t=function(e,t,n){return t[pv(e,n.currentContextId)]}(e.name,n,s);null!=t&&t.forEach((e=>{if(e&&!r.has(e.id)){const t=i[e.id];1===t?(e.dispose(),delete i[e.id]):null!=t&&i[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}async _executeAsync(e,t,n=!1,s={},r={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));const a=new aN(this.weightMap,s,r,this.functionExecutorMap),i=await this.executeWithControlFlow(e,a,t,n),o=t.map((e=>cv(e,i,a))),l=o.map((e=>e.id)),u=Object.keys(e).map((t=>e[t].id)),c=new Set([...l,...u,...this.weightIds]);return Object.keys(i).forEach((e=>{i[e].forEach((e=>{!e||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&a.dispose(c),o}async executeFunctionAsync(e,t,n){const s=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(s,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,s){const r=Object.keys(e),a=r.map((e=>this.graph.nodes[dv(e)[0]])),i=n.map((e=>dv(e)[0]));let o=i.map((e=>this.graph.nodes[e]));0===o.length&&(o=this._outputs);const{usedNodes:l,missingInputs:u,dynamicNode:c,syncInputs:h}=iN(e,o,this.weightMap,this._initNodes),p=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=dv(t),r=[];r[s]=e[t],d[n]=r}));const f={},m=this.getFrozenTensorIds(d),g={};for(;p.length>0;){const e=this.processStack(a,p,t,d,g,m,i,f,l);await Promise.all(e)}null!=c||s||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=o.filter((e=>!cN(e)&&!cv(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${r}]. Consider providing the following inputs: [${u}]. ${e}`)}return d}processStack(e,t,n,s,r,a,i,o,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&uv("isConstant",e.node,s,n)&&([c]=hv(e.node.name,n)),null==s[e.node.name]){const h=rN(e.node,s,n,this._resourceManager);c||([c]=hv(e.node.name,n));const p=n.currentContext;ze(h)?u.push(h.then((u=>(s[c]=u,n.currentContext=p,this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l),u)))):(s[c]=h,this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l))}else this.processChildNodes(e.node,t,n,s,r,l)}return u}processChildNodes(e,t,n,s,r,a){e.children.forEach((e=>{const[i]=hv(e.name,n);!r[i]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!cv(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!cv(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[s]=dv(t),r=this.graph.nodes[s];if(r.attrParams.shape&&r.attrParams.shape.value){const e=r.attrParams.shape.value;Q(e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t)),(()=>`The shape of dict['${r.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}r.attrParams.dtype&&r.attrParams.dtype.value&&Q(n.dtype===r.attrParams.dtype.value,(()=>`The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]?t[this._signature.inputs[n].name]=e[n]:t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=dv(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]?this._signature.outputs[e].name:e),{})}checkOutputs(e){e.forEach((e=>{const[t]=dv(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class fN{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class mN{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new fN}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=ri(e,this.loadOptions);else{const t=ha(e,this.loadOptions);if(0===t.length)t.push(ri(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const s=Qr(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new dN(Dv.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=Dv.Instance.transformGraph(e.modelInitializer);this.initializer=new dN(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=ca(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof gr||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,s)=>(t[n]=e[s],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function gN(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e=`${e}model.json?tfjs-format=file`);const n=new mN(e,t);return await n.load(),n}const yN="3.1.0";function bN(e,t,n=new Map,s=new Set){if(null==e)return null;if(s.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(r.recurse){if(NN(e)){const r=Array.isArray(e)?[]:{};s.add(e);for(const a in e){const i=bN(e[a],t,n,s);r[a]=i}return s.delete(e),r}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,r.value),r.value}function xN(e,t=kN){return wN(e,t)}function wN(e,t,n=new Set){const s=e[0];if(n.has(s))throw new Error("Circular references are not supported.");const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(r.recurse){if(NN(s)){const r=Array.isArray(s)?[]:{};n.add(s);for(const a in s){const s=wN(e.map((e=>e[a])),t,n);r[a]=s}return n.delete(s),r}throw new Error(`Can't recurse into non-iterable type: ${s}`)}return r.value}function kN(e){return null===e?null:NN(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}async function vN(e,t){const n=new Map;bN(e,t,n);for(const e of Array.from(n.keys())){const t=n.get(e);if(ze(t)){const s=await t;n.set(e,s)}}return bN(e,t,n)}function NN(e){return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof gr))}function IN(e){return e instanceof gr?{value:e.clone(),recurse:!1}:NN(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class $N{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class CN extends $N{constructor(){super(CN.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function SN(e){return new AN(e)}function TN(e){return new RN(e)}CN.INITIAL_CAPACITY=32;class EN{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new zN(this,e)}filter(e){return new MN(this,e)}map(e){return new LN(this,e)}mapAsync(e){return new BN(this,e)}serialMapAsync(e){return new BN(this,e).serial()}flatmap(e){return new WN(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new ON(this,e,t)}columnMajorBatch(e,t=!0,n=kN){return this.rowMajorBatch(e,t).map((e=>xN(e,n)))}concatenate(e,t){return new VN(SN([this,e]),t)}take(e){return e<0||null==e?this:new _N(this,e)}skip(e){return e<0||null==e?this:new DN(this,e)}prefetch(e){return new HN(this,e)}shuffle(e,t){return new jN(this,e,t)}serial(){return new FN(this)}}class AN extends EN{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:(t=e,function(e,t){return bN(e,t)}(t,IN)),done:!1};var t}}class RN extends EN{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class FN extends EN{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class DN extends EN{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;oo(e.value)}return this.upstream.next()}}class _N extends EN{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class ON extends EN{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class MN extends EN{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;oo(e.value)}}}class LN extends EN{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Ar(e.value),n=this.transform(e.value),s=Ar(n);for(const e of t)Er(e,s)||e.dispose();return{value:n,done:!1}}}class zN extends EN{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class BN extends EN{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Ar(e.value),n=await this.transform(e.value),s=Ar(n);for(const e of t)Er(e,s)||e.dispose();return{value:n,done:!1}}}class PN extends EN{constructor(){super(),this.outputQueue=new CN,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class WN extends PN{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=Ar(e.value),n=this.transform(e.value),s=Ar(n);this.outputQueue.pushAll(n);for(const e of t)Er(e,s)||e.dispose();return!0}}class VN extends EN{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var UN;!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(UN||(UN={}));class GN extends EN{constructor(e,t=UN.FAIL){super(),this.iterators=e,this.mismatchMode=t,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(e){await e;let t=0,n=0;const s=await vN(this.iterators,(function(e){return e instanceof EN?{value:e.next().then((e=>(t++,e.done&&n++,e.value))),recurse:!1}:{value:null,recurse:!0}}));if(t===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case UN.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case UN.SHORTEST:return{value:null,done:!0};case UN.LONGEST:}return this.count++,{value:s,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class HN extends EN{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new $N(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class jN extends HN{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=kc.alea(n||er().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class qN{constructor(){this.size=null}batch(e,t=!0){const n=this;let s;return Q(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),s=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),KN((async()=>(await n.iterator()).columnMajorBatch(e,t,JN)),s)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,KN((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,KN((async()=>(await t.iterator()).filter((t=>io((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return KN((async()=>(await t.iterator()).map((t=>io((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return KN((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return KN((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,KN((async()=>{return n=TN((async()=>({value:await t.iterator(),done:!1}))).take(e),new VN(n,s);var n,s}),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,KN((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const s=this,r=kc.alea(t||er().toString());return KN((async()=>{let t=r.int32();return n&&(t+=r.int32()),(await s.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,KN((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function KN(e,t=null){return new class extends qN{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function XN(e){return KN((async()=>SN(e)),e.length)}function YN(e){if(!NN(e))throw new Error("The argument to zip() must be an object or array.");let t;if(Array.isArray(e))for(let n=0;n<e.length;n++)t=null==t?e[n].size:Math.min(t,e[n].size);else if(e instanceof Object)for(const n in e)t=null==t?e[n].size:Math.min(t,e[n].size);return KN((async()=>function(e,t=UN.FAIL){return new GN(e,t)}(await vN(e,(e=>{if(e instanceof qN)return{value:e.iterator(),recurse:!1};if(NN(e))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")})),UN.SHORTEST)),t)}function JN(e){if(null===e)return null;return null==(t=e[0])||null===(n=t)||"object"!=typeof n&&"function"!=typeof n||Array.isArray(t)||"object"==typeof t&&t instanceof gr||we(t)?{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof gr?rh(e):Yr(e)}(e),recurse:!1}:{value:null,recurse:!0};var t,n}qN.MAX_BUFFER_SIZE=1e4;class ZN extends qN{constructor(e){super(),this.input=e}async iterator(){return(await this.input.iterator()).decodeUTF8().split("\n").map((e=>(e.endsWith("\r")&&(e=e.slice(0,-1)),e)))}}const QN='"',eI=Symbol("out"),tI=Symbol("field"),nI=Symbol("quote"),sI=Symbol("quoteafterquote"),rI=Symbol("quoteinquote");class aI extends qN{constructor(e,t){super(),this.input=e,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new ZN(e),t||(t={}),this.hasHeader=!1!==t.hasHeader,this.fullColumnNames=t.columnNames,this.columnConfigs=t.columnConfigs,this.configuredColumnsOnly=t.configuredColumnsOnly,t.delimWhitespace?(Q(null==t.delimiter,(()=>"Delimiter should not be provided when delimWhitespace is true.")),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=t.delimiter?t.delimiter:","}async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const e=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!e)throw new Error("Column names must be provided if there is no header line.");this.fullColumnNames&&e&&Q(e.length===this.fullColumnNames.length,(()=>"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+e.length.toString()+").")),this.fullColumnNames||(this.fullColumnNames=e);const t=this.fullColumnNames.reduce(((e,t)=>(e[t]=e[t]+1||1,e)),{}),n=Object.keys(t).filter((e=>t[e]>1));if(Q(0===n.length,(()=>"Duplicate column names found: "+n.toString())),this.columnConfigs)for(const e of Object.keys(this.columnConfigs))if(-1===this.fullColumnNames.indexOf(e))throw new Error('The key "'+e+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").");this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const e=await this.base.iterator(),t=await e.next();if(t.done)throw new Error("No data was found for CSV parsing.");const n=t.value;return this.parseRow(n,!1)}return null}async iterator(){this.columnNamesValidated||await this.setColumnNames();let e=await this.base.iterator();return this.hasHeader&&(e=e.skip(1)),e.map((e=>this.makeDataElement(e)))}makeDataElement(e){const t=this.parseRow(e),n={},s={};for(let r=0;r<this.fullColumnNames.length;r++){const a=this.fullColumnNames[r],i=this.columnConfigs?this.columnConfigs[a]:null;if(!this.configuredColumnsOnly||i){const o=t[r];let l=null;if(""===o)if(i&&void 0!==i.default)l=i.default;else{if(i&&(i.required||i.isLabel))throw new Error(`Required column ${a} is empty in this line: ${e}`);l=void 0}else{const e=Number(o);if(isNaN(e))l=i&&"bool"===i.dtype?this.getBoolean(o):o;else if(i&&i.dtype)switch(i.dtype){case"float32":l=e;break;case"int32":l=Math.floor(e);break;case"bool":l=this.getBoolean(o);break;default:l=e}else l=e}i&&i.isLabel?s[a]=l:n[a]=l}}return 0===Object.keys(s).length?n:{xs:n,ys:s}}getBoolean(e){return"1"===e||"true"===e.toLowerCase()?1:0}parseRow(e,t=!0){const n=[];let s=0;const r=e.length;let a=eI;for(let t=0;t<r;t++)switch(a){case eI:switch(e.charAt(t)){case QN:s=t+1,a=nI;break;case this.delimiter:if(s=t+1," "===this.delimiter&&this.delimWhitespace)break;n.push(""),a=eI;break;default:a=tI,s=t}break;case tI:switch(e.charAt(t)){case this.delimiter:n.push(e.substring(s,t)),a=eI,s=t+1}break;case nI:switch(e.charAt(t)){case QN:a=sI}break;case sI:switch(e.charAt(t)){case this.delimiter:n.push(e.substring(s,t-1)),a=eI,s=t+1;break;case QN:a=nI;break;default:a=rI}break;case rI:switch(e.charAt(t)){case QN:a=nI}}if(a===sI?n.push(e.substring(s,r-1)):n.push(e.substring(s)),t&&n.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);return n}}class iI extends EN{constructor(e){super(),this.microphoneConfig=e,this.isClosed=!1,this.fftSize=e.fftSize||1024;const t=Math.log2(this.fftSize);if(this.fftSize<0||t<4||t>14||!Number.isInteger(t))throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);if(this.numFrames=e.numFramesPerSpectrogram||43,this.sampleRateHz=e.sampleRateHz,this.columnTruncateLength=e.columnTruncateLength||this.fftSize,this.audioTrackConstraints=e.audioTrackConstraints,this.smoothingTimeConstant=e.smoothingTimeConstant||0,this.includeSpectrogram=!1!==e.includeSpectrogram,this.includeWaveform=!0===e.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(e={}){if(Pe().get("IS_NODE"))throw new Error("microphone API is only supported in browser environment.");const t=new iI(e);return await t.start(),t}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(e){throw new Error(`Error thrown while initializing video stream: ${e.message}`)}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const e=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new e,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`)}else this.sampleRateHz=this.audioContext.sampleRate;const t=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,t.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let e,t;const n=await this.getAudioData();if(this.includeSpectrogram){const t=this.flattenQueue(n.freqDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const e=this.flattenQueue(n.timeDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:e,waveform:t},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const e=[],t=[];let n=0;return new Promise((s=>{const r=setInterval((()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&s({freqDataQueue:e,timeDataQueue:t}),e.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),t.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(r),s({freqDataQueue:e,timeDataQueue:t}))}),this.fftSize/this.sampleRateHz*1e3)}))}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(e){const t=e[0].length,n=new Float32Array(e.length*t);return e.forEach(((e,s)=>n.set(e,s*t))),n}getTensorFromAudioDataArray(e,t){const n=new Float32Array(se(t));return n.set(e,n.length-e.length),Yr(n,t)}}class oI extends EN{constructor(e,t){if(super(),this.webcamVideoElement=e,this.webcamConfig=t,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=lh([0],"int32"),this.webcamConfig.centerCrop){const e=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,t=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-e)/2,s=(1-t)/2,r=n+e,a=t+s;this.cropBox=uh([s,n,a,r],[1,4])}else this.cropBox=uh([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(e,t={}){if(Pe().get("IS_NODE"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!e){if(e=document.createElement("video"),!t.resizeWidth||!t.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");e.width=t.resizeWidth,e.height=t.resizeHeight}const n=new oI(e,t);return await n.start(),n}async start(){this.webcamConfig.facingMode&&Q("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,(()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`));try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(e){throw e.message=`Error thrown while initializing video stream: ${e.message}`,e}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(e){console.log(e),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise((e=>{this.webcamVideoElement.onloadedmetadata=()=>{e()}}))}async next(){if(this.isClosed)return{value:null,done:!0};let e;try{e=gi(this.webcamVideoElement)}catch(e){throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(e)}`)}if(!this.resize)return{value:e,done:!1};try{return{value:this.cropAndResizeFrame(e),done:!1}}catch(e){throw new Error(`Error thrown cropping the video: ${e.message}`)}finally{e.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(e){return io((()=>{const t=hu(Ua(e,"float32"),0);let n;n=Cp.cropAndResize(t,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear");const s=n.shape;return vl(n,s.slice(1))}))}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach((e=>e.stop()));try{this.webcamVideoElement.srcObject=null}catch(e){console.log(e),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}class lI{}class uI extends EN{split(e){return new cI(this,e)}}class cI extends uI{constructor(e,t){super(),this.upstream=e,this.impl=new hI(e,t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class hI extends PN{constructor(e,t){super(),this.upstream=e,this.separator=t,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const e=await this.upstream.next();if(e.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const t=e.value.split(this.separator);t[0]=this.carryover+t[0];for(const e of t.slice(0,-1))this.outputQueue.push(e);return this.carryover=t[t.length-1],!0}}class pI extends EN{decodeUTF8(){return new dI(this)}}class dI extends uI{constructor(e){super(),this.upstream=e,this.impl=new fI(e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class fI extends PN{constructor(e){if(super(),this.upstream=e,Pe().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:e}=n(589);this.decoder=new e("utf8")}}summary(){return`${this.upstream.summary()} -> Utf8`}async pump(){const e=await this.upstream.next();let t,n;return!e.done&&(t=e.value,n=Pe().get("IS_BROWSER")?this.decoder.decode(t,{stream:!0}):this.decoder.write(Buffer.from(t.buffer)),this.outputQueue.push(n),!0)}}class mI extends pI{constructor(e,t={}){super(),this.file=e,this.options=t,Q(e instanceof Uint8Array||!!Pe().get("IS_BROWSER")&&(e instanceof File||e instanceof Blob),(()=>"FileChunkIterator only supports File, Blob and Uint8Array right now.")),this.offset=t.offset||0,this.chunkSize=t.chunkSize||1048576}summary(){return`FileChunks ${this.file}`}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const e=new Promise(((e,t)=>{const n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)e(new Uint8Array(this.file.slice(this.offset,n)));else{const s=new FileReader;s.onload=n=>{let r=s.result;if(r instanceof ArrayBuffer&&(r=new Uint8Array(r)),!(r instanceof Uint8Array))return t(new TypeError("FileReader returned unknown type."));e(r)},s.onabort=e=>t(new Error("Aborted")),s.onerror=e=>t(new Error(e.type));const r=this.file.slice(this.offset,n);s.readAsArrayBuffer(r)}this.offset=n}));return{value:await e,done:!1}}}function gI(e){return"string"==typeof e&&"file://"===e.substr(0,7)}class yI extends lI{constructor(e,t={}){super(),this.input=e,this.options=t}async iterator(){if(gI(this.input)&&Pe().get("IS_NODE")){const e=n(993);this.input=e.readFileSync(this.input.substr(7))}return new mI(this.input,this.options)}}class bI extends lI{constructor(e,t={}){super(),this.url=e,this.fileOptions=t}async iterator(){return gI(this.url)?new yI(this.url,this.fileOptions).iterator():async function(e,t={}){let n,s;var r;"string"==typeof e?n=e:(n=e.url,s={method:(r=e).method,headers:r.headers,body:r.body,mode:r.mode,credentials:r.credentials,cache:r.cache,redirect:r.redirect,referrer:r.referrer,integrity:r.integrity});const a=await tr(n,s);if(a.ok){const e=new Uint8Array(await a.arrayBuffer());return new mI(e,t)}throw new Error(a.statusText)}(this.url,this.fileOptions)}}function xI(e,t={}){return new aI(new bI(e),t)}function wI(e){const t=TN(e);return KN((async()=>t))}function kI(e){return KN((async()=>{const t=await e();return TN((()=>t.next()))}))}async function vI(e,t){return oI.create(e,t)}async function NI(e){return iI.create(e)}const II="3.1.0";function $I(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Q("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}const CI=xh;class SI extends G{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new U(this,so())}nextDataId(){return SI.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,Pe().get("IS_NODE")&&Jp("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const s={id:this.nextDataId()};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&Ne(n[0])){const r=n.map((e=>nr(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,s,r){this.data.set(e,{values:t,dtype:s,refCount:r})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);return"complex64"===t?Qp(this.readSync(n.real.dataId),this.readSync(n.imag.dataId)):this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>sr(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Va(e.shape,e.dtype,n)}makeOutput(e,t,n){const s=this.write(e,t,n);return so().makeTensorFromDataId(s,t,n,this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=er();return e(),{kernelMs:er()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){$I([e],"where");const t=this.readSync(e.dataId);return CI(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function TI(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if($I(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=se(i.shape),c=n||i.dtype,h=ge(c,u);for(let e=0;e<u;++e)h[e]=t(l[e],r);return o.makeTensorInfo(i.shape,c,h)}}function EI(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if($I(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=n||i.dtype,c=t(l,u,r);return o.makeTensorInfo(i.shape,u,c)}}SI.nextDataId=0,yo("cpu",(()=>new SI),1);const AI=TI(Bt,(e=>e>=0?e:Math.exp(e)-1)),RI={kernelName:Bt,backendName:"cpu",kernelFunc:AI};function FI(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const DI={kernelName:nn,backendName:"cpu",kernelFunc:FI};function _I(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s;$I([r],"leakyRelu");const i=se(r.shape),o=n.data.get(r.dataId).values,l=me("float32",i);for(let e=0;e<o.length;e++)l[e]=o[e]<0?a*o[e]:o[e];return n.makeTensorInfo(r.shape,"float32",l)}const OI={kernelName:un,backendName:"cpu",kernelFunc:_I};function MI(e){return(t,n,s,r,a)=>{const i=Ho(t,n),o=i.length,l=Ee(i),u=me(a,se(i)),c=t.length,h=n.length,p=Ee(t),d=Ee(n),f=Uo(t,i),m=Uo(n,i);if(f.length+m.length===0)for(let t=0;t<u.length;++t)u[t]=e(s[t%s.length],r[t%r.length]);else for(let t=0;t<u.length;++t){const n=Le(t,o,l),a=n.slice(-c);f.forEach((e=>a[e]=0));const i=Me(a,c,p),g=n.slice(-h);m.forEach((e=>g[e]=0));const y=Me(g,h,d);u[t]=e(s[i],r[y])}return[u,i]}}const LI=MI(((e,t)=>e<0?t*e:e));function zI(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t;$I([s,r],"prelu");const a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,[o,l]=LI(s.shape,r.shape,a,i,s.dtype);return n.makeTensorInfo(l,s.dtype,o)}const BI={kernelName:jn,backendName:"cpu",kernelFunc:zI},PI=TI(Jn,(e=>Math.max(0,e))),WI={kernelName:Jn,backendName:"cpu",kernelFunc:PI},VI=TI(ss,(e=>Math.min(Math.max(0,e),6))),UI={kernelName:ss,backendName:"cpu",kernelFunc:VI};function GI(e,t,n,s,r){if("linear"===n)return FI({inputs:{x:t},backend:e});if("relu"===n)return PI({inputs:{x:t},backend:e});if("elu"===n)return AI({inputs:{x:t},backend:e});if("relu6"===n)return VI({inputs:{x:t},backend:e});if("prelu"===n)return zI({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return _I({inputs:{x:t},backend:e,attrs:{alpha:r}});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function HI(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",a),imag:n.makeTensorInfo(r.shape,"float32",i)},o}const jI={kernelName:gt,backendName:"cpu",kernelFunc:HI};function qI(e,t,n="float32"){if("complex64"===n)return HI({inputs:{real:qI(e,t,"float32"),imag:qI(e,t,"float32")},backend:e});const s=De(se(t),n);return e.makeTensorInfo(t,n,s)}function KI(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.real,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const XI={kernelName:Xn,backendName:"cpu",kernelFunc:KI};function YI(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dtype:a}=s;if("complex64"===a){if("complex64"===r.dtype)return FI({inputs:{x:r},backend:n});const e=qI(n,r.shape,r.dtype),t=YI({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),s=HI({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===r.dtype){const e=KI({inputs:{input:r},backend:n}),t=YI({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!xe(r.dtype,a)){const e=FI({inputs:{x:r},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}if("int32"===a){const e=n.data.get(r.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(r.shape,"int32",t)}if("bool"===a){const e=n.data.get(r.dataId).values,t=Qs([0],r.dtype),[s,a]=MI(((e,t)=>e!==t?1:0))(r.shape,[],e,t,"bool");return n.makeTensorInfo(a,"bool",s)}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${a}`)}const JI={kernelName:dt,backendName:"cpu",kernelFunc:YI};function ZI(e,t,n,s){return null==n?({inputs:n,backend:r})=>{const{a,b:i}=n,o=r;$I([a,i],e);const l=o.data.get(a.dataId).values,u=o.data.get(i.dataId).values,c=s||a.dtype,[h,p]=t(a.shape,i.shape,l,u,c);return o.makeTensorInfo(p,c,h)}:({inputs:e,backend:r})=>{const{a,b:i}=e,o=r;if("complex64"===a.dtype||"complex64"===i.dtype){const e=YI({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),s=t.complexTensorInfos.real,r=t.complexTensorInfos.imag,l=o.data.get(s.dataId).values,u=o.data.get(r.dataId).values,c=YI({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),p=h.complexTensorInfos.real,d=h.complexTensorInfos.imag,f=o.data.get(p.dataId).values,m=o.data.get(d.dataId).values,[g,y,b]=n(a.shape,i.shape,l,u,f,m),x=o.makeTensorInfo(b,"float32",g),w=o.makeTensorInfo(b,"float32",y),k=HI({inputs:{real:x,imag:w},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),k}{const e=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,r=s||a.dtype,[l,u]=t(a.shape,i.shape,e,n,r);return o.makeTensorInfo(u,r,l)}}}function QI(e){return(t,n,s,r,a,i)=>{const o=Ho(t,n),l=se(o),u=o.length,c=Ee(o),h=me("float32",l),p=me("float32",l),d=Uo(t,o),f=Uo(n,o),m=Qp(s,r),g=Qp(a,i),y=t.length,b=Ee(t),x=n.length,w=Ee(n);if(d.length+f.length===0)for(let t=0;t<h.length;t++){const n=t%m.length,s=t%g.length,r=e(m[2*n],m[2*n+1],g[2*s],g[2*s+1]);h[t]=r.real,p[t]=r.imag}else for(let t=0;t<h.length;t++){const n=Le(t,u,c),s=n.slice(-y);d.forEach((e=>s[e]=0));const r=Me(s,y,b),a=n.slice(-x);f.forEach((e=>a[e]=0));const i=Me(a,x,w),o=e(m[2*r],m[2*r+1],g[2*i],g[2*i+1]);h[t]=o.real,p[t]=o.imag}return[h,p,o]}}const e$=MI(((e,t)=>e+t)),t$=QI(((e,t,n,s)=>({real:e+n,imag:t+s}))),n$=ZI(Ke,e$,t$),s$={kernelName:Ke,backendName:"cpu",kernelFunc:n$};function r$(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=se(r.shape),o=pe(a,i),l=se(o);Q(i===l,(()=>`The new shape (${o}) has ${l} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(r.dataId);const u=n.data.get(r.dataId);if(null!=u.complexTensorInfos){const e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:r.dataId,shape:o,dtype:r.dtype}}const a$={kernelName:Zn,backendName:"cpu",kernelFunc:r$};function i$(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;$I([r,a],"matMul");const l=r.shape.length,u=a.shape.length,c=i?r.shape[l-2]:r.shape[l-1],h=o?a.shape[u-1]:a.shape[u-2],p=i?r.shape[l-1]:r.shape[l-2],d=o?a.shape[u-2]:a.shape[u-1],f=r.shape.slice(0,-2),m=a.shape.slice(0,-2),g=se(f),y=se(m);Q(l>=2&&u>=2&&(g===y||1===g||1===y),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${f}) and (${m}).`));const b=(g>y?r.shape.slice(0,-2):a.shape.slice(0,-2)).concat([p,d]);Q(c===h,(()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`));const x=o?[y,d,h]:[y,h,d],w=r$({inputs:{x:r},backend:n,attrs:{shape:i?[g,c,p]:[g,p,c]}}),k=r$({inputs:{x:a},backend:n,attrs:{shape:x}}),v=i?w.shape[1]:w.shape[2],N=i?w.shape[2]:w.shape[1],I=o?k.shape[1]:k.shape[2],$=Math.max(g,y),C=n.data.get(w.dataId).values,S=n.data.get(k.dataId).values,T=Ee(w.shape),E=Ee(k.shape),[A,R,F]=i?[T[0],1,T[1]]:[T[0],T[1],1],[D,_,O]=o?[1,E[1],E[0]]:[E[1],1,E[0]],M=N*I,L=Va([$,N,I],w.dtype),z=L.values,B=n.blockSize;for(let e=0;e<$;e++)for(let t=0;t<N;t+=B)for(let n=0;n<I;n+=B)for(let s=0;s<v;s+=B){const r=Math.min(t+B,N),a=Math.min(n+B,I),i=Math.min(s+B,v);for(let o=t;o<r;o++)for(let t=n;t<a;t++){let n=0;for(let r=s;r<i;r++){const s=Math.min(e,g-1)*A,a=Math.min(e,y-1)*O;n+=C[s+o*R+r*F]*S[r*D+t*_+a]}z[e*M+(o*I+t)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),n.makeTensorInfo(b,L.dtype,L.values)}const o$={kernelName:ut,backendName:"cpu",kernelFunc:i$},l$={kernelName:zs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let p,d,f;const m=[];p=i$({inputs:{a:r,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(d=n$({inputs:{a:p,b:i},backend:n}),m.push(p),p=d),c&&(f=GI(n,p,c,o,h),m.push(p),p=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return p}};function u$(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const c$={kernelName:He,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;$I(t,"abs");let s=new Float32Array(se(t.shape));return s=u$(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,"float32")}},h$=TI(je,(e=>Math.acos(e))),p$={kernelName:je,backendName:"cpu",kernelFunc:h$},d$=TI(qe,(e=>Math.acosh(e))),f$={kernelName:qe,backendName:"cpu",kernelFunc:d$},m$={kernelName:Xe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;$I(t,"addN");const r=s.map((e=>n.data.get(e.dataId).values)),a=Va(s[0].shape,s[0].dtype),i=a.values;for(let e=0;e<s.length;e++){const t=r[e];for(let e=0;e<i.length;e++)i[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};function g$(e,t,n,s,r){const a=t.length,i=se(t),o=Ee(t),l=Ee(r),u=me(n,se(r));for(let t=0;t<i;++t){const n=Le(t,a,o),r=new Array(n.length);for(let e=0;e<r.length;e++)r[e]=n[s[e]];u[Me(r,a,l)]=e[t]}return u}function y$(e){const{inputs:t,attrs:n,backend:s}=e,{x:r}=t,{perm:a}=n;$I(r,"transpose");const i=r.shape.length,o=new Array(i);for(let e=0;e<o.length;e++)o[e]=r.shape[a[e]];const l=g$(s.data.get(r.dataId).values,r.shape,r.dtype,a,o);return{dataId:s.write(l,o,r.dtype),shape:o,dtype:r.dtype}}const b$={kernelName:As,backendName:"cpu",kernelFunc:y$},x$={kernelName:Ye,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;$I(r,"all");const o=de(a,r.shape);let l=o;const u=Wu(l,r.shape.length);let c=r;null!=u&&(c=y$({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Uu(l.length,r.shape.length)),Pu("all",l,c.shape.length);const[h,p]=zu(c.shape,l),d=se(p),f=De(se(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];n=n&&s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=r$({inputs:{x:g},backend:n,attrs:{shape:Bu(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},w$={kernelName:Je,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;$I(r,"any");const o=de(a,r.shape);let l=o;const u=Wu(l,r.shape.length);let c=r;null!=u&&(c=y$({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Uu(l.length,r.shape.length)),Pu("any",l,c.shape.length);const[h,p]=zu(c.shape,l),d=se(p),f=De(se(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];n=n||s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=r$({inputs:{x:g},backend:n,attrs:{shape:Bu(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},k$={kernelName:Ze,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;$I(r,"argMax");let i=de(a,r.shape);const o=Wu(i,r.shape.length);let l=r;const u=[];null!=o&&(l=y$({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Uu(i.length,l.shape.length)),i=[i[0]],Pu("argMax",i,l.shape.length);const[c,h]=zu(l.shape,i),p=De(se(c),"int32"),d=se(h),f=n.data.get(l.dataId).values;for(let e=0;e<p.length;++e){const t=e*d;let n=f[t],s=0;for(let e=0;e<d;++e){const r=f[t+e];r>n&&(n=r,s=e)}p[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",p)}},v$={kernelName:Qe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;$I(r,"argMin");let i=de(a,r.shape);const o=Wu(i,r.shape.length);let l=r;const u=[];null!=o&&(l=y$({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Uu(i.length,l.shape.length)),i=[i[0]],Pu("argMin",i,l.shape.length);const[c,h]=zu(l.shape,i),p=De(se(c),"int32"),d=se(h),f=n.data.get(l.dataId).values;for(let e=0;e<p.length;++e){const t=e*d;let n=f[t],s=0;for(let e=0;e<d;++e){const r=f[t+e];r<n&&(n=r,s=e)}p[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",p)}},N$=TI(et,(e=>Math.asin(e))),I$={kernelName:et,backendName:"cpu",kernelFunc:N$},$$=TI(tt,(e=>Math.asinh(e))),C$={kernelName:tt,backendName:"cpu",kernelFunc:$$},S$=TI(nt,(e=>Math.atan(e))),T$={kernelName:nt,backendName:"cpu",kernelFunc:S$},E$=MI(((e,t)=>Math.atan2(e,t))),A$=ZI(rt,E$),R$={kernelName:rt,backendName:"cpu",kernelFunc:A$},F$=TI(st,(e=>Math.atanh(e))),D$={kernelName:st,backendName:"cpu",kernelFunc:F$};function _$(e,t,n,s,r,a){const i=r.strideHeight,o=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,p=r.padInfo.top,d=r.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Va(r.outShape,n),g=m.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],b=r.outShape[2]*r.outShape[3],x=r.outShape[3];for(let t=0;t<r.batchSize;++t){const n=t*y,m=t*s[0];for(let t=0;t<r.inChannels;++t)for(let y=0;y<r.outHeight;++y){const w=y*i-p,k=Math.max(0,w),v=Math.min(r.inHeight,c+w),N=n+y*b;for(let n=0;n<r.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(r.inWidth,h+i);let y=f,b=0,w=0;for(let n=k;n<v;n+=l){const r=m+n*s[1];for(let n=c;n<p;n+=u){const i=e[r+n*s[2]+t];"max"===a&&i>y?y=i:"avg"===a&&(b+=i,w++)}if(isNaN(y))break}g[N+n*x+t]="avg"===a?b/w:y}}}return m}function O$(e,t,n,s,r=!1,a=!1){const i=Va(s.outShape,"int32"),o=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,p=s.effectiveFilterWidth,d=s.padInfo.top,f=s.padInfo.left,m=Va(t,n,e);for(let e=0;e<s.batchSize;++e)for(let t=0;t<s.inChannels;++t)for(let n=0;n<s.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=u;const b=Math.min(s.inHeight,h+g);for(let o=0;o<s.outWidth;++o){const h=o*l-f;let d=h;for(;d<0;)d+=c;const x=Math.min(s.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,k=-1;for(let n=y;n<b;n+=u){const i=n-g;for(let o=d;o<x;o+=c){const l=o-h,u=m.get(e,n,o,t);u>w&&(w=u,k=r?a?((e*s.inHeight+n)*s.inWidth+o)*s.inChannels+t:(n*s.inWidth+o)*s.inChannels+t:i*p+l)}}i.set(k,e,n,o,t)}}return i}function M$(e,t,n,s,r,a){const i=r.strideDepth,o=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,p=r.effectiveFilterDepth,d=r.effectiveFilterHeight,f=r.effectiveFilterWidth,m=r.padInfo.front,g=r.padInfo.top,y=r.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=Va(r.outShape,n),w=x.values,k=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],v=r.outShape[2]*r.outShape[3]*r.outShape[4],N=r.outShape[3]*r.outShape[4],I=r.outShape[4];for(let t=0;t<r.batchSize;++t){const n=t*k,x=t*s[0];for(let t=0;t<r.inChannels;++t)for(let k=0;k<r.outDepth;++k){const $=k*i-m;let C=$;for(;C<0;)C+=u;const S=Math.min(r.inDepth,p+$),T=n+k*v;for(let n=0;n<r.outHeight;++n){const i=n*o-g;let p=i;for(;p<0;)p+=c;const m=Math.min(r.inHeight,d+i),k=T+n*N;for(let n=0;n<r.outWidth;++n){const i=n*l-y;let o=i;for(;o<0;)o+=h;const d=Math.min(r.inWidth,f+i),g=k+n*I;let v=b,N=0,$=0;for(let n=C;n<S;n+=u){const r=x+n*s[1];for(let n=p;n<m;n+=c){const i=r+n*s[2];for(let n=o;n<d;n+=h){const r=e[i+n*s[3]+t];if("max"===a&&r>v?v=r:"avg"===a&&(N+=r,$++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}w[g+t]="avg"===a?N/$:v}}}}return x}const L$={kernelName:at,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;$I(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Q(wl(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=cl(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&ae(u.inShape,u.outShape))c=FI({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=Ee(r.shape),s=_$(e,r.shape,r.dtype,t,u,"avg");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}},z$={kernelName:ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;$I(r,"avgPool3d");const c=hl(r.shape,a,i,1,o,l,u),h=M$(n.data.get(r.dataId).values,r.shape,r.dtype,Ee(r.shape),c,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}},B$={kernelName:lt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;$I([r,a],"avgPool3DGrad");const c=hl(a.shape,i,o,1,l,u),h=c.strideDepth,p=c.strideHeight,d=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,x=c.dilationWidth,w=c.effectiveFilterDepth,k=c.effectiveFilterHeight,v=c.effectiveFilterWidth,N=w-1-c.padInfo.front,I=v-1-c.padInfo.left,$=k-1-c.padInfo.top,C=Va(a.shape,"float32"),S=1/(f*m*g),T=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-N,i=s-$,o=r-I;let l=0;for(let n=0;n<w;n+=y){const s=(a+n)/h;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let n=0;n<k;n+=b){const r=(i+n)/p;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<v;n+=x){const a=(o+n)/d;a<0||a>=c.outWidth||Math.floor(a)!==a||(l+=T.get(e,s,r,a,t))}}}C.set(l*S,e,n,s,r,t)}return n.makeTensorInfo(C.shape,C.dtype,C.values)}},P$={kernelName:it,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;$I([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=cl(i.shape,o,l,1,u),h=c.strideHeight,p=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,k=Va(i.shape,"float32"),v=1/(d*f),N=n.data.get(r.dataId).values,I=Va(r.shape,"float32",N);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const r=n-w,a=s-x;let i=0;for(let n=0;n<y;n+=m){const s=(r+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<b;n+=g){const r=(a+n)/p;r<0||r>=c.outWidth||Math.floor(r)!==r||(i+=I.get(e,s,r,t))}}k.set(i*v,e,n,s,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}},W$={kernelName:Jt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,scale:a,offset:i,mean:o,variance:l}=t;Q(o.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Q(null==i||o.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Q(null==a||o.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),$I([r,o,l,a,i],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=n.data.get(r.dataId).values,h=n.data.get(o.dataId).values,p=n.data.get(l.dataId).values,d=a?n.data.get(a.dataId).values:new Float32Array([1]),f=i?n.data.get(i.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=d.length,b=p.length,x=h.length;let w=0,k=0,v=0,N=0;for(let e=0;e<c.length;++e)m[e]=f[w++]+(c[e]-h[k++])*d[v++]/Math.sqrt(p[N++]+u),w>=g&&(w=0),k>=x&&(k=0),v>=y&&(v=0),N>=b&&(N=0);return n.makeTensorInfo(r.shape,r.dtype,m)}};function V$(e,t,n,s,r){const a=Di(s,t,n),i=se(n),o=Ee(s);if(a){const n=_i(t,o);return"string"===r?e.slice(n,n+i):e.subarray(n,n+i)}const l=Va(s,r,"string"===r?hd(e):e),u=Va(n,r);for(let e=0;e<u.size;++e){const n=u.indexToLoc(e),s=n.map(((e,n)=>e+t[n]));u.set(l.get(...s),...n)}return"string"===r?pd(u.values):u.values}function U$(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s;$I(r,"slice");const[o,l]=Oi(r,a,i);ki(r,o,l);const u=V$(n.data.get(r.dataId).values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,u)}const G$={kernelName:cs,backendName:"cpu",kernelFunc:U$},H$={kernelName:ct,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;$I([r],"batchToSpaceND");const o=a.reduce(((e,t)=>e*t)),l=zp(r.shape,a,o),u=Bp(l.length,a.length),c=Pp(r.shape,a,o),h=Wp(i,a.length),p=Vp(c,i,a.length),d=r$({inputs:{x:r},backend:n,attrs:{shape:l}}),f=y$({inputs:{x:d},backend:n,attrs:{perm:u}}),m=r$({inputs:{x:f},backend:n,attrs:{shape:c}}),g=U$({inputs:{x:m},backend:n,attrs:{begin:h,size:p}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function j$(e,t,n,s,r){const a=se(s),i=De(r,n);for(let n=0;n<e.length;n++){const s=e[n];if(s<0)throw new Error("Input x must be non-negative!");s>=r||(i[s]+=a>0?t[n]:1)}return i}function q$(e,t,n,s=!1){const r=e.shape[0],a=e.shape[1],i=Va([r,n],t.dtype);for(let o=0;o<r;o++)for(let r=0;r<a;r++){const a=e.get(o,r);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(s?i.set(1,o,a):t.size>0?i.set(i.get(o,a)+t.get(o,r),o,a):i.set(i.get(o,a)+1,o,a))}return i}const K$={kernelName:ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=j$(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}};function X$(e){return(t,n,s)=>{const r=me(n,t.length);for(let n=0;n<t.length;++n)r[n]=e(t[n],s);return r}}const Y$=X$((e=>Math.ceil(e))),J$=EI(ft,Y$),Z$={kernelName:ft,backendName:"cpu",kernelFunc:J$},Q$=TI(mt,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),eC={kernelName:mt,backendName:"cpu",kernelFunc:Q$},tC={kernelName:yt,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(se(t.shape)),r=n.data.get(t.dataId),a=r.complexTensorInfos.real,i=r.complexTensorInfos.imag,o=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values;for(let e=0;e<o.length;e++){const t=o[e],n=l[e];s[e]=Math.hypot(t,n)}return n.makeOutput(s,t.shape,"float32")}};function nC(e,t,n,s){const r=ge(n,se(t));if(s&&"string"!==n){let t=0;e.forEach((e=>{const n=se(e.shape);r.set(e.vals,t),t+=n}))}else{let s=0;e.forEach((e=>{const a="string"===n?hd(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+s;for(let t=0;t<e.shape[1];++t)r[o+t]=a[i++]}s+=e.shape[1]}))}return r}function sC(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.imag,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const rC={kernelName:rn,backendName:"cpu",kernelFunc:sC};function aC(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=de(r,t[0].shape)[0];let i=_p(t.map((e=>e.shape)),a);if(0===se(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>se(e.shape)>0));if(1===o.length)return FI({inputs:{x:o[0]},backend:n});if(Dp(o.map((e=>e.shape)),a),"complex64"===o[0].dtype){const e=o.map((e=>KI({inputs:{input:e},backend:n}))),t=o.map((e=>sC({inputs:{input:e},backend:n}))),s=aC({inputs:e,backend:n,attrs:{axis:a}}),r=aC({inputs:t,backend:n,attrs:{axis:a}}),i=HI({inputs:{real:s,imag:r},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),i}const l=o.map((e=>{const t=se(e.shape.slice(a));return r$({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),u=l.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));i=_p(l.map((e=>e.shape)),1);const c=1===l[0].shape[0],h=nC(u,i,t[0].dtype,c),p=_p(o.map((e=>e.shape)),a),d=n.makeTensorInfo(p,t[0].dtype,h);return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}const iC={kernelName:bt,backendName:"cpu",kernelFunc:aC};function oC(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s;$I([r,a],"conv2d");const h=kl(l),p=pl(r.shape,a.shape,i,u,o,c,!1,h),d=p.filterHeight,f=p.filterWidth,m=p.dilationHeight,g=p.dilationWidth,y=p.padInfo.left,b=p.padInfo.top,x="channelsLast"===p.dataFormat,w=new pr(p.outShape,r.dtype),k=Ee(r.shape),v=Ee(a.shape),N=k[0],I=x?k[1]:k[2],$=x?k[2]:1,C=x?1:k[1],S=w.strides[0],T=x?w.strides[1]:w.strides[2],E=x?w.strides[2]:1,A=x?1:w.strides[1],R=n.data.get(r.dataId).values,F=n.data.get(a.dataId).values,D=w.values;for(let e=0;e<p.batchSize;++e){const t=e*N,n=e*S;for(let e=0;e<p.outHeight;++e){const s=n+e*T,r=e*p.strideHeight-b;for(let e=0;e<d;++e){const n=r+e*m;if(n<0||n>=p.inHeight)continue;const a=e*v[0],i=t+n*I;for(let e=0;e<p.outWidth;++e){const t=s+e*E,n=e*p.strideWidth-y;for(let e=0;e<f;++e){const s=n+e*g;if(s<0||s>=p.inWidth)continue;const r=i+s*$;let o=a+e*v[1];for(let e=0;e<p.inChannels;++e){const n=R[r+e*C];for(let e=0;e<p.outChannels;++e)D[t+e*A]+=n*F[o+e];o+=p.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,D)}const lC={kernelName:xt,backendName:"cpu",kernelFunc:oC},uC={kernelName:wt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;$I([r,a],"conv2dBackpropFilter");const h=kl(l),p=pl(r.shape,c,i,1,o,u,!1,h),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=p,y="channelsLast"===p.dataFormat,b=new pr(p.filterShape,"float32"),x=p.padInfo.left,w=p.padInfo.top,k=n.data.get(r.dataId).values,v=n.data.get(a.dataId).values,N=new pr(r.shape,r.dtype,k),I=new pr(a.shape,a.dtype,v);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/d)),n=Math.min(p.outHeight,(p.inHeight+w-e)/d);for(let s=0;s<g;++s){const r=Math.max(0,Math.ceil((x-s)/f)),a=Math.min(p.outWidth,(p.inWidth+x-s)/f);for(let i=0;i<p.inChannels;++i)for(let o=0;o<p.outChannels;++o){let l=0;for(let u=0;u<p.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*d-w;for(let e=r;e<a;++e){const n=s+e*f-x;l+=y?N.get(u,t,n,i)*I.get(u,c,e,o):N.get(u,i,t,n)*I.get(u,o,c,e)}}b.set(l,e,s,i,o)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},cC={kernelName:kt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s;$I([r,a],"conv2dBackpropInput");const h=Ee(a.shape),p=Ee(r.shape);let d=kl(u);const f=pl(i,a.shape,o,1,l,c,!1,d),m=new pr(f.inShape,"float32"),g=m.values,y=n.data.get(r.dataId).values,b=n.data.get(a.dataId).values,[x,w,k]=h,{batchSize:v,filterHeight:N,filterWidth:I,inChannels:$,inHeight:C,inWidth:S,outChannels:T,outHeight:E,outWidth:A,strideHeight:R,strideWidth:F}=f;d=f.dataFormat;const D=N-1-f.padInfo.top,_=I-1-f.padInfo.left,O="channelsLast"===d,M=m.strides[0],L=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,B=O?1:m.strides[1],P=p[0],W=O?p[1]:p[2],V=O?p[2]:1,U=O?1:p[1];for(let e=0;e<v;++e)for(let t=0;t<$;++t)for(let n=0;n<C;++n){const s=n-D,r=Math.max(0,Math.ceil(s/R)),a=Math.min(E,(N+s)/R);for(let i=0;i<S;++i){const o=i-_,l=Math.max(0,Math.ceil(o/F)),u=Math.min(A,(I+o)/F);let c=0;for(let n=r;n<a;++n){const r=n*R-s;for(let s=l;s<u;++s){const a=P*e+W*n+V*s,i=x*(N-1-r)+w*(I-1-(s*F-o))+k*t;for(let e=0;e<T;++e)c+=y[a+U*e]*b[i+e]}}g[M*e+L*n+z*i+B*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},hC={kernelName:vt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s;$I([r,a],"conv3d");const u=dl(r.shape,a.shape,i,l,o),{filterDepth:c,filterHeight:h,filterWidth:p,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,b=g.left,x=g.top,w=new pr(u.outShape,r.dtype),k=n.data.get(r.dataId).values,v=n.data.get(a.dataId).values,N=w.values,I=Ee(r.shape),$=Ee(a.shape);for(let e=0;e<u.batchSize;++e){const t=e*I[0],n=e*w.strides[0];for(let e=0;e<u.outDepth;++e){const s=n+e*w.strides[1],r=e*u.strideDepth-y;for(let e=0;e<c;++e){const n=r+e*d;if(n<0||n>=u.inDepth)continue;const a=e*$[0],i=t+n*I[1];for(let e=0;e<u.outHeight;++e){const t=s+e*w.strides[2],n=e*u.strideHeight-x;for(let e=0;e<h;++e){const s=n+e*f;if(s<0||s>=u.inHeight)continue;const r=a+e*$[1],o=i+s*I[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,s=e*u.strideWidth-b;for(let e=0;e<p;++e){const t=s+e*m;if(t<0||t>=u.inWidth)continue;const a=r+e*$[2],i=o+t*u.inChannels;let l=a;for(let e=0;e<u.inChannels;++e){const t=k[i+e];for(let e=0;e<u.outChannels;++e)N[n+e]+=t*v[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},pC={kernelName:Nt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s;$I([r,a],"conv3dBackpropFilterV2");const u=Ee(r.shape),c=Ee(a.shape),h=dl(r.shape,l,i,1,o),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=new pr(h.filterShape,"float32"),x=b.values,[w,k,v,N]=b.strides,I=n.data.get(a.dataId).values,[$,C,S,T]=c,E=n.data.get(r.dataId).values,[A,R,F,D]=u,_=h.padInfo.front,O=h.padInfo.left,M=h.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((_-e)/p)),n=Math.min(h.outDepth,(h.inDepth+_-e)/p),s=e*w;for(let r=0;r<g;++r){const a=Math.max(0,Math.ceil((M-r)/d)),i=Math.min(h.outHeight,(h.inHeight+M-r)/d),o=r*k+s;for(let s=0;s<y;++s){const l=Math.max(0,Math.ceil((O-s)/f)),u=Math.min(h.outWidth,(h.inWidth+O-s)/f),c=s*v+o;for(let o=0;o<h.inChannels;++o){const m=o*N+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*A,y=m*$;for(let m=t;m<n;++m){const t=(e+m*p-_)*R+h,n=m*C+y;for(let e=a;e<i;++e){const a=(r+e*d-M)*F+t,i=e*S+n;for(let e=l;e<u;++e){const t=e*T+i;g+=E[(s+e*f-O)*D+a+o]*I[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},dC={kernelName:It,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s;$I([r],"conv3dBackpropInputV2");const u=Ee(r.shape),c=Ee(a.shape),h=dl(l,a.shape,o,1,i),p=new pr(h.inShape,"float32"),d=p.values,[f,m,g,y]=p.strides,b=n.data.get(r.dataId).values,[x,w,k,v]=u,N=n.data.get(a.dataId).values,[I,$,C,S]=c,{batchSize:T,filterDepth:E,filterHeight:A,filterWidth:R,inChannels:F,inDepth:D,inHeight:_,inWidth:O,outChannels:M,outDepth:L,outHeight:z,outWidth:B,strideDepth:P,strideHeight:W,strideWidth:V}=h,U=E-1-h.padInfo.front,G=A-1-h.padInfo.top,H=R-1-h.padInfo.left;for(let e=0;e<T;++e)for(let t=0;t<F;++t)for(let n=0;n<D;++n){const s=n-U,r=Math.max(0,Math.ceil(s/P)),a=Math.min(L,(E+s)/P);for(let i=0;i<_;++i){const o=i-G,l=Math.max(0,Math.ceil(o/W)),u=Math.min(z,(A+o)/W);for(let c=0;c<O;++c){const h=c-H,p=Math.max(0,Math.ceil(h/V)),T=Math.min(B,(R+h)/V);let F=0;for(let n=r;n<a;++n){const r=n*P-s;for(let s=l;s<u;++s){const a=s*W-o;for(let i=p;i<T;++i){const o=x*e+w*n+k*s+v*i,l=I*(E-1-r)+$*(A-1-a)+C*(R-1-(i*V-h))+S*t;for(let e=0;e<M;++e)F+=b[o+e]*N[l+e]}}}d[f*e+m*n+g*i+y*c+t]=F}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},fC=TI($t,(e=>Math.cos(e))),mC={kernelName:$t,backendName:"cpu",kernelFunc:fC},gC=TI(Ct,(e=>Math.cosh(e))),yC={kernelName:Ct,backendName:"cpu",kernelFunc:gC},bC={kernelName:Tt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,[c,h,p,d]=r.shape,f=a.shape[0],[m,g]=o,y=Va([f,m,g,d],"float32"),b=n.data.get(a.dataId).values,x=n.data.get(i.dataId).values,w=n.data.get(r.dataId).values,k=Ee(r.shape),v=Ee(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],s=b[t+1],r=b[t+2],a=b[t+3],i=x[e];if(i>=c)continue;const o=m>1?(r-n)*(h-1)/(m-1):0,f=g>1?(a-s)*(p-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(h-1)+t*o:.5*(n+r)*(h-1);if(c<0||c>h-1)for(let n=0;n<g;n++)for(let s=0;s<d;s++){const r=s+n*v[2]+t*v[1]+e*v[0];y.values[r]=u}else if("bilinear"===l){const n=Math.floor(c),r=Math.ceil(c),o=c-n;for(let l=0;l<g;l++){const c=g>1?s*(p-1)+l*f:.5*(s+a)*(p-1);if(c<0||c>p-1){for(let n=0;n<d;n++){const s=n+l*v[2]+t*v[1]+e*v[0];y.values[s]=u}continue}const h=Math.floor(c),m=Math.ceil(c),b=c-h;for(let s=0;s<d;s++){let a=s+h*k[2]+n*k[1]+i*k[0];const u=w[a];a=s+m*k[2]+n*k[1]+i*k[0];const c=w[a];a=s+h*k[2]+r*k[1]+i*k[0];const p=w[a];a=s+m*k[2]+r*k[1]+i*k[0];const d=u+(c-u)*b,f=p+(w[a]-p)*b;a=s+l*v[2]+t*v[1]+e*v[0],y.values[a]=d+(f-d)*o}}}else for(let n=0;n<g;++n){const r=g>1?s*(p-1)+n*f:.5*(s+a)*(p-1);if(r<0||r>p-1){for(let s=0;s<d;s++){const r=s+n*v[2]+t*v[1]+e*v[0];y.values[r]=u}continue}const o=Math.round(r),l=Math.round(c);for(let s=0;s<d;s++){const r=s+o*k[2]+l*k[1]+i*k[0],a=s+n*v[2]+t*v[1]+e*v[0];y.values[a]=w[r]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},xC={kernelName:St,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;$I(r,"cumsum");const l=Wu([a],r.shape.length);let u=r;null!=l&&(u=y$({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=Uu(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=$r(u.dtype,"int32"),p=De(se(u.shape),h),d=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)p[n]=i?0:d[n];else{const s=m(e,t-1);p[n]=i?d[s]+p[s]:d[n]+p[s]}}const g=n.makeTensorInfo(u.shape,h,p);if(null!=l){const e=y$({inputs:{x:g},backend:n,attrs:{perm:Vu(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}},wC={kernelName:Et,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=j$(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===r.shape.length){const e=q$(n.bufferSync(r),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}},kC={kernelName:At,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s;Q("NHWC"===i,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`)),Q(a>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${a}`));const o=r.shape[0],l=r.shape[1],u=r.shape[2],c=r.shape[3],h=l*a,p=u*a,d=c/(a*a),f=n.data.get(r.dataId).values,m=new Float32Array(o*h*p*d);let g=0;for(let e=0;e<o;++e)for(let t=0;t<h;++t){const n=Math.floor(t/a),s=t%a;for(let t=0;t<p;++t){const r=Math.floor(t/a),i=(s*a+t%a)*d;for(let t=0;t<d;++t){const s=t+i+c*(r+u*(n+l*e));m[g++]=f[s]}}}return n.makeTensorInfo([o,h,p,d],r.dtype,m)}};function vC(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;$I([r,a],"depthwiseConv2DNative");const c=Ee(r.shape),h=Ee(a.shape);let p=l;null==p&&(p=[1,1]),Q(wl(i,p),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`));const d=pl(r.shape,a.shape,i,p,o,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=d,x=b.left,w=b.top,k=d.outChannels/d.inChannels,v=new pr(d.outShape,r.dtype),N=n.data.get(r.dataId).values,I=n.data.get(a.dataId).values,$=v.values;for(let e=0;e<d.batchSize;++e){const t=e*c[0],n=e*v.strides[0];for(let e=0;e<d.outHeight;++e){const s=n+e*v.strides[1],r=e*d.strideHeight-x;for(let e=0;e<f;++e){const n=r+e*g;if(n<0||n>=d.inHeight)continue;const a=e*h[0],i=t+n*c[1];for(let e=0;e<d.outWidth;++e){const t=s+e*v.strides[2],n=e*d.strideWidth-w;for(let e=0;e<m;++e){const s=n+e*y;if(s<0||s>=d.inWidth)continue;const r=a+e*h[1],o=i+s*d.inChannels;let l=t,u=r;for(let e=0;e<d.inChannels;++e){const t=N[o+e];for(let e=0;e<k;++e)$[l+e]+=t*I[u+e];l+=k,u+=k}}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}const NC={kernelName:Rt,backendName:"cpu",kernelFunc:vC},IC={kernelName:Ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s;$I([r,a],"depthwiseConv2dNativeBackpropFilter");const h=pl(r.shape,c,i,o,l,u,!0),{strideHeight:p,strideWidth:d,filterHeight:f,filterWidth:m}=h,g=new pr(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,x=h.outChannels/h.inChannels,w=n.data.get(r.dataId).values,k=new pr(r.shape,r.dtype,w),v=n.data.get(a.dataId).values,N=new pr(a.shape,a.dtype,v);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/p)),n=Math.min(h.outHeight,(h.inHeight+b-e)/p);for(let s=0;s<m;++s){const r=Math.max(0,Math.ceil((y-s)/d)),a=Math.min(h.outWidth,(h.inWidth+y-s)/d);for(let i=0;i<h.outChannels;++i){const o=Math.trunc(i/x),l=i%x;let u=0;for(let l=0;l<h.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*p-b;for(let e=r;e<a;++e){const n=s+e*d-y;u+=k.get(l,t,n,o)*N.get(l,c,e,i)}}g.set(u,e,s,o,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},$C={kernelName:Dt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s;$I([r,a],"depthwiseConv2DNativeBackpropInput");const h=Ee(r.shape),p=Ee(a.shape),d=pl(c,a.shape,i,o,l,u,!0),f=new pr(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(r.dataId).values,[w,k,v]=h,N=n.data.get(a.dataId).values,[I,$,C]=p,{batchSize:S,filterHeight:T,filterWidth:E,inChannels:A,inHeight:R,inWidth:F,outChannels:D,outHeight:_,outWidth:O,strideHeight:M,strideWidth:L}=d,z=T-1-d.padInfo.top,B=E-1-d.padInfo.left,P=D/A;for(let e=0;e<S;++e)for(let t=0;t<A;++t)for(let n=0;n<R;++n){const s=n-z,r=Math.max(0,Math.ceil(s/M)),a=Math.min(_,(T+s)/M);for(let i=0;i<F;++i){const o=i-B,l=Math.max(0,Math.ceil(o/L)),u=Math.min(O,(E+o)/L);let c=0;for(let n=r;n<a;++n){const r=n*M-s;for(let s=l;s<u;++s){const a=w*e+k*n+v*s,i=I*(T-1-r)+$*(E-1-(s*L-o))+C*t;for(let e=0;e<P;++e)c+=x[a+(t*P+e)]*N[i+e]}}m[g*e+y*n+b*i+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},CC={kernelName:_t,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=se(s.shape),a=n.data.get(s.dataId).values,i=Va([r,r],s.dtype),o=i.values;for(let e=0;e<a.length;e++)o[e*r+e]=a[e];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,i.dtype,i.values)}},SC={kernelName:Ot,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r}=e,{strides:a,pad:i,dilations:o}=n,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,p=r.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:k,filterHeight:v,filterWidth:N,dilationHeight:I,dilationWidth:$,outShape:C}=ul(s.shape,r.shape,a,i,"NHWC",o),S=se(C),T=C.length,E=ge(s.dtype,S);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let a=0;a<b;++a){const i=a*k-x.left;for(let o=0;o<g;++o){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<v;++t){const a=n+t*I;if(a>=0&&a<f)for(let n=0;n<N;++n){const d=i+n*$;if(d>=0&&d<m){const i=Me([e,a,d,o],c,Ee(s.shape)),f=Me([t,n,o],p,Ee(r.shape)),m=u[i]+h[f];m>l&&(l=m)}}}E[Me([e,t,a,o],T,Ee(C))]=l}}}return{dataId:l.write(Qs(E,s.dtype),C,s.dtype),shape:C,dtype:s.dtype}}},TC={kernelName:Lt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=Re(s.shape,u.data.get(s.dataId).values),h=Re(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:N,dilationWidth:I,outShape:$}=ul(s.shape,r.shape,i,o,"NHWC",l);Q(a.rank===$.length,(()=>`Error in ${Lt}, dy must have the same rank as output ${$.length}, but got ${a.rank}`));const C=Re($,u.data.get(a.dataId).values),S=_e(r.shape,r.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let s=0;s<y;++s){const r=s*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let t=0;t<k;++t){const s=n+t*N;if(s>=0&&s<d)for(let n=0;n<v;++n){const u=r+n*I;if(u>=0&&u<f){const r=c[e][s][u][a]+h[t][n][a];r>i&&(i=r,o=t,l=n)}}}S[o][l][a]+=C[e][t][s][a]}}}return{dataId:u.write(Qs(S,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},EC={kernelName:Mt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=Re(s.shape,u.data.get(s.dataId).values),h=Re(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:N,dilationWidth:I,outShape:$}=ul(s.shape,r.shape,i,o,"NHWC",l);Q(a.rank===$.length,(()=>`Error in ${Mt}, dy must have the same rank as output ${$.length}, but got ${a.rank}`));const C=Re($,u.data.get(a.dataId).values),S=_e(s.shape,s.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let s=0;s<y;++s){const r=s*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=r<0?0:r;for(let t=0;t<k;++t){const s=n+t*N;if(s>=0&&s<d)for(let n=0;n<v;++n){const u=r+n*I;if(u>=0&&u<f){const r=c[e][s][u][a]+h[t][n][a];r>i&&(i=r,o=s,l=u)}}}S[e][o][l][a]+=C[e][t][s][a]}}}return{dataId:u.write(Qs(S,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},AC={kernelName:Pt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:r}=t;$I([s,r],"eluGrad");const a=new Float32Array(se(r.shape)),i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values;for(let e=0;e<i.length;++e){const t=i[e];a[e]=t>=1?o[e]:o[e]*(t+1)}return n.makeTensorInfo(r.shape,"float32",a)}},RC=MI(((e,t)=>e===t?1:0)),FC=ZI(Vt,RC,null,"bool"),DC={kernelName:Vt,backendName:"cpu",kernelFunc:FC},_C=Hp,OC=jp,MC=qp,LC=Kp,zC=Xp,BC=Yp,PC=TI(Wt,(e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+_C*n);return t*(1-((((BC*s+zC)*s+LC)*s+MC)*s+OC)*s*Math.exp(-n*n))})),WC={kernelName:Wt,backendName:"cpu",kernelFunc:PC},VC=X$((e=>Math.exp(e))),UC=EI(Ut,VC),GC={kernelName:Ut,backendName:"cpu",kernelFunc:UC};function HC(e){const{inputs:t,backend:n,attrs:s}=e,{input:r}=t,{dim:a}=s,i=r.shape.length,o=r.shape.slice();let l=a;return a<0&&(Q(-(i+1)<=a,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+a+1),o.splice(l,0,1),r$({inputs:{x:r},backend:n,attrs:{shape:o}})}const jC={kernelName:Gt,backendName:"cpu",kernelFunc:HC},qC=X$((e=>Math.expm1(e))),KC=EI(Ht,qC),XC={kernelName:Ht,backendName:"cpu",kernelFunc:KC},YC=MI(((e,t)=>e*t)),JC=QI(((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n}))),ZC=ZI(_n,YC,JC),QC={kernelName:_n,backendName:"cpu",kernelFunc:ZC},eS=MI(((e,t)=>e/t)),tS=ZI(zt,eS),nS={kernelName:zt,backendName:"cpu",kernelFunc:tS},sS=MI(((e,t)=>e-t)),rS=QI(((e,t,n,s)=>({real:e-n,imag:t-s}))),aS=ZI(Ns,sS,rS),iS={kernelName:Ns,backendName:"cpu",kernelFunc:aS};function oS(e,t,n){const s=e.shape,r=s[0],a=s[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[r,a],c=se(u),h=me("float32",c),p=me("float32",c);for(let e=0;e<r;e++){const s=U$({inputs:{x:o},backend:n,attrs:{begin:[e,0],size:[1,a]}}),r=U$({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,a]}}),i=HI({inputs:{real:s,imag:r},backend:n}),{real:u,imag:c}=lS(i,t,n),d=Qp(u,c);for(let t=0;t<a;t++){const n=sd(d,t);h[e*a+t]=n.real,p[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i)}const d=n.makeTensorInfo(u,"float32",h),f=n.makeTensorInfo(u,"float32",p),m=HI({inputs:{real:d,imag:f},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}function lS(e,t,n){const s=se(e.shape),r=n.data.get(e.dataId),a=n.data.get(r.complexTensorInfos.real.dataId).values,i=n.data.get(r.complexTensorInfos.imag.dataId).values;if(0==((o=s)&o-1)){const r=uS(a,i,s,t,n),o=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(o,"float32",r.real),t=n.makeTensorInfo(o,"float32",r.imag),a=n.makeTensorInfo([],"float32",Zs(s,"float32")),i=FI({inputs:{x:a},backend:n}),l=nS.kernelFunc({inputs:{a:e,b:a},backend:n}),u=nS.kernelFunc({inputs:{a:t,b:i},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return r}return ed(function(e,t,n){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let a=0,i=0;for(let s=0;s<t;s++){const o=id(r*s,t,n),l=sd(e,s);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=t,i/=t),rd(s,a,i,r)}return s}(Qp(a,i),s,t));var o}function uS(e,t,n,s,r){if(1===n)return{real:e,imag:t};const a=Qp(e,t),i=n/2,o=td(a),l=o.real,u=o.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),p=r.makeTensorInfo(c,"float32",u),d=HI({inputs:{real:h,imag:p},backend:r}),f=nd(a),m=f.real,g=f.imag,y=[m.length],b=r.makeTensorInfo(y,"float32",m),x=r.makeTensorInfo(y,"float32",g),w=HI({inputs:{real:b,imag:x},backend:r}),k=uS(l,u,i,s,r),v=k.real,N=k.imag,I=[v.length],$=r.makeTensorInfo(I,"float32",v),C=r.makeTensorInfo(I,"float32",N),S=HI({inputs:{real:$,imag:C},backend:r}),T=uS(m,g,i,s,r),E=T.real,A=T.imag,R=[E.length],F=r.makeTensorInfo(R,"float32",E),D=r.makeTensorInfo(R,"float32",A),_=HI({inputs:{real:F,imag:D},backend:r}),O=ad(n,s),M=[O.real.length],L=r.makeTensorInfo(M,"float32",O.real),z=r.makeTensorInfo(M,"float32",O.imag),B=HI({inputs:{real:L,imag:z},backend:r}),P=ZC({inputs:{a:B,b:_},backend:r}),W=n$({inputs:{a:S,b:P},backend:r}),V=aS({inputs:{a:S,b:P},backend:r}),U=KI({inputs:{input:W},backend:r}),G=KI({inputs:{input:V},backend:r}),H=sC({inputs:{input:W},backend:r}),j=sC({inputs:{input:V},backend:r}),q=aC({inputs:[U,G],backend:r,attrs:{axis:0}}),K=aC({inputs:[H,j],backend:r,attrs:{axis:0}}),X=r.data.get(q.dataId).values,Y=r.data.get(K.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(w),r.disposeIntermediateTensorInfo($),r.disposeIntermediateTensorInfo(C),r.disposeIntermediateTensorInfo(S),r.disposeIntermediateTensorInfo(F),r.disposeIntermediateTensorInfo(D),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(L),r.disposeIntermediateTensorInfo(z),r.disposeIntermediateTensorInfo(B),r.disposeIntermediateTensorInfo(P),r.disposeIntermediateTensorInfo(W),r.disposeIntermediateTensorInfo(V),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(G),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(q),r.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const cS={kernelName:jt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=se(s.shape),a=s.shape[s.shape.length-1],i=r$({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=oS(i,!1,n),l=r$({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}};function hS(e){const{backend:t,attrs:n}=e,{shape:s,value:r,dtype:a}=n,i=a||Ce(r),o=ge(i,se(s));return function(e,t,n){e.fill(t)}(o,r),t.makeTensorInfo(s,i,o)}const pS={kernelName:qt,backendName:"cpu",kernelFunc:hS},dS={kernelName:Kt,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,r=n,a=me(s.dtype,se(s.shape)),[i,o,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let e=0;e<i;e++){const t=e*l*o*u;for(let e=0;e<o;e++){const n=e*(l*u);for(let s=0;s<l;s++){const r=s*u;for(let o=0;o<u;o++){const h=[i,e,s,o][2],p=Math.round(l-h),d=t+n+r+o;let f=c[d];p>=0&&p<l&&(f=c[t+n+p*u+o]),a[d]=f}}}}return{dataId:r.write(a,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},fS=X$((e=>Math.floor(e))),mS=EI(Xt,fS),gS={kernelName:Xt,backendName:"cpu",kernelFunc:mS},yS=MI(((e,t)=>Math.floor(e/t))),bS=ZI(Yt,yS,null,"int32"),xS={kernelName:Yt,backendName:"cpu",kernelFunc:bS},wS={kernelName:Bs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=oC({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=n$({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=GI(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}},kS={kernelName:Ps,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=vC({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=n$({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=GI(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}},vS={kernelName:Qt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=se(s.shape),i=r.shape,o=i[i.length-1],[l,u,c,h]=yi(s,r);if(0===u)return n.makeTensorInfo(l,s.dtype,[]);const p=Va([u,c],s.dtype),d=n.data.get(r.dataId).values,f=n.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=[];let n=0;for(let s=0;s<o;s++){const r=d[e*o+s];n+=r*h[s],t.push(r)}if(n<0||n>=a/c)throw new Error(`Invalid indices: ${t} does not index into ${s.shape}`);for(let t=0;t<c;t++)p.values[e*c+t]=f[n*c+t]}return n.makeTensorInfo(l,p.dtype,p.values)}};function NS(e,t,n){const s=Va(n,e.dtype);for(let n=0;n<s.size;++n){const r=s.indexToLoc(n).slice(),a=r[0],i=r[2],o=t.locToIndex([a,i]);r[2]=t.values[o];const l=e.locToIndex(r);s.values[n]=e.values[l]}return s}const IS={kernelName:Zt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s;$I([r,a],"gatherV2");let l=o;null==o&&(l=0);const u=se(a.shape),c=cd(r,a,de(i,r.shape)[0],l),h=r$({inputs:{x:r},backend:n,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),p=r$({inputs:{x:a},backend:n,attrs:{shape:[c.batchSize,u/c.batchSize]}}),d=[c.batchSize,c.outerSize,u/c.batchSize,c.sliceSize],f=n.bufferSync(p),m=NS(n.bufferSync(h),f,d);return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.makeTensorInfo(c.outputShape,m.dtype,m.values)}},$S=MI(((e,t)=>e>t?1:0)),CS=ZI(en,$S,null,"bool"),SS={kernelName:en,backendName:"cpu",kernelFunc:CS},TS=MI(((e,t)=>e>=t?1:0)),ES=ZI(tn,TS,null,"bool"),AS={kernelName:tn,backendName:"cpu",kernelFunc:ES},RS={kernelName:sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=se(s.shape),a=s.shape[s.shape.length-1],i=r$({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=oS(i,!0,n),l=r$({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},FS=TI(an,(e=>Number.isFinite(e)?1:0),"bool"),DS={kernelName:an,backendName:"cpu",kernelFunc:FS},_S=TI(on,(e=>Math.abs(e)===1/0?1:0),"bool"),OS={kernelName:on,backendName:"cpu",kernelFunc:_S},MS=TI(ln,(e=>Number.isNaN(e)?1:0),"bool"),LS={kernelName:ln,backendName:"cpu",kernelFunc:MS},zS=MI(((e,t)=>e<t?1:0)),BS=ZI(cn,zS,null,"bool"),PS={kernelName:cn,backendName:"cpu",kernelFunc:BS},WS=MI(((e,t)=>e<=t?1:0)),VS=ZI(hn,WS,null,"bool"),US={kernelName:hn,backendName:"cpu",kernelFunc:VS};function GS(e,t,n){const s=(t-e)/(n-1),r=De(n,"float32");r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+s;return r}const HS={kernelName:pn,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=GS(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},jS=X$((e=>Math.log(e))),qS=EI(dn,jS),KS={kernelName:dn,backendName:"cpu",kernelFunc:qS},XS=TI(fn,(e=>Math.log1p(e))),YS={kernelName:fn,backendName:"cpu",kernelFunc:XS},JS=MI(((e,t)=>e&&t)),ZS=ZI(mn,JS,null,"bool"),QS={kernelName:mn,backendName:"cpu",kernelFunc:ZS},eT=TI(gn,(e=>e?0:1),"bool"),tT={kernelName:gn,backendName:"cpu",kernelFunc:eT},nT=MI(((e,t)=>e||t)),sT=ZI(yn,nT,null,"bool"),rT={kernelName:yn,backendName:"cpu",kernelFunc:sT},aT={kernelName:xn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s;$I(r,"LRN");const u=r.shape[3],c=u-1,h=n.data.get(r.dataId).values,p=se(r.shape),d=new Float32Array(p);function f(e){const t=e%u;let n=e-t+Math.max(0,t-a);const s=e-t+Math.min(t+a,c);let r=0;for(;n<=s;n++){const e=h[n];r+=e*e}return r}for(let e=0;e<p;e++){const t=f(e),n=h[e]*Math.pow(i+o*t,-l);d[e]=n}return n.makeTensorInfo(r.shape,r.dtype,d)}},iT={kernelName:wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s;$I(i,"LRNGrad");const h=se(i.shape),p=i.shape[3],d=n.data.get(i.dataId).values,f=n.data.get(r.dataId).values,m=n.data.get(a.dataId).values,g=new Float32Array(h),y=h;for(let e=0;e<y;e++){const t=e%p,n=e-t+Math.max(0,t-o),s=e-t+Math.min(p,t+o+1);let r=0;for(let e=n;e<s;e++)r+=Math.pow(f[e],2);r=u*r+l;for(let t=n;t<s;t++){let n=-2*u*c*f[t]*m[e]/r;e===t&&(n+=Math.pow(r,-c)),n*=d[e],g[t]+=n}}return n.makeTensorInfo(i.shape,r.dtype,g)}};function oT(e,t,n,s){const r=me(s,se(n));for(let n=0;n<r.length;++n){const s=n*t;let a=e[s];for(let n=0;n<t;++n){const t=e[s+n];t>a&&(a=t)}r[n]=a}return r}function lT(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=n;let l=r.shape;const u=l.length,c=de(a,l);let h=c;const p=Wu(h,u);let d=o.data.get(r.dataId).values;if(null!=p){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[p[t]];d=g$(d,l,r.dtype,p,e),h=Uu(h.length,u),l=e}$I(r,"max"),Pu("max",h,u);const[f,m]=zu(l,h),g=oT(d,se(m),f,r.dtype),y=o.write(g,f,r.dtype);let b=f;return i&&(b=Bu(f,c)),{dataId:y,shape:b,dtype:r.dtype}}const uT={kernelName:kn,backendName:"cpu",kernelFunc:lT},cT=MI(((e,t)=>Math.max(e,t))),hT=ZI(vn,cT),pT={kernelName:vn,backendName:"cpu",kernelFunc:hT},dT={kernelName:Nn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;$I(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Q(wl(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=cl(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&ae(u.inShape,u.outShape))c=FI({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=Ee(r.shape),s=_$(e,r.shape,r.dtype,t,u,"max");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}},fT={kernelName:$n,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;$I(r,"maxPool3d");const c=hl(r.shape,a,i,1,o,l,u),h=M$(n.data.get(r.dataId).values,r.shape,r.dtype,Ee(r.shape),c,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}},mT={kernelName:Cn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;$I([r,a],"maxPool3DGrad");const c=hl(a.shape,i,o,1,l,u),h=function(e,t){const n=Va(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*s-p;let x=b;for(;x<0;)x+=i;const w=Math.min(t.inDepth,u+b);for(let s=0;s<t.outHeight;++s){const u=s*r-d;let p=u;for(;p<0;)p+=o;const k=Math.min(t.inHeight,c+u);for(let r=0;r<t.outWidth;++r){const d=r*a-f;let v=d;for(;v<0;)v+=l;const N=Math.min(t.inWidth,h+d);let I=Number.NEGATIVE_INFINITY,$=-1;for(let t=x;t<w;t+=i){const n=t-b;for(let s=p;s<k;s+=o){const r=s-u;for(let a=v;a<N;a+=l){const i=a-d,o=e.get(m,t,s,a,g);o>=I&&(I=o,$=n*c*h+r*c+i)}}}n.set($,m,y,s,r,g)}}}return n}(n.bufferSync(a),c),p=c.strideDepth,d=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterDepth,x=c.effectiveFilterHeight,w=c.effectiveFilterWidth,k=b-1-c.padInfo.front,v=w-1-c.padInfo.left,N=x-1-c.padInfo.top,I=Va(a.shape,"float32"),$=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-k,i=s-N,o=r-v;let l=0;for(let n=0;n<b;n+=m){const s=(a+n)/p;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let r=0;r<x;r+=g){const a=(i+r)/d;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let i=0;i<w;i+=y){const u=(o+i)/f;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const p=b*x*w-1-h.get(e,s,a,u,t)===n*x*w+r*w+i?1:0;0!==p&&(l+=$.get(e,s,a,u,t)*p)}}}I.set(l,e,n,s,r,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}},gT={kernelName:In,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;$I([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=cl(o.shape,l,u,1,c,h),d=n.data.get(o.dataId).values,f=Va(p.outShape,o.dtype,O$(d,o.shape,o.dtype,p).values),m=p.strideHeight,g=p.strideWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,w=p.effectiveFilterWidth,k=w-1-p.padInfo.left,v=x-1-p.padInfo.top,N=Va(o.shape,"float32"),I=n.data.get(r.dataId).values,$=Va(r.shape,"float32",I);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let s=0;s<p.inWidth;++s){const r=n-v,a=s-k;let i=0;for(let n=0;n<x;n+=y){const s=(r+n)/m;if(!(s<0||s>=p.outHeight||Math.floor(s)!==s))for(let r=0;r<w;r+=b){const o=(a+r)/g;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;const l=x*w-1-f.get(e,s,o,t)===n*w+r?1:0;0!==l&&(i+=$.get(e,s,o,t)*l)}}N.set(i,e,n,s,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}},yT={kernelName:Sn,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;$I(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=cl(s.shape,r,a,[1,1],i),[h,p]=function(e,t,n,s,r){const a=_$(e,0,n,Ee(t),r,"max"),i=O$(e,t,n,r,!0,s);return[a.values,i.values]}(u,s.shape,s.dtype,o,c),d=l.write(h,c.outShape,s.dtype),f=l.write(p,c.outShape,s.dtype);return[{dataId:d,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};function bT(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;let o;$I(r,"sum"),o="bool"===r.dtype?YI({inputs:{x:r},backend:n,attrs:{dtype:"int32"}}):FI({inputs:{x:r},backend:n});const l=o.shape.length,u=de(a,o.shape),c=Wu(u,l);let h=u,p=o;null!=c&&(p=y$({inputs:{x:o},backend:n,attrs:{perm:c}}),h=Uu(h.length,l)),Pu("sum",h,p.shape.length);const[d,f]=zu(p.shape,h);let m=qI(n,d,$r(p.dtype,"int32"));const g=se(f),y=n.data.get(m.dataId).values,b=n.data.get(p.dataId).values;for(let e=0;e<y.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=b[t+e];y[e]=n}if(i){const e=m;m=r$({inputs:{x:m},backend:n,attrs:{shape:Bu(m.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(o),null!=c&&n.disposeIntermediateTensorInfo(p),m}const xT={kernelName:ys,backendName:"cpu",kernelFunc:bT},wT={kernelName:Tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=de(a,r.shape),l=se(zu(r.shape,o)[1]),u=[],c=n.makeTensorInfo([],"float32",new Float32Array([l]));u.push(c);const h=YI({inputs:{x:r},backend:n,attrs:{dtype:"float32"}});u.push(h);const p=tS({inputs:{a:h,b:c},backend:n});u.push(p);const d=bT({inputs:{x:p},backend:n,attrs:{axis:a,keepDims:i}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},kT={kernelName:En,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;$I(r,"min");const o=de(a,r.shape);let l=o;const u=Wu(l,r.shape.length);let c=r;null!=u&&(c=y$({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Uu(l.length,r.shape.length)),Pu("min",l,c.shape.length);const[h,p]=zu(c.shape,l),d=se(p),f=De(se(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];s<n&&(n=s)}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=r$({inputs:{x:g},backend:n,attrs:{shape:Bu(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},vT=MI(((e,t)=>Math.min(e,t))),NT=ZI(An,vT),IT={kernelName:An,backendName:"cpu",kernelFunc:NT},$T={kernelName:Rn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,mode:i}=s;$I(r,"mirrorPad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=a.map(((e,t)=>e[0]+r.shape[t])),c="reflect"===i?0:1,h=n.data.get(r.dataId).values,p=r.shape.length,d=Ee(r.shape),f=se(o),m=o.length,g=Ee(o),y=me(r.dtype,f);for(let e=0;e<f;e++){let t=Le(e,m,g);for(let e=0;e<m;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-c:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+c);t=t.map(((e,t)=>e-l[t]));const n=Me(t,p,d);y[e]=h[n]}return{dataId:n.write(y,o,r.dtype),shape:o,dtype:r.dtype}}},CT=MI(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),ST=ZI(Fn,CT),TT={kernelName:Fn,backendName:"cpu",kernelFunc:ST};function ET(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=r.shape.length;let o=a;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);const l=de([o],r.shape),u=lT({inputs:{x:r},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=Bu(u.shape,l),h=r$({inputs:{x:u},backend:n,attrs:{shape:c}}),p=aS({inputs:{a:r,b:h},backend:n}),d=UC({inputs:{x:p},backend:n}),f=bT({inputs:{x:d},backend:n,attrs:{axis:l,keepDims:!1}}),m=r$({inputs:{x:f},backend:n,attrs:{shape:c}}),g=tS({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const AT={kernelName:ws,backendName:"cpu",kernelFunc:ET},RT={kernelName:Dn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s;$I(r,"multinomial");const l=o?r:ET({inputs:{logits:r},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=n.data.get(l.dataId).values,p=[u,a],d=De(se(p),"int32");for(let e=0;e<u;++e){const t=e*c,n=new Float32Array(c-1);n[0]=h[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+h[t+e];const s=kc.alea(i.toString()),r=e*a;for(let e=0;e<a;++e){const t=s();d[r+e]=n.length;for(let s=0;s<n.length;s++)if(t<n[s]){d[r+e]=s;break}}}return o||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(p,"int32",d)}};function FT(e,t,n){const s=Zs(-1,n);return YC([],t,s,e,n)}const DT={kernelName:On,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;$I(s,"neg");const r=n.data.get(s.dataId).values,[a,i]=FT(r,s.shape,s.dtype);return n.makeTensorInfo(i,s.dtype,a)}},_T=Qh,OT={kernelName:Ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s;$I(r,"NonMaxSuppression");const u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=_T(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},MT=ep,LT={kernelName:zn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s;$I(r,"NonMaxSuppressionPadded");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:p,validOutputs:d}=MT(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},zT=tp,BT={kernelName:Bn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s;$I(r,"NonMaxSuppressionWithScore");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=zT(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},PT=MI(((e,t)=>e!==t?1:0)),WT=ZI(Mn,PT,null,"bool"),VT={kernelName:Mn,backendName:"cpu",kernelFunc:WT},UT={kernelName:Wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{depth:a,onValue:i,offValue:o}=s;$I(r,"oneHot");const l=se(r.shape),u=new Float32Array(l*a);u.fill(o);const c=n.data.get(r.dataId).values;for(let e=0;e<l;++e)c[e]>=0&&c[e]<a&&(u[e*a+c[e]]=i);return n.makeTensorInfo([...r.shape,a],"int32",u)}};function GT(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=KI({inputs:{input:s},backend:n}),t=GT({inputs:{x:e},backend:n}),r=sC({inputs:{input:s},backend:n}),a=GT({inputs:{x:r},backend:n}),i=HI({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return hS({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const HT={kernelName:_s,backendName:"cpu",kernelFunc:GT},jT={kernelName:Pn,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===r.dtype){const t=KI({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=sC({inputs:{input:r},backend:s}),i=GT({inputs:{x:a},backend:s}),o=HI({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return hS({backend:s,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}};function qT(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return HC({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{ee(a,e.shape,"All tensors passed to stack must have matching shapes"),Q(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],l=aC({inputs:t.map((e=>{const t=HC({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}const KT={kernelName:Vn,backendName:"cpu",kernelFunc:qT},XT={kernelName:Un,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s;$I(r,"pad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=n.data.get(r.dataId).values,c=se(r.shape),h=r.shape.length,p=Ee(r.shape),d=se(o),f=o.length,m=Ee(o),g=me(r.dtype,d);0!==i&&g.fill(i);for(let e=0;e<c;e++)g[Me(Le(e,h,p).map(((e,t)=>e+l[t])),f,m)]=u[e];return{dataId:n.write(g,o,r.dtype),shape:o,dtype:r.dtype}}},YT=MI(((e,t)=>Math.pow(e,t))),JT=ZI(Hn,YT),ZT={kernelName:Hn,backendName:"cpu",kernelFunc:JT};function QT(e,t,n,s){const[r,a]=zu(e,s),i=$r(t,"int32"),o=De(se(r),i),l=se(a);for(let e=0;e<o.length;++e){const t=e*l;let s=1;for(let e=0;e<l;++e)s*=n[t+e];o[e]=s}return{outVals:o,outShape:r,outDtype:i}}const eE={kernelName:qn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;$I(r,"prod");const o=r.shape.length,l=de(a,r.shape),u=Wu(l,o);let c=l,h=r;const p=[];null!=u&&(h=y$({inputs:{x:r},backend:n,attrs:{perm:u}}),p.push(h),c=Uu(c.length,o));const d=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=QT(h.shape,h.dtype,d,c);let y=m;return i&&(y=Bu(m,l)),p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function tE(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return De(0,s);const r=De(Math.abs(Math.ceil((t-e)/n)),s);t<e&&1===n&&(n=-1),r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+n;return r}const nE={kernelName:Kn,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,dtype:a,step:i}=n,o=tE(s,r,i,a);return t.makeTensorInfo([o.length],a,o)}},sE=TI(Yn,(e=>1/e)),rE={kernelName:Yn,backendName:"cpu",kernelFunc:sE},aE={kernelName:ts,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;$I(r,"resizeBilinear");const l=Ee(r.shape),[u,c]=o,[h,p,d,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(se([h,u,c,f])),y=[a&&u>1?p-1:p,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c];let x=0;const w=y[0]/b[0],k=y[1]/b[1];for(let e=0;e<h;e++)for(let t=0;t<u;t++){let n;n=i?w*(t+.5)-.5:w*t;const s=Math.max(0,Math.floor(n)),r=n-s,a=Math.min(p-1,Math.ceil(n)),o=e*l[0]+s*l[1],u=e*l[0]+a*l[1];for(let e=0;e<c;e++){let t;t=i?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),s=t-n,a=Math.min(d-1,Math.ceil(t)),c=o+n*l[2],h=u+n*l[2],p=o+a*l[2],y=u+a*l[2];for(let e=0;e<f;e++){const t=m[c+e],n=m[h+e],a=t+(m[p+e]-t)*s,i=a+(n+(m[y+e]-n)*s-a)*r;g[x++]=i}}}return n.makeTensorInfo([h,u,c,f],"float32",g)}},iE={kernelName:ns,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;$I([a,r],"resizeBilinearGrad");const o=Ee(r.shape),[l,u,c,h]=r.shape,[,p,d]=a.shape,f=new Float32Array(l*u*c*h),m=[i&&p>1?u-1:u,i&&d>1?c-1:c],g=[i&&p>1?p-1:p,i&&d>1?d-1:d],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(a.dataId).values;let w=0;for(let e=0;e<l;e++){const t=e*o[0];for(let e=0;e<p;e++){const n=e*y,s=Math.floor(n),r=Math.min(Math.ceil(n),u-1),a=t+s*o[1],i=t+r*o[1],l=n-s,p=1-l;for(let e=0;e<d;e++){const t=e*b,n=Math.floor(t),s=Math.min(Math.ceil(t),c-1),r=t-n,u=1-r,d=a+n*o[2],m=a+s*o[2],g=i+n*o[2],y=i+s*o[2],k=p*u,v=p*r,N=l*u,I=l*r;for(let e=0;e<h;e++){const t=x[w++];f[d+e]+=t*k,f[m+e]+=t*v,f[g+e]+=t*N,f[y+e]+=t*I}}}}return n.makeTensorInfo([l,c,u,h],"float32",f)}},oE={kernelName:Qn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;$I(r,"resizeNearestNeighbor");const l=Ee(r.shape),[u,c]=o,[h,p,d,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(h*u*c*f),y=[a&&u>1?p-1:p,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c],x=y[0]/b[0],w=y[1]/b[1];let k=0;for(let e=0;e<h;e++){const t=e*l[0];for(let e=0;e<u;e++){const n=i?x*(e+.5):x*e;let s=Math.min(p-1,a?Math.round(n):Math.floor(n));i&&(s=Math.max(0,s));const r=t+s*l[1];for(let e=0;e<c;e++){const t=i?w*(e+.5):w*e;let n=Math.min(d-1,a?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));const s=r+n*l[2];for(let e=0;e<f;e++){const t=m[s+e];g[k++]=t}}}}return n.makeTensorInfo([h,u,c,f],r.dtype,g)}},lE={kernelName:es,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;$I([a,r],"resizeNearestNeighborGrad");const o=Ee(r.shape),l=Ee(a.shape),[u,c,h,p]=r.shape,[,d,f]=a.shape,m=new Float32Array(u*c*h*p),g=n.data.get(a.dataId).values,y=[i&&d>1?c-1:c,i&&f>1?h-1:h],b=[i&&d>1?d-1:d,i&&f>1?f-1:f],x=y[0]/b[0],w=y[1]/b[1],k=1/x,v=1/w,N=2*Math.ceil(k)+2,I=2*Math.ceil(v)+2;for(let e=0;e<u;e++){const t=e*o[0];for(let e=0;e<c;e++){const n=t+e*o[1],s=Math.floor(e*k),r=Math.floor(s-N/2);for(let s=0;s<h;s++){const a=n+s*o[2],u=Math.floor(s*v),y=Math.floor(u-I/2);for(let n=0;n<p;n++){let o=0;for(let a=0;a<N;a++){const u=a+r;if(u<0||u>=d)continue;const p=t+u*l[1],m=u*x;if(e===Math.min(c-1,i?Math.round(m):Math.floor(m)))for(let e=0;e<I;e++){const t=e+y;if(t<0||t>=f)continue;const r=p+t*l[2],a=t*w;s===Math.min(h-1,i?Math.round(a):Math.floor(a))&&(o+=g[r+n])}}m[a+n]=o}}}}return n.makeTensorInfo(r.shape,r.dtype,m)}},uE={kernelName:rs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s;$I(r,"reverse");const i=r.shape.length,o=de(a,r.shape);if(0===i)return FI({inputs:{x:r},backend:n});const l=new pr(r.shape,r.dtype),u=n.bufferSync(r);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();o.forEach((e=>n[e]=r.shape[e]-1-n[e])),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},cE={kernelName:Ls,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=me(s.dtype,se(s.shape)),[u,c,h,p]=s.shape,[d,f]=Lp(i,c,h),m=Math.sin(r),g=Math.cos(r),y=o.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=e*h*c*p;for(let e=0;e<c;e++){const n=e*(h*p);for(let s=0;s<h;s++){const r=s*p;for(let i=0;i<p;i++){const o=[u,e,s,i],b=o[2],x=o[1];let w=(b-d)*g-(x-f)*m,k=(b-d)*m+(x-f)*g;w=Math.round(w+d),k=Math.round(k+f);let v=a;"number"!=typeof a&&(v=3===i?255:a[i]),w>=0&&w<h&&k>=0&&k<c&&(v=y[t+k*(h*p)+w*p+i]),l[t+n+r+i]=v}}}}return{dataId:o.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},hE=TI(as,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),pE={kernelName:as,backendName:"cpu",kernelFunc:hE},dE=X$((e=>1/Math.sqrt(e))),fE=EI(is,dE),mE={kernelName:is,backendName:"cpu",kernelFunc:fE};function gE(e,t,n,s,r,a,i,o,l,u){const c=[s/r,r],h=e.values,p=t.values;if(0===s)return Va(n,t.dtype);const d=Va(c,t.dtype);d.values.fill(l);for(let e=0;e<a;e++){const a=[];let l=0;for(let t=0;t<i;t++){const n=h[e*i+t];a.push(n),l+=n*o[t]}if(l<0||l>=s/r)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<r;n++)u?d.values[l*r+n]+=p[e*r+n]:d.values[l*r+n]=0===t.rank?p[0]:p[e*r+n]}return d}const yE={kernelName:os,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=wi(0,r,i),p=gE(n.bufferSync(r),n.bufferSync(a),i,h,u,l,o,c,0,!0);return n.makeTensorInfo(i,p.dtype,p.values)}},bE={kernelName:ls,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t;$I([s,r,a],"select");const i=s.shape.length,o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=$r(r.dtype,a.dtype),h=De(se(r.shape),c);let p=0;const d=0===i||i>1||1===r.shape.length?1:se(r.shape.slice(1));for(let e=0;e<o.length;e++)for(let t=0;t<d;t++)1===o[e]?h[p++]=l[e]:h[p++]=u[e];return n.makeTensorInfo(r.shape,c,h)}},xE=Up,wE=Gp,kE=TI(us,(e=>e>=0?wE*e:xE*(Math.exp(e)-1))),vE={kernelName:us,backendName:"cpu",kernelFunc:kE},NE=TI(fs,(e=>1/(1+Math.exp(-e)))),IE={kernelName:fs,backendName:"cpu",kernelFunc:NE},$E=TI(ds,(e=>e<0?-1:e>0?1:0)),CE={kernelName:ds,backendName:"cpu",kernelFunc:$E},SE=TI(hs,(e=>Math.sin(e))),TE={kernelName:hs,backendName:"cpu",kernelFunc:SE},EE=TI(ps,(e=>Math.sinh(e))),AE={kernelName:ps,backendName:"cpu",kernelFunc:EE},RE=Math.log(1.1920928955078125e-7)+2,FE=TI(ms,(e=>{const t=e>-RE,n=e<RE,s=Math.exp(e);let r;return r=n?s:t?e:Math.log(1+s),r})),DE={kernelName:ms,backendName:"cpu",kernelFunc:FE},_E={kernelName:bs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;$I([r],"spaceToBatchND");const o=se(a),l=[[0,0]];l.push(...i);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=XT.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),c=zp(u.shape,a,o,!1),h=Bp(c.length,a.length,!1),p=Pp(u.shape,a,o,!1),d=r$({inputs:{x:u},backend:n,attrs:{shape:c}}),f=y$({inputs:{x:d},backend:n,attrs:{perm:h}}),m=r$({inputs:{x:f},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}},OE={kernelName:Is,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:p}=wi(0,r,o),d=gE(n.bufferSync(r),n.bufferSync(a),o,p,c,u,l,h,n.data.get(i.dataId).values[0],!1);return n.makeTensorInfo(o,d.dtype,d.values)}},ME={kernelName:xs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=de(i,r.shape)[0],l=od(r,a,o),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map((e=>{const t=[...c];t[o]=e;const s=U$({inputs:{x:r},backend:n,attrs:{begin:u,size:t}});return u[o]+=e,s}))}},LE=TI(gs,(e=>Math.sqrt(e))),zE={kernelName:gs,backendName:"cpu",kernelFunc:LE},BE={kernelName:vs,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;$I(n,"square");const r=s.data.get(n.dataId).values,a=new Float32Array(r.length);for(let e=0;e<r.length;++e){const t=r[e];a[e]=t*t}return{dataId:s.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},PE=MI(((e,t)=>{const n=e-t;return n*n})),WE=ZI(ks,PE),VE={kernelName:ks,backendName:"cpu",kernelFunc:WE},UE=TI(Os,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),GE={kernelName:Os,backendName:"cpu",kernelFunc:UE};function HE(e,t,n,s){const r=Va(e,t.dtype);for(let e=0;e<r.size;e++){const a=r.indexToLoc(e),i=new Array(a.length);for(let e=0;e<i.length;e++)i[e]=a[e]*n[e]+s[e];r.set(t.get(...i),...a)}return r}const jE={kernelName:$s,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s;$I(r,"stridedSlice");const{nonStrided:d,$begin:f,$strides:m,size:g,newShape:y,outShape:b}=Mi(r.shape,a,i,o,l,u,c,h,p),x=r$({inputs:{x:r},backend:n,attrs:{shape:y}});let w;if(d){const e=U$({inputs:{x},backend:n,attrs:{begin:f,size:g}});w=r$({inputs:{x:e},backend:n,attrs:{shape:b}}),n.disposeIntermediateTensorInfo(e)}else if(b.some((e=>0===e)))w=n.makeTensorInfo(b,r.dtype,[]);else{const e=HE(b,n.bufferSync(x),m,f);w=n.makeTensorInfo(e.shape,e.dtype,e.values)}const k=r$({inputs:{x:w},backend:n,attrs:{shape:b}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(w),k}},qE=TI(Cs,(e=>Math.tan(e))),KE={kernelName:Cs,backendName:"cpu",kernelFunc:qE},XE=TI(Ss,(e=>Math.tanh(e)));function YE(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const s=Va(n,e.dtype);for(let t=0;t<s.values.length;++t){const n=s.indexToLoc(t),r=new Array(e.rank);for(let t=0;t<r.length;t++)r[t]=n[t]%e.shape[t];const a=e.locToIndex(r);s.values[t]=e.values[a]}return s}function JE(e,t,n,s,r){const a=t[t.length-1],[i,o]=[e.length/a,a],l=me(n,i*s),u=me("int32",i*s);for(let t=0;t<i;t++){const n=t*o,r=e.subarray(n,n+o),a=[];for(let e=0;e<r.length;e++)a.push({value:r[e],index:e});a.sort(((e,t)=>t.value-e.value));const i=t*s,c=l.subarray(i,i+s),h=u.subarray(i,i+s);for(let e=0;e<s;e++)c[e]=a[e].value,h[e]=a[e].index}const c=t.slice();return c[c.length-1]=s,[Va(c,n,l),Va(c,"int32",u)]}function ZE(e,t,n,s){const r=de(t,n)[0],a=[1,n[0],1];for(let e=0;e<r;e++)a[0]*=n[e];a[1]=n[r];for(let e=r+1;e<n.length;e++)a[2]*=n[e];const i={},o=new Int32Array(n[r]),l=new pr(a,s,e),u=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[r];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)e.push(l.get(n,t,s));n=e.join(",")}if(void 0!==i[n])o[t]=i[n];else{const e=Object.keys(i).length;i[n]=e,o[t]=e,u.push(t)}}const h=a.slice();h[1]=Object.keys(i).length;const p=new pr(h,s);u.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)p.set(l.get(n,e,s),n,t,s)}));const d=n.slice();return d[r]=h[1],{outputValues:p.values,outputShape:d,indices:o}}const QE=[l$,c$,p$,f$,s$,m$,x$,w$,k$,v$,I$,C$,T$,R$,D$,L$,z$,B$,P$,o$,W$,H$,K$,JI,Z$,eC,jI,tC,iC,uC,cC,lC,pC,dC,hC,mC,yC,bC,xC,wC,kC,NC,IC,$C,CC,SC,EC,TC,nS,RI,AC,DC,WC,GC,jC,XC,cS,pS,dS,gS,xS,wS,kS,vS,IS,SS,AS,DI,RS,rC,DS,OS,LS,OI,PS,US,HS,KS,YS,QS,tT,rT,aT,iT,pT,dT,fT,mT,gT,yT,uT,wT,kT,IT,$T,TT,RT,QC,DT,OT,LT,BT,VT,UT,jT,KT,XT,ZT,BI,eE,nE,XI,rE,WI,UI,a$,aE,iE,oE,lE,uE,cE,pE,mE,yE,bE,vE,IE,CE,TE,AE,G$,AT,DE,_E,OE,ME,zE,BE,VE,GE,jE,iS,xT,KE,{kernelName:Ss,backendName:"cpu",kernelFunc:XE},{kernelName:Ts,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;$I(r,"tile");const i=YE(n.bufferSync(r),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:Es,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s;$I(r,"topk");const o=n.data.get(r.dataId).values,[l,u]=JE(o,r.shape,r.dtype,a);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},b$,{kernelName:Rs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;$I(a,"unique");const i=s.data.get(a.dataId).values,{outputValues:o,outputShape:l,indices:u}=ZE(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:Fs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r.shape.length,o=r.shape[a],l=new Array(i-1);let u=0;for(let e=0;e<i;e++)e!==a&&(l[u++]=r.shape[e]);const c=new Array(i).fill(0),h=r.shape.slice();h[a]=1;const p=new Array(o);for(let e=0;e<p.length;e++){c[a]=e;const t=U$({inputs:{x:r},backend:n,attrs:{begin:c,size:h}});p[e]=r$({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return p}},{kernelName:Ds,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s;$I(r,"unsortedSegmentSum");const o=[],l=[],u=r.shape.length-a.shape.length;let c=a;for(let e=0;e<u;++e){const t=HC({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,l.push(t)}for(let e=0;e<i;++e){const t=Zs(e,"int32"),s=n.makeTensorInfo([],"int32",t),a=FC({inputs:{a:s,b:c},backend:n}),i=YI({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),u=ZC({inputs:{a:i,b:r},backend:n}),h=bT({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});o.push(h),l.push(s),l.push(a),l.push(i),l.push(u),l.push(h)}const h=qT({inputs:o,backend:n,attrs:{axis:0}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},HT];for(const e of QE)js(e);const eA={},tA={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function nA(e){if(!(e in eA)){const t=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);return t.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete eA[e]}),!1),1===e?t.getContext("webgl",tA)||t.getContext("experimental-webgl",tA):t.getContext("webgl2",tA)}(e);if(null===t)return console.log("Could not get context for WebGL version",e),null;eA[e]=t}const t=eA[e];return t.isContextLost()?(delete eA[e],nA(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),eA[e])}var sA,rA,aA;function iA(e,t){return[t,e]}function oA(e){const t=se(e);return le(Math.ceil(t/4))}function lA(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function uA(e,t){const n=e;let s,r,a,i,o,l,u,c,h,p;return 2===Pe().getNumber("WEBGL_VERSION")?(s=n.R32F,r=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,u=4,c=1,h=n.HALF_FLOAT,p=n.FLOAT):(s=e.RGBA,r=e.RGBA,a=e.RGBA,i=n.RGBA,o=e.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT),l=e.RGBA,{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:p}}function cA(e,t){const n=t();return Pe().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}function hA(e){return!!(Pe().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function pA(e,t){return wA(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(sA||(sA={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(rA||(rA={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(aA||(aA={}));const dA=/ERROR: [0-9]+:([0-9]+):/g;function fA(e,t){if(cA(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function mA(e,t,n,s,r,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&(cA(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,s))),cA(e,(()=>e.vertexAttribPointer(o,r,e.FLOAT,!1,a,i))),cA(e,(()=>e.enableVertexAttribArray(o))),!0)}function gA(e,t,n,s){cA(e,(()=>function(e,t,n){(function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)})(e,n),cA(e,(()=>e.activeTexture(e.TEXTURE0+n))),cA(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,s))),cA(e,(()=>e.uniform1i(n,s)))}function yA(e,t,n){cA(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),cA(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function bA(e,t){cA(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),cA(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function xA(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function wA(e,t,n){const s=cA(e,(()=>t()));if(null==s)throw new Error(n);return s}function kA(e,t=2){return se(e.slice(0,e.length-t))}function vA(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function NA(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[kA(e),...vA(e)]),t}function IA(e){return e%2==0}function $A(e,t){if(ae(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],s=t.slice(-1)[0];if(n===s)return!0;if(IA(n)&&IA(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&IA(e[0])&&IA(t[0])}let CA,SA;function TA(e,t){return null!=e.getExtension(t)}function EA(e){try{if(null!=nA(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function AA(e){const t=uA(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),r}function RA(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Q("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const FA=Pe();function DA(){let e,t,n,s,r,a,i,o,l,u;return 2===Pe().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",r="texture",a="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",r="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:r,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function _A(e,t,n="index"){const s=Ee(t);return s.map(((t,r)=>`int ${e[r]} = ${n} / ${t}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`)).join("")}function OA(e){const t=Ee(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}FA.registerFlag("HAS_WEBGL",(()=>FA.getNumber("WEBGL_VERSION")>0)),FA.registerFlag("WEBGL_VERSION",(()=>EA(2)?2:EA(1)?1:0)),FA.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),FA.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===FA.get("WEBGL_VERSION"))),FA.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),FA.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),FA.registerFlag("WEBGL_PACK",(()=>FA.getBool("HAS_WEBGL"))),FA.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>FA.getBool("WEBGL_PACK"))),FA.registerFlag("WEBGL_PACK_CLIP",(()=>FA.getBool("WEBGL_PACK"))),FA.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>!1)),FA.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>FA.getBool("WEBGL_PACK"))),FA.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>FA.getBool("WEBGL_PACK"))),FA.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>FA.getBool("WEBGL_PACK"))),FA.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>FA.getBool("WEBGL_PACK"))),FA.registerFlag("WEBGL_PACK_REDUCE",(()=>FA.getBool("WEBGL_PACK"))),FA.registerFlag("WEBGL_LAZILY_UNPACK",(()=>FA.getBool("WEBGL_PACK"))),FA.registerFlag("WEBGL_CONV_IM2COL",(()=>FA.getBool("WEBGL_PACK"))),FA.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==CA){const t=nA(e);CA=t.getParameter(t.MAX_TEXTURE_SIZE)}return CA}(FA.getNumber("WEBGL_VERSION")))),FA.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==SA){const t=nA(e);SA=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,SA)}(FA.getNumber("WEBGL_VERSION")))),FA.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=FA.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=nA(e);return t=TA(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:TA(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),FA.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>FA.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!zr())),FA.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=nA(e);if(1===e){if(!TA(t,"OES_texture_float"))return!1}else if(!TA(t,"EXT_color_buffer_float"))return!1;return AA(t)}(FA.getNumber("WEBGL_VERSION")))),FA.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!FA.getBool("WEBGL_FORCE_F16_TEXTURES")&&FA.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),FA.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>function(e){if(0===e)return!1;const t=nA(e);if(1!==e){if(TA(t,"EXT_color_buffer_float"))return AA(t);const e="EXT_color_buffer_half_float";if(TA(t,e)){const n=t.getExtension(e);return function(e,t){const n=uA(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(r),a}(t,n)}return!1}return!!TA(t,"OES_texture_float")&&!!TA(t,"WEBGL_color_buffer_float")&&AA(t)}(FA.getNumber("WEBGL_VERSION")))),FA.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=FA.getNumber("WEBGL_VERSION"))&&null!=nA(e).fenceSync;var e})),FA.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>FA.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),FA.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)}));const MA="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";class LA{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=sA.DENSE;const t=oA(e),n=DA();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${_A(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class zA{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=sA.DENSE;const t=oA(e),n=DA();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${_A(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class BA{constructor(e){this.variableNames=["A"],this.outTexUsage=rA.DOWNLOAD;const t=DA();this.outputShape=e,this.userCode=`\n      ${MA}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class PA{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=rA.DOWNLOAD;const t=DA();this.outputShape=e,this.userCode=`\n      ${MA}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class WA{constructor(e,t,n=!1){this.variableNames=["A"];const s=DA(),[r,a]=t;this.outputShape=e;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${OA(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${r}.0);\n        vec4 values = ${s.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${s.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class VA{constructor(e,t,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const s=DA(),[r,a]=t;this.outputShape=e;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let n=0;n<=1;n++){const o=2*t+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${e[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${t} < ${e[1]}) {\n              localCoords[1] += ${t};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${r}.0);\n              values = ${s.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${OA(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${s.output} = ${o};\n      }\n    `}}function UA(e,t,n,s,r,a){!function(e,t){const n=Pe().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return wA(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return cA(e,(()=>e.bindTexture(o,i))),cA(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),cA(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),cA(e,(()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST))),cA(e,(()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST))),cA(e,(()=>e.texImage2D(o,0,s,t,n,0,r,a,null))),cA(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),i}function GA(e){return e.internalFormatFloat}function HA(e){return e.internalFormatHalfFloat}function jA(e){return e.downloadTextureFormat}function qA(e){return e.internalFormatPackedFloat}function KA(e){return e.internalFormatPackedHalfFloat}class XA{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=Pe().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){eA[e]=t}(t,e)):this.gl=nA(t);let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(1===Pe().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=pA(this.gl,e),TA(this.gl,t))this.textureHalfFloatExtension=pA(this.gl,t);else if(Pe().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),TA(this.gl,s))this.colorBufferHalfFloatExtension=pA(this.gl,s);else if(Pe().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",TA(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!TA(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=function(e){return function(e,t){const n=wA(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return cA(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),cA(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(e){return function(e,t){const n=wA(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return cA(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),cA(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(e){return wA(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=uA(this.gl,this.textureHalfFloatExtension)}get debug(){return Pe().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;cA(e,(()=>e.finish())),cA(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),cA(e,(()=>e.deleteFramebuffer(this.framebuffer))),cA(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),cA(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),cA(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=iA(t,n);return UA(e,r,a,GA(s),s.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=iA(t,n);return UA(e,r,a,HA(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=iA(t,n);return UA(e,r,a,jA(s),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){cA(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?cA(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):cA(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),cA(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),function(e,t,n,s,r,a){let i,o,l;cA(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),r instanceof Uint8Array?(i=new Uint8Array(n*s*4),o=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*s*4),o=e.FLOAT,l=a.internalFormatPackedFloat),i.set(r),cA(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,o,i))),cA(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=lA(t,n);return UA(e,r,a,KA(s),e.RGBA,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=lA(t,n);return UA(e,r,a,qA(s),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(bA(this.gl,this.framebuffer),this.outputTexture=null),cA(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,s){const[r,a]=iA(t,n),i=new Uint8Array(t*n*4);return cA(e,(()=>e.readPixels(0,0,r,a,s.downloadTextureFormat,e.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,s,r,a){return function(e,t,n,s,r,a,i,o){const l=e,u=new Float32Array(function(e,t){const[n,s]=lA(e,t);return n*s*4}(a,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}(this.gl,e,0,0,0,r,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const s=e,r=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=function(e,t,n,s){const r=e.createBuffer();cA(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r)));const a=16*t*n;return cA(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),cA(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),cA(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),r}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(Pe().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,r=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(r,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=r}else Pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,Pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const s=new Float32Array(t*n*4);return cA(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s))),s}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl,n=function(e,t){const n=wA(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(cA(e,(()=>e.shaderSource(n,t))),cA(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=dA.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],r=e.split("\n"),a=r.length.toString().length+2,i=r.map(((e,t)=>ce((t+1).toString(),a)+e));let o=0;for(let e=0;e<i.length;e++)o=Math.max(i[e].length,o);const l=i.slice(0,s-1),u=i.slice(s-1,s),c=i.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${ce(u[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(t,e),s=function(e){const t=DA();return function(e,t){const n=wA(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(cA(e,(()=>e.shaderSource(n,t))),cA(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(t),r=function(e){return wA(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return cA(t,(()=>t.attachShader(r,s))),cA(t,(()=>t.attachShader(r,n))),function(e,t){if(cA(e,(()=>e.linkProgram(t))),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,r),this.debug&&fA(t,r),this.vertexAttrsAreBound||(this.setProgram(r),this.vertexAttrsAreBound=function(e,t,n){return cA(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),mA(e,t,"clipSpacePos",n,3,20,0)&&mA(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),r}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&cA(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&fA(this.gl,this.program),cA(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return wA(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),cA(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),gA(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,r]=lA(t,n);this.setOutputMatrixTextureDriver(e,s,r)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&fA(this.gl,this.program),xA(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),cA(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),cA(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=pA(this.gl,2===Pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===Pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===Pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await he((()=>this.disposed||this.isQueryAvailable(e,Pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,Pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||he((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),yA(this.gl,e,this.framebuffer),this.debug&&xA(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(yA(this.gl,this.outputTexture,this.framebuffer),this.debug&&xA(this.gl)):bA(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;yA(s,e,this.framebuffer),this.debug&&xA(s),this.outputTexture=e,cA(s,(()=>s.viewport(0,0,t,n))),cA(s,(()=>s.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),cA(this.gl,(()=>this.gl.scissor(e,t,n,s)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{getBroadcastDims:YA}=g;function JA(e,t,n,s){const r=[];e.forEach((e=>{const t=se(e.shapeInfo.logicalShape);e.shapeInfo.isUniform?r.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(r.push(`uniform sampler2D ${e.name};`),r.push(`uniform int offset${e.name};`))}));const a=r.join("\n"),i=e.map((e=>function(e,t,n=!1){let s="";s+=n?QA(e):ZA(e);const r=e.shapeInfo.logicalShape,a=t.logicalShape;return r.length<=a.length&&(s+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=YA(e.shapeInfo.logicalShape,t.logicalShape),l=iR(i),u=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map((e=>`coords.${h[e+u]} = 0;`)).join("\n");let p="";p=i<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${h[t+u]}`)).join(", ");let d="return outputValue;";const f=1===se(e.shapeInfo.logicalShape),m=1===se(t.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const e=a-2,t=a-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?d="return vec4(outputValue.x);":o.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${p});\n      ${d}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=t.texShape,i=e.shapeInfo.texShape,o=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===l&&null==e.shapeInfo.flatOffset&&ae(i,a))return`\n      float ${r}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=iR(l),c=YA(e.shapeInfo.logicalShape,t.logicalShape),h=l-o;let p;const d=["x","y","z","w","u","v"];p=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${d[e+h]} = 0;`)).join("\n");let f="";return f=l<2&&o>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+h]}`)).join(", "),`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${p}\n      return get${s}(${f});\n    }\n  `}(e,t)),s}(e,t,s))).join("\n"),o=t.texShape,l=DA(),u=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(l);let c,h,p=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${eR}\n    ${tR}\n    ${nR}\n  `}(l);return t.isPacked?(c=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===n[0]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,t);case 2:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(ae(e,t))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const s=Math.ceil(e[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[2]/2),r=s*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t);default:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[e.length-1]/2),r=s*Math.ceil(e[e.length-2]/2);let a=r,i="",o="b, r, c";for(let t=2;t<e.length-1;t++)a*=e[e.length-t-1],i=`\n      int b${t} = index / ${a};\n      index -= b${t} * ${a};\n    `+i,o=`b${t}, `+o;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${e.length}(${o});\n    }\n  `}(e,t)}}(t.logicalShape,o),h=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(l)):(c=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return 1===(n=t)[0]?`\n      int getOutputCoords() {\n        return int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return resTexRC.x * ${n[1]} + resTexRC.y;\n    }\n  `;case 2:return function(e,t){return ae(e,t)?`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=_A(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(e,t);case 4:return function(e,t){const n=_A(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t);case 5:return function(e,t){const n=_A(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=_A(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}var n}(t.logicalShape,o),h=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(l)),s&&(p+=sR),[p,u,h,a,c,i,n].join("\n")}function ZA(e){const t=e.shapeInfo.logicalShape;switch(t.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`float ${n}() {return ${t};}`;const[s,r]=e.shapeInfo.texShape;if(1===s&&1===r)return`\n      float ${n}() {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const[a,i]=e.shapeInfo.texShape;return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${i}, ${rR(t)});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${aR(e)}\n      }\n    `;const s=e.shapeInfo.texShape,r=s[0],a=s[1];if(1===a&&1===r)return`\n      float ${n}(int index) {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const i=rR(t);return 1===a?`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${r}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `:1===r?`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${t}, uv);\n      }\n    `:`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${r}, ${a}, index + ${i});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape;if(null!=r&&ae(t,r)){const e=r[0];return`\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${r[1]}.0, ${e}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:a,keptDims:i}=fe(t),o=a;if(o.length<t.length){const t=["row","col"];return`\n      ${ZA(oR(e,o))}\n      float ${s}(int row, int col) {\n        return ${s}(${lR(t,i)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));\n        ${aR(e)}\n      }\n    `;const l=r[0],u=r[1],c=rR(n);return 1===u?`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `:1===l?`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${t[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${l}, ${u}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[1]*t[2],a=t[2],{newShape:i,keptDims:o}=fe(t),l=i;if(l.length<t.length){const t=["row","col","depth"];return`\n        ${ZA(oR(e,l))}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${lR(t,o)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${r}, ${a}, 1)));\n        ${aR(e)}\n      }\n    `;const u=e.shapeInfo.texShape,c=u[0],h=u[1],p=e.shapeInfo.flatOffset;if(h===r&&null==p)return`\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===a&&null==p)return`\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r} + col * ${a} + depth + ${rR(n)};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(e);case 4:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[3],a=t[2]*r,i=t[1]*a,{newShape:o,keptDims:l}=fe(t);if(o.length<t.length){const t=["row","col","depth","depth2"];return`\n      ${ZA(oR(e,o))}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${lR(t,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${r}, 1)));\n        ${aR(e)}\n      }\n    `;const u=e.shapeInfo.flatOffset,c=e.shapeInfo.texShape,h=c[0],p=c[1];if(p===i&&null==u)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===r&&null==u)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${t[1]*t[2]}, ${t[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${r} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${p}, index + ${rR(n)});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[4],a=t[3]*r,i=t[2]*a,o=t[1]*i,{newShape:l,keptDims:u}=fe(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${ZA(oR(e,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${lR(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${r})) +\n          depth3;\n        ${aR(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${r} + depth3 + ${rR(n)};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:a}=fe(t);if(r.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${ZA(oR(e,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${lR(t,a)});\n      }\n    `}const i=t[5],o=t[4]*i,l=t[3]*o,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${aR(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${rR(n)};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${t.length}-D input sampling is not yet supported`)}}function QA(e){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${DA().texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),s=e.shapeInfo.texShape,r=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],a=DA();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${r[0]}, ${r[1]}, index);\n      return ${a.texture2D}(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=r[0],i=r[1],o=DA();if(null!=r&&ae(t,r))return`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${o.texture2D}(${n}, uv);\n      }\n    `;const l=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(t[1]/2)}, ${l[0]}, ${l[1]}, row, col);\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];if(1===t[0]){const n=[1,2],r=["b","row","col"];return`\n        ${QA(oR(e,t.slice(1)))}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${lR(r,n)});\n        }\n      `}const i=a[0],o=a[1],l=Math.ceil(t[2]/2);return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${o}, ${l*Math.ceil(t[1]/2)}, ${l}, b, row, col);\n      return ${DA().texture2D}(${n}, uv);\n    }\n  `}(e);default:return function(e){const t=e.shapeInfo.logicalShape,n=t.length,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=i[0],l=i[1],u=Math.ceil(t[n-1]/2);let c=u*Math.ceil(t[n-2]/2),h="int b, int row, int col",p=`b * ${c} + (row / 2) * ${u} + (col / 2)`;for(let e=2;e<n-1;e++)h=`int b${e}, `+h,c*=t[n-e-1],p=`b${e} * ${c} + `+p;return`\n    vec4 ${r}(${h}) {\n      int index = ${p};\n      int texR = index / ${l};\n      int texC = index - texR * ${l};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${l}, ${o});\n      return ${DA().texture2D}(${s}, uv);\n    }\n  `}(e)}}const eR="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",tR="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",nR="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",sR="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function rR(e){return`offset${e}`}function aR(e){const t=e.name,n=se(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function iR(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function oR(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function lR(e,t){return t.map((t=>e[t])).join(", ")}function uR(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const s=e.logicalShape,r=t[n],a=r.shape;if(!ae(s,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${a} must match`);if(e.isUniform&&r.isUniform)return;const i=e.texShape,o=r.isUniform?null:r.texData.texShape;if(!ae(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)}))}const{addImpl:cR,bincountImpl:hR,bincountReduceImpl:pR,ceilImpl:dR,concatImpl:fR,expImpl:mR,expm1Impl:gR,floorImpl:yR,gatherV2Impl:bR,greaterImpl:xR,lessImpl:wR,linSpaceImpl:kR,logImpl:vR,maxImpl:NR,maximumImpl:IR,minimumImpl:$R,multiplyImpl:CR,negImpl:SR,prodImpl:TR,rangeImpl:ER,rsqrtImpl:AR,simpleAbsImpl:RR,sliceImpl:FR,stridedSliceImpl:DR,subImpl:_R,tileImpl:OR,topKImpl:MR,transposeImpl:LR,uniqueImpl:zR}=V;function BR(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function PR(e,t){return 1===t?[e]:BR(e,t)}class WR{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=PR("rc",t),s=iR(t),r=function(e,t,n){if(1===e)return`rc > ${t[0]}`;let s="";for(let r=e-2;r<e;r++)s+=`${n[r]} >= ${t[r]}`,r<e-1&&(s+="||");return s}(t,e,n),a=function(e,t,n,s){if(1===e)return"";const r=s.slice(-2);return`\n    int r = ${r[0]};\n    int c = ${r[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${n};\n  `}(t,e[e.length-1],e[e.length-2],n),i=function(e,t){const n=e.length,s=function(e,t){const n=[];for(let s=0;s<=1;s++)for(let r=0;r<=1;r++){let a=`${0===s?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let n=2;n<e;n++)a=`${t[t.length-1-n]},`+a;n.push(a)}return n}(n,t);return 1===n?`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`:`getA(${s[0]}),\n          cEdge ? 0. : getA(${s[1]}),\n          rEdge ? 0. : getA(${s[2]}),\n          rEdge || cEdge ? 0. : getA(${s[3]})`}(e,n);this.userCode=`\n        void main() {\n          ${s} rc = getOutputCoords();\n\n          if(${r}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class VR{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var s;this.userCode=`\n      ${s=t,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${_A(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${OA(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${e[1]};\n        int cols = ${e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class UR{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const s=HR(t,n),r=jR(e,s,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const a=GR(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[r].shift();return this.usedTextures[r].push(e),e}let i;return s===aA.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===aA.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===aA.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===aA.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===aA.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const r=HR(n,s),a=jR(t,r,s);a in this.freeTextures||(this.freeTextures[a]=[]);const i=GR(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s),o=Pe().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[a],u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function GR(e,t,n,s,r){const a=function(e,t){switch(e){case aA.PACKED_2X2_FLOAT32:return qA(t);case aA.PACKED_2X2_FLOAT16:return KA(t);case aA.UNPACKED_FLOAT32:return GA(t);case aA.UNPACKED_FLOAT16:return HA(t);case aA.PACKED_4X1_UNSIGNED_BYTE:return jA(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let i;if(r){const[t,n]=lA(e[0],e[1]);i=t*n}else{const[t,n]=iA(e[0],e[1]);i=t*n}return i*function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;throw new Error(`Unknown internal format ${t}`)}(n,a)}function HR(e,t){if(e===rA.UPLOAD)return aA.PACKED_2X2_FLOAT32;if(e===rA.RENDER||null==e)return function(e){return Pe().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?aA.PACKED_2X2_FLOAT32:aA.UNPACKED_FLOAT32:e?aA.PACKED_2X2_FLOAT16:aA.UNPACKED_FLOAT16}(t);if(e===rA.DOWNLOAD||e===rA.PIXELS)return aA.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function jR(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class qR{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const KR="return abs(x);",XR="return x;";class YR{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class JR{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,n=PR("rc",t),s=iR(t),r=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const ZR=xh,QR={};class eF extends G{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!Pe().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){const e=nA(Pe().getNumber("WEBGL_VERSION"));this.binaryCache=((t=Pe().getNumber("WEBGL_VERSION"))in QR||(QR[t]={}),QR[t]),this.gpgpu=new XA(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=e,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=e.gl.canvas;var t;this.textureManager=new UR(this.gpgpu),this.numMBBeforeWarning=null==Pe().global.screen?1024:Pe().global.screen.height*Pe().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new U(this,so())}nextDataId(){return eF.nextDataId++}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(e,t,n){if((Pe().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||Pe().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:rA.UPLOAD,refCount:1}),s}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,t,n,s,r){if(Pe().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:rA.UPLOAD,refCount:r})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:r,slice:a,shape:i,isPacked:o}=t;if(null!=a){let t;t=o?new YR(i,XR):new qR(i,XR);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;return l&&(u=er()),c="complex64"===s?Qp(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):this.getValuesFromTexture(e),l&&(this.downloadWaitMs+=er()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:s,slice:r,dtype:a,complexTensorInfos:i,isPacked:o}=t;if(null!=r){let t;t=o?new YR(s,XR):new qR(s,XR);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:a}],a),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if(!Pe().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===Pe().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==a&&Pe().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture,...oA(s))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]);u=Qp(e[0],e[1])}else if(null==c)u=this.getValuesFromTexture(e);else{const e=se(s);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}null!=l&&this.disposeIntermediateTensorInfo(l);const h=this.convertAndCacheOnCPU(e,u),p=this.pendingRead.get(e);return this.pendingRead.delete(e),p.forEach((e=>e(h))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&so().removeDataId(e,this),this.pendingDeletes--),h}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>sr(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Va(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!hA(n)){if(Pe().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),r=se(t);if(Pe().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(s.texture,...oA(t)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),a}const a=Pe().getBool("WEBGL_PACK")&&!0===s,i=a?NA(t):t,o=a?new PA(i):new BA(i),l=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture,u.texShape[0],u.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return Pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}async time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const r=ne(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=ne(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,s&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(Pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(r);i.kernelMs=Y(e),i.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return Pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:er(),endMs:null}}endTimer(e){return Pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=er(),e)}async getQueryTime(e){if(Pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:r,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,r,a)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}getCPUBackend(){return Pe().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=so().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(e,t=128){const n=this.getCPUBackend();return Pe().getBool("IS_TEST")||this.warnedAboutCPUBackend||null!=n||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&e.every((e=>null==this.texData.get(e.dataId).texture&&se(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){Jp("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return ZR(e.shape,t)}packedUnaryOp(e,t,n){const s=new YR(e.shape,t),r=this.compileAndRun(s,[e],n);return so().makeTensorFromDataId(r.dataId,r.shape,r.dtype)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=RR(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(Pe().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,KR,e.dtype);const t=new qR(e.shape,KR),n=this.compileAndRun(t,[e]);return so().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&Ne(n[0])){const r=n.map((e=>nr(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:s}=this.makeTensorInfo(e,t,n);return so().makeTensorFromDataId(s,e,t,this)}unpackTensor(e){const t=new JR(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new WR(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[kA(e.shape),...vA(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},r=[kA(t),...vA(t)],a=new VR(r,n),i=this.runWebGLProgram(a,[s],e.dtype,null,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e){const t=this.texData.get(e),{isPacked:n,shape:s,dtype:r}=t,a=NA(s);let i;return i=n?new zA(a):new LA(a),{dtype:r,shape:s,dataId:this.runWebGLProgram(i,[{shape:a,dtype:r,dataId:e}],r,null,!0).dataId}}runWebGLProgram(e,t,n,s,r=!1){const a=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(a.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===sA.DENSE){const t=oA(e.outputShape);i.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===se(a.shape))return i.values=me(a.dtype,0),a;const o=[],l=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&se(t.shape)<=Pe().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}else if(!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),o.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!$A(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),o.push(t),n=this.texData.get(t.dataId),e.shape=s}return this.uploadToGPU(t.dataId),{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(a.dataId);const u={shape:a.shape,texData:i,isUniform:!1},c=function(e,t,n){let s="";t.concat(n).forEach((e=>{const t=null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0,n=e.isUniform?"uniform":e.texData.texShape;s+=`${e.shape}_${n}_${t}`}));const r=e.userCode;let a=e.constructor.name;return a+="_"+s+"_"+r,a}(e,l,u),h=this.getAndSaveBinary(c,(()=>function(e,t,n,s){const r=t.userCode,a=n.map(((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}})),i=a.map((e=>e.shapeInfo)),o={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},l=JA(a,o,r,t.packedInputs),u=e.createProgram(l);let c=null;const h=e.getUniformLocation(u,"NAN",!1);1===Pe().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(u,"INFINITY",!1));const p={};for(let n=0;n<t.variableNames.length;n++){const s=t.variableNames[n],r=!1;p[s]=e.getUniformLocation(u,s,r),p[`offset${s}`]=e.getUniformLocation(u,`offset${s}`,r)}return{program:t,source:l,webGLProgram:u,uniformLocations:p,inShapeInfos:i,outShapeInfo:o,infLoc:c,nanLoc:h}}(this.gpgpu,e,l,u))),p=null!=this.activeTimers;let d;if(p&&(d=this.startTimer()),function(e,t,n,s,r){uR(t.inShapeInfos,n),uR([t.outShapeInfo],[s]);const a=s.texData.texture,i=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(a,i[0],i[1]):e.setOutputMatrixTexture(a,i[0],i[1]),e.setProgram(t.webGLProgram),1===Pe().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,s)=>{const r=t.program.variableNames[s],a=t.uniformLocations[r],i=t.uniformLocations[`offset${r}`];if(null!=a)if(n.isUniform)if(se(n.shape)<2)e.gl.uniform1f(a,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture,a,s)})),null!=r&&r(e,t.webGLProgram),e.executeProgram()}(this.gpgpu,h,l,u,s),o.forEach((e=>this.disposeIntermediateTensorInfo(e))),p&&(d=this.endTimer(d),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(d)})),!Pe().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===r){const e=this.unpackTensor(a);return this.disposeIntermediateTensorInfo(a),e}return a}compileAndRun(e,t,n,s,r=!1){return n=n||t[0].dtype,this.runWebGLProgram(e,t,n,s,r)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(Pe().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=io((()=>{if(!Pe().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=Pe().getBool("DEBUG");Pe().set("DEBUG",!1);const t=this.abs(_o(1e-8)).dataSync()[0];if(Pe().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:r,texture:a,usage:i,isPacked:o}=t;if(null!=a)return;const l=null!=this.activeTimers;let u;l&&(u=er());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=Pe().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,n)=>n>=e.length-2?X(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=fe(e);e=t.newShape}let s=se(e);if(e.length<=1&&s<=n)return[1,s];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=kA(e);let n=2,r=2;return e.length&&([n,r]=vA(e)),s=t*(n/2)*(r/2),le(s).map((e=>2*e))}return le(s)}(n,o),t.texShape=c),null!=r){const e=NA(n);let a,i=c[1],h=c[0];const p=r instanceof Uint8Array;o?([i,h]=lA(c[0],c[1]),a=new VA(e,[h,i],p)):a=new WA(e,[h,i],p);const d=this.makeTensorInfo([h,i],s);this.texData.get(d.dataId).usage=p?rA.PIXELS:rA.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(d.dataId),i,h,r);const f=!0,m=this.runWebGLProgram(a,[d],s,null,f),g=this.texData.get(m.dataId);t.texture=g.texture,t.texShape=g.texShape,t.isPacked=g.isPacked,t.usage=g.usage,this.disposeIntermediateTensorInfo(d),this.texData.delete(m.dataId),t.values=null,l&&(this.uploadWaitMs+=er()-u)}else{const e=this.acquireTexture(c,i,s,o);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*ke(t)}}eF.nextDataId=0,Br()&&yo("webgl",(()=>new eF),2);class tF{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=Ho(t,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class nF{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Ho(t,n);const r=this.outputShape.length;let a="";if(s)if(0===r||1===se(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(a=`\n          ${iR(r)} coords = getOutputCoords();\n        `,1===r)a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=PR("coords",r);a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= ${this.outputShape[r-2]};\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= ${this.outputShape[r-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function sF(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const rF={kernelName:nn,backendName:"webgl",kernelFunc:sF};function aF(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.makeTensorInfo(s.shape,"complex64"),i=n.texData.get(a.dataId),o=sF({inputs:{x:s},backend:n}),l=sF({inputs:{x:r},backend:n});return i.complexTensorInfos={real:o,imag:l},a}const iF={kernelName:gt,backendName:"webgl",kernelFunc:aF},oF="return (a < 0.) ? b * a : a;",lF="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",uF={kernelName:un,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s,i=n.makeTensorInfo([],"float32",Zs(a,"float32")),o=Pe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new nF(lF,r.shape,i.shape):new tF(oF,r.shape,i.shape),l=n.runWebGLProgram(o,[r,i],r.dtype);return n.disposeIntermediateTensorInfo(i),l}},cF="return (a < 0.) ? b * a : a;",hF="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",pF={kernelName:jn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t,a=Pe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new nF(hF,s.shape,r.shape):new tF(cF,s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}};function dF({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:r,backend:a})=>{const{x:i}=r,o=a,l=s||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,l);return o.makeTensorInfo(i.shape,l,t)}let u;return u=Pe().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new YR(i.shape,t):new qR(i.shape,e),o.runWebGLProgram(u,[i],l)}}function fF({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:a}){return({inputs:i,backend:o})=>{const{a:l,b:u}=i,c=o;if(s&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[s,r]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,s]=t,r={dataId:n.dataId,dtype:n.dtype,shape:l.shape},a={dataId:s.dataId,dtype:s.dtype,shape:u.shape},i=new tF(e,l.shape,u.shape);return c.runWebGLProgram(i,[r,a],$r(n.dtype,s.dtype))})),a=aF({inputs:{real:s,imag:r},backend:c});return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(r),a}const h=a||$r(l.dtype,u.dtype);if(c.shouldExecuteOnCPU([l,u])&&null!=r){const e=c.texData.get(l.dataId),t=c.texData.get(u.dataId),[n,s]=r(l.shape,u.shape,e.values,t.values,h),a=c.makeTensorInfo(s,h);return c.texData.get(a.dataId).values=n,a}let p;return p=Pe().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new nF(t,l.shape,u.shape,n):new tF(e,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}function mF(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?hF:cF;if("leakyrelu"===e)return t?lF:oF;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class gF{constructor(e,t,n,s=!1,r=!1,a=!1,i=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;const u=s?e[1]:e[2],c=Math.ceil(u/2),h=s?"i * 2, rc.y":"rc.y, i * 2",p=r?"rc.z, i * 2":"i * 2, rc.z",d=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}class yF{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Ho(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const bF="return a * b;";function xF(e){const{inputs:t,backend:n}=e,{a:s,b:r}=t,a=$r(s.dtype,r.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),a=new yF("return areal * breal - aimag * bimag;",s.shape,r.shape),i=new yF("return areal * bimag + aimag * breal;",s.shape,r.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape}],l=n.runWebGLProgram(a,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=aF({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,r])){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),[i,o]=CR(s.shape,r.shape,e.values,t.values,a),l=n.makeTensorInfo(o,a);return n.texData.get(l.dataId).values=i,l}let i;return i=Pe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new nF(bF,s.shape,r.shape):new tF(bF,s.shape,r.shape),n.runWebGLProgram(i,[s,r],a)}const wF={kernelName:_n,backendName:"webgl",kernelFunc:xF};function kF(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=n,o=se(r.shape),l=pe(a,o),u=se(l);Q(o===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`));const c=i.texData.get(r.dataId);return!c.isPacked||$A(r.shape,l)||null!==c.texture&&$A(c.shape,l)?(i.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function(e,t,n){const s=[kA(e.shape),...vA(e.shape)],r={dtype:e.dtype,shape:s,dataId:e.dataId},a=[kA(t),...vA(t)],i=new VR(a,s),o=n.runWebGLProgram(i,[r],e.dtype,null,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}(r,l,i)}const vF={kernelName:Zn,backendName:"webgl",kernelFunc:kF};class NF{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];const i=4*Math.floor(n/4),o=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${ie(e)?e.toPrecision(2):e}, ones);`}let u="";r%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class IF{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,p="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";r%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function $F(e,t,n,s){const r=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=Mp(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let a=e;for(let i=0;i<r.length;i++){const{inSize:o,windowSize:l,outSize:u}=r[i];let c,h;c="mean"===n?0===i?new NF({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},o):new NF({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u}):new IF({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},n),h=a,a=s.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return a}class CF{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];this.outputShape=n,this.rank=n.length;const s=iR(this.rank),r=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let t=0;t<e.length;t++)s[e[t]]=n[t];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class SF{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=iR(this.rank),r=BR("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=r[e];const i=`vec2(${a.slice(-2).join()})`,o=`++${r[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function TF(e,t,n){const s=Pe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new SF(e.shape,t):new CF(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function EF(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;return function(e,t,n,s){const r=t,a=e.shape.length,i=de(r,e.shape);let o=i;const l=Wu(o,a),u=null!=l;let c=e;u&&(c=TF(e,l,s),o=Uu(o.length,a)),Pu("sum",o,a);const[h,p]=zu(c.shape,o);let d=h;n&&(d=Bu(h,i));const f=se(p),m=kF({inputs:{x:c},attrs:{shape:[se(e.shape)/f,f]},backend:s}),g=$F(m,Cr(e.dtype),"sum",s),y=kF({inputs:{x:g},attrs:{shape:d},backend:s});return s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(g),u&&s.disposeIntermediateTensorInfo(c),y}(r,a,i,n)}const AF={kernelName:ys,backendName:"webgl",kernelFunc:EF};function RF(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{perm:a}=s,i=n,o=r.shape.length,l=new Array(o);for(let e=0;e<l.length;e++)l[e]=r.shape[a[e]];let u;if(i.shouldExecuteOnCPU([r])){const e=i.texData.get(r.dataId).values,t=LR(e,r.shape,r.dtype,a,l);u=i.makeTensorInfo(l,r.dtype),i.texData.get(u.dataId).values=t}else u=TF(r,a,i);return u}const FF={kernelName:As,backendName:"webgl",kernelFunc:RF};function DF({a:e,b:t,transposeA:n,transposeB:s,backend:r,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){const u=e.shape.length,c=t.shape.length,h=n?e.shape[u-2]:e.shape[u-1],p=s?t.shape[c-1]:t.shape[c-2],d=n?e.shape[u-1]:e.shape[u-2],f=s?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),y=se(m),b=se(g);Q(u>=2&&c>=2&&(y===b||1===y||1===b),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${m}) and (${g}).`));const x=(y>b?e.shape.slice(0,-2):t.shape.slice(0,-2)).concat([d,f]);Q(h===p,(()=>`Error in matMul: inner shapes (${h}) and (${p}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`));const w=n?[y,h,d]:[y,d,h],k=s?[b,f,p]:[b,p,f],v=kF({inputs:{x:e},backend:r,attrs:{shape:w}}),N=kF({inputs:{x:t},backend:r,attrs:{shape:k}}),I=[v,N],$=Math.max(y,b),C=n?v.shape[1]:v.shape[2],S=null!=a,T=null!=i,E="leakyrelu"===l,A=null!=l?mF(l,!0):null;let R;if((1===d||1===f)&&C>1e3&&!1===(S||T||E||null!=A)){let e=v,t=N;n&&(e=RF({inputs:{x:v},backend:r,attrs:{perm:[0,2,1]}}),I.push(e)),s&&(t=RF({inputs:{x:N},backend:r,attrs:{perm:[0,2,1]}}),I.push(t));const a=1===f;let i=e;1!==f&&(i=kF({inputs:{x:e},backend:r,attrs:{shape:[$,C,1]}}),I.push(i));const o=1===f?2:1;let l=t;a&&(l=kF({inputs:{x:t},backend:r,attrs:{shape:[$,1,C]}}),I.push(l));const u=xF({inputs:{a:i,b:l},backend:r});R=EF({inputs:{x:u},backend:r,attrs:{axis:o,keepDims:!0}}),I.push(u)}else{const l=$r(e.dtype,t.dtype),u=new gF(w,k,[$,d,f],n,s,S,A,T,E),c=[v,N];if(null!=a&&c.push(a),T&&c.push(i),E){const e=r.makeTensorInfo([],"float32",Zs(o,"float32"));c.push(e),I.push(e)}R=r.runWebGLProgram(u,c,l)}const F=kF({inputs:{x:R},backend:r,attrs:{shape:x}});I.push(R);for(const e of I)r.disposeIntermediateTensorInfo(e);return F}const _F={kernelName:zs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return DF({a:r,b:a,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},OF="return abs(x);",MF={kernelName:He,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=RR(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let r;return r=Pe().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new YR(s.shape,OF):new qR(s.shape,OF),n.runWebGLProgram(r,[s],s.dtype)}},LF=dF({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),zF={kernelName:je,backendName:"webgl",kernelFunc:LF},BF=dF({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),PF={kernelName:qe,backendName:"webgl",kernelFunc:BF},WF="return a + b;",VF=fF({opSnippet:WF,packedOpSnippet:WF,supportsComplex:!0,cpuKernelImpl:cR}),UF={kernelName:Ke,backendName:"webgl",kernelFunc:VF};class GF{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class HF{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const jF={kernelName:Xe,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,r=n;if(1===r.length)return sF({inputs:{x:r[0]},backend:s});if(r.length>Pe().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(r.length/2),n=e({inputs:r.slice(0,t),backend:s}),a=e({inputs:r.slice(t),backend:s});return e({inputs:[n,a],backend:s})}const a=r.map((e=>e.dtype)).reduce(((e,t)=>$r(e,t))),i=r.map((e=>e.shape)),o=Pe().getBool("WEBGL_PACK")?new HF(r[0].shape,i):new GF(r[0].shape,i);return s.runWebGLProgram(o,r,a)}},qF={kernelName:Ye,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=de(a,r.shape);let u=l;const c=Wu(u,o);let h=r;null!=c&&(h=RF({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Uu(u.length,o)),Pu("all",u,o);const[p,d]=zu(h.shape,u),f=kF({inputs:{x:h},backend:n,attrs:{shape:[-1,se(d)]}}),m=$F(f,f.dtype,"all",n);let g;return g=kF(i?{inputs:{x:m},backend:n,attrs:{shape:Bu(p,l)}}:{inputs:{x:m},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},KF={kernelName:Je,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=de(a,r.shape);let u=l;const c=Wu(u,o);let h=r;null!=c&&(h=RF({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Uu(u.length,o)),Pu("any",u,o);const[p,d]=zu(h.shape,u),f=kF({inputs:{x:h},backend:n,attrs:{shape:[-1,se(d)]}}),m=$F(f,f.dtype,"any",n);let g;return g=kF(i?{inputs:{x:m},backend:n,attrs:{shape:Bu(p,l)}}:{inputs:{x:m},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};class XF{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:r,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,a];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class YF{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,Q(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const r=e[e.length-1],a=Math.ceil(r/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),s||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=iR(o),u=PR("coords",o);let c,h;if(1===a){h=o+1;const e=iR(h);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[o-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[o-2]};`}else h=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),d="."+p[h-1],f=p.map((e=>"int "+e)),m=PR("sourceLocR",h-1).concat("inIdx.r"),g=PR("sourceLocG",h-1).concat("inIdx.g"),y=PR("sourceLocB",h-1).concat("inIdx.b"),b=PR("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,k=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,v=s?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${v}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function JF(e,t,n,s=null){let r=t.shape[0],a=t.shape[1];null!=s&&(r=s.shape[0],a=s.shape[1]);const i=Mp(a),o={windowSize:i,inSize:a,batchSize:r,outSize:Math.ceil(a/i)},l=new XF(o,n,null==s),u=[t];null!=s&&u.push(s);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=JF(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function ZF(e,t,n,s=null){const r=null!=s?s.shape:t.shape,a=Mp(r[r.length-1]),i=new YF(r,a,n,null==s),o=null==s?[t]:[t,s],l=e.runWebGLProgram(i,o,"int32");if(l.shape.length===t.shape.length){const s=ZF(e,t,n,l);return e.disposeIntermediateTensorInfo(l),s}return l}function QF(e,t,n,s){const r=[n];if(Pu("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!Pe().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],[a,i]=zu(t.shape,r),o=se(i),l=kF({inputs:{x:t},backend:e,attrs:{shape:[-1,o]}});n.push(l);const u=JF(e,l,s);n.push(u);const c=kF({inputs:{x:u},backend:e,attrs:{shape:a}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),c}return ZF(e,t,s)}const eD={kernelName:Ze,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=de(a,r.shape);const o=Wu(i,r.shape.length);let l=r;const u=[];null!=o&&(l=RF({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Uu(i.length,l.shape.length)),Pu("argMax",[i[0]],l.shape.length);const c=QF(n,l,i[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},tD={kernelName:Qe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=de(a,r.shape);const o=Wu(i,r.shape.length);let l=r;const u=[];null!=o&&(l=RF({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Uu(i.length,l.shape.length)),Pu("argMin",[i[0]],l.shape.length);const c=QF(n,l,i[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},nD=dF({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),sD={kernelName:et,backendName:"webgl",kernelFunc:nD},rD=dF({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),aD={kernelName:tt,backendName:"webgl",kernelFunc:rD},iD=dF({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),oD={kernelName:nt,backendName:"webgl",kernelFunc:iD},lD=fF({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),uD={kernelName:rt,backendName:"webgl",kernelFunc:lD},cD=dF({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),hD={kernelName:st,backendName:"webgl",kernelFunc:cD};class pD{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?r?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,k=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class dD{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / count");const k=4*Math.floor(a/4),v=a%4,N=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${N}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${2===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${3===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${N}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const fD={kernelName:at,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;RA(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Q(wl(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=cl(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&ae(u.inShape,u.outShape))return sF({inputs:{x:r},backend:n});const c=new pD(u,"avg",!1);return n.runWebGLProgram(c,[r],"float32")}},mD={kernelName:ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s,c=hl(r.shape,a,i,[1,1,1],o,l,u),h=new dD(c,"avg",!1);return n.runWebGLProgram(h,[r],"float32")}};class gD{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,c=l-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class yD{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const bD={kernelName:lt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=hl(i.shape,o,l,[1,1,1],u,c),p=new yD(h);return n.runWebGLProgram(p,[r],i.dtype)}},xD={kernelName:it,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;RA([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=cl(i.shape,o,l,1,u),h=new gD(c);return n.runWebGLProgram(h,[r],i.dtype)}},wD={kernelName:ut,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;return DF({a:r,b:a,transposeA:i,transposeB:o,backend:n})}};class kD{constructor(e,t,n,s,r,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Ho(e,t),Ho(e,n);let i="0.0";null!=s&&(Ho(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=r&&(Ho(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class vD{constructor(e,t,n,s,r,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Ho(e,t),Ho(e,n);let i="vec4(0.0)";null!=s&&(Ho(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=r&&(Ho(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const ND={kernelName:Jt,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:r,variance:a,offset:i,scale:o}=e;Q(r.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Q(null==i||r.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Q(null==o||r.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);const u=[s,r,a];let c=null;null!=i&&(c=i.shape,u.push(i));let h=null;null!=o&&(h=o.shape,u.push(o));const p=Pe().getBool("WEBGL_PACK_NORMALIZATION")?new vD(s.shape,r.shape,a.shape,c,h,l):new kD(s.shape,r.shape,a.shape,c,h,l);return t.runWebGLProgram(p,u,u[0].dtype)}};class ID{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=iR(this.rank),n=`uniform int start[${this.rank}];`,s=function(e){if(1===e)return"sourceLoc";if(e<=6)return $D.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${$D[t]} = start[${t}] + coords.${$D[t]};`)).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${r}\n        setOutput(getSource(${s}));\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}const $D=["x","y","z","w","u","v"];class CD{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length;const t=iR(this.rank),n=PR("coords",this.rank),s=PR("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,a=`getChannel(getSource(${s.join()}), ${r})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${a};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}function SD(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s,[o,l]=Oi(r,a,i);if(ki(r,o,l),0===se(l))return n.makeTensorInfo(l,r.dtype,[]);if(n.shouldExecuteOnCPU([r])||"string"===r.dtype){const e=n.texData.get(r.dataId),t=FR(e.values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,t)}const{isPacked:u}=n.texData.get(r.dataId),c=Di(r.shape,o,l);if(u||!c){const e=Pe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new CD(l):new ID(l),t=e.getCustomSetupFunc(o);return n.runWebGLProgram(e,[r],r.dtype,t)}return n.uploadToGPU(r.dataId),function(e,t,n,s){const r=s.texData.get(e.dataId),a=s.makeTensorInfo(n,e.dtype),i=s.texData.get(a.dataId);Object.assign(i,r),i.refCount=1,i.shape=n,i.dtype=e.dtype;let o=_i(t,Ee(e.shape));r.slice&&(o+=r.slice.flatOffset),i.slice={flatOffset:o,origDataId:r.slice&&r.slice.origDataId||e.dataId};const l=s.dataRefCount.get(i.slice.origDataId)||1;return s.dataRefCount.set(i.slice.origDataId,l+1),a}(r,o,l,n)}const TD={kernelName:cs,backendName:"webgl",kernelFunc:SD},ED={kernelName:ct,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;Q(r.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),l=zp(r.shape,a,o),u=Bp(l.length,a.length),c=Pp(r.shape,a,o),h=Wp(i,a.length),p=Vp(c,i,a.length),d=[],f=kF({inputs:{x:r},backend:n,attrs:{shape:l}}),m=RF({inputs:{x:f},backend:n,attrs:{perm:u}}),g=kF({inputs:{x:m},backend:n,attrs:{shape:c}}),y=SD({inputs:{x:g},backend:n,attrs:{begin:h,size:p}});return d.push(f),d.push(m),d.push(g),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}},AD={kernelName:ht,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=n.readSync(r.dataId),l=n.readSync(a.dataId),u=hR(o,l,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,u)}},RD=fF({opSnippet:"return float(a != b);",dtype:"bool"}),FD={kernelName:Mn,backendName:"webgl",kernelFunc:RD};function DD(e){const{inputs:t,backend:n}=e,{input:s}=t;return sF({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const _D={kernelName:Xn,backendName:"webgl",kernelFunc:DD},OD={kernelName:dt,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:r}=t,{x:a}=n,{dtype:i}=r;if("complex64"===i){if("complex64"===a.dtype)return sF({inputs:{x:a},backend:s});const t=oc(a.shape),n=e({inputs:{x:a},backend:s,attrs:{dtype:"float32"}}),r=aF({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),r}if("complex64"===a.dtype){const t=DD({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:i}});return s.disposeIntermediateTensorInfo(t),n}if(!xe(a.dtype,i)){const e=sF({inputs:{x:a},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:i}}if("int32"===i)return function(e,t){const n=new qR(e.shape,"return float(int(x));"),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(a,s);if("bool"===i){const e=s.makeTensorInfo([],"bool",me("bool",1)),t=RD({inputs:{a,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}},MD="return ceil(x);",LD=dF({opSnippet:MD,packedOpSnippet:MD,cpuKernelImpl:dR}),zD={kernelName:ft,backendName:"webgl",kernelFunc:LD};class BD{constructor(e){this.variableNames=["A"],this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(e,t){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}class PD{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(e,t){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}const WD={kernelName:mt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{clipValueMin:a,clipValueMax:i}=s;let o;o=Pe().getBool("WEBGL_PACK_CLIP")?new PD(r.shape):new BD(r.shape);const l=o.getCustomSetupFunc(a,i);return n.runWebGLProgram(o,[r],r.dtype,l)}};class VD{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function UD(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const GD={kernelName:yt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=n.texData.get(s.dataId),a=new VD(s.shape),i=[UD(s,r.complexTensorInfos.real),UD(s,r.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class HD{constructor(e){this.outputShape=[],this.outputShape=_p(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const s=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${s}));`)}const s=t.length,r=t[t.length-1];n.push(`else setOutput(getT${s}(yR, yC-${r}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class jD{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=_p(e,t);const n=this.outputShape,s=n.length,r=iR(s),a=PR("coords",s),i=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map(((e,t)=>`T${t}`));const o=new Array(e.length-1);o[0]=e[0][t];for(let n=1;n<o.length;n++)o[n]=o[n-1]+e[n][t];const l=i[t],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<o.length;e++){const t=o[e-1];h+=`\n        if (${l} < ${o[e]}  && ${l} >= ${o[e-1]}) {\n          return getChannel(\n            getT${e}(${qD(i,l,t)}),\n            vec2(${qD(u,l,t)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${qD(i,l,d)}),\n          vec2(${qD(u,l,d)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${h}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[s-1]} = ${a[s-1]} + 1;\n        if (${a[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[s-2]} = ${a[s-2]} + 1;\n        if (${a[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[s-1]} = ${a[s-1]} - 1;\n        if (${a[s-2]} < ${n[s-2]} &&\n            ${a[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function qD(e,t,n){const s=e.indexOf(t);return e.map(((e,t)=>t===s?`${e} - ${n}`:e)).join()}function KD(e){const{inputs:t,backend:n}=e,{input:s}=t;return sF({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const XD={kernelName:rn,backendName:"webgl",kernelFunc:KD};function YD(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map((e=>DD({inputs:{input:e},backend:n}))),r=e.map((e=>KD({inputs:{input:e},backend:n}))),a=YD(s,t,n),i=YD(r,t,n),o=aF({inputs:{real:a,imag:i},backend:n});return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),r.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}if("string"===s){const{tensors2D:r,outShape:a}=JD(e,t,n),i=r.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),o=1===r[0].shape[0],l=fR(i,a,s,o),u=_p(e.map((e=>e.shape)),t),c=n.makeTensorInfo(u,s,l);return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}if(e.length>Pe().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const s=Math.floor(e.length/2),r=YD(e.slice(0,s),t,n),a=YD(e.slice(s),t,n),i=YD([r,a],t,n);return n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}if(Pe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const r=new jD(e.map((e=>e.shape)),t);return n.runWebGLProgram(r,e,s)}const{tensors2D:r,outShape:a}=JD(e,t,n),i=new HD(r.map((e=>e.shape))),o=n.runWebGLProgram(i,r,s);r.forEach((e=>n.disposeIntermediateTensorInfo(e)));const l=kF({inputs:{x:o},attrs:{shape:a},backend:n});return n.disposeIntermediateTensorInfo(o),l}function JD(e,t,n){const s=_p(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>kF({inputs:{x:e},attrs:{shape:[-1,se(e.shape.slice(t))]},backend:n}))),outShape:s}}function ZD(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=de(r,t[0].shape)[0],i=_p(t.map((e=>e.shape)),a);if(0===se(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>se(e.shape)>0));return 1===o.length?sF({inputs:{x:o[0]},backend:n}):(Dp(o.map((e=>e.shape)),a),YD(o,a,n))}const QD={kernelName:bt,backendName:"webgl",kernelFunc:ZD};class e_{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${w}\n        setOutput(result);\n      }\n    `}}class t_{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class n_{constructor(e,t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const{filterWidth:s,inChannels:r,strideWidth:a,strideHeight:i,padInfo:o,outWidth:l,dilationWidth:u,dilationHeight:c,dataFormat:h}=n,{left:p,top:d}=o,f=r*s,m=DA(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let n=0;n<=1;n++)for(let s=0;s<=1;s++)x+=`\n          blockIndex = rc.y + ${s};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${e[1]} && pos < ${e[0]}) {\n            offsetY = int(blockIndex / (${l})) * ${i} - ${d};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${t[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${l}.) * ${a}. - ${p}.);\n              d1 = offsetX + ${u} * (int(mod(float(pos), ${f}.) / ${r}.));\n\n              if(d1 < ${t[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${r}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+s}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+s}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}function s_({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const l=e.shape,u=s.texData.get(e.dataId),c=n.inChannels,h=l[0]*l[1]*l[2],p=n.outChannels,d="channelsLast"===n.dataFormat;let f;const m=[],g=(1===h||1===p)&&c>1e3,y=l[2]%2!=0&&!!u.isPacked;if(!g&&Pe().getBool("WEBGL_LAZILY_UNPACK")&&Pe().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&y){const c=d?l[0]*l[1]*(l[2]+1):l[0]*l[2]*(l[3]+1),h={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},p=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,Q($A(u.shape,h.shape),(()=>`packed reshape ${u.shape} to ${h.shape} isn't free`));const g=kF({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(g);const y=DF({a:h,b:g,backend:s,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i}),b=s.texData.get(y.dataId);Q(b.isPacked,(()=>"batchMatMul result is expected to be packed")),u.shape=p,b.shape=n.outShape,f=sF({inputs:{x:y},backend:s}),f.shape=n.outShape,m.push(y)}else{const u=kF({inputs:{x:e},backend:s,attrs:{shape:[1,d?l[0]*l[1]*l[2]:l[0]*l[2]*l[3],n.inChannels]}}),c=kF({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=DF({a:u,b:c,transposeA:!1,transposeB:!1,backend:s,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i});f=kF({inputs:{x:h},backend:s,attrs:{shape:n.outShape}}),m.push(u),m.push(c),m.push(h)}for(const e of m)s.disposeIntermediateTensorInfo(e);return f}function r_({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:p,dataFormat:d}=n,f="channelsLast"===d,m=l*u*c,g=p*h,y=[m,g],b=[],x=kF({inputs:{x:e},backend:s,attrs:{shape:e.shape.slice(1)}}),w=kF({inputs:{x:t},backend:s,attrs:{shape:[1,m,se(t.shape)/m]}});b.push(x),b.push(w);const k=new n_(y,x.shape,n),v=s.runWebGLProgram(k,[x],"float32"),N=kF({inputs:{x:v},backend:s,attrs:{shape:[1,y[0],y[1]]}});b.push(v),b.push(N);const I=null!=r,$=null!=a,C="leakyrelu"===o,S=o?mF(o,!0):null,T=new gF(N.shape,w.shape,[1,g,n.outChannels],!0,!1,I,S,$,C),E=[N,w];if(r&&E.push(r),$&&E.push(a),C){const e=s.makeTensorInfo([],"float32",Zs(i,"float32"));E.push(e),b.push(e)}const A=s.runWebGLProgram(T,E,"float32"),R=kF({inputs:{x:A},backend:s,attrs:{shape:f?[1,p,h,n.outChannels]:[1,n.outChannels,p,h]}});b.push(A);for(const e of b)s.disposeIntermediateTensorInfo(e);return R}const a_={kernelName:xt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=kl(l),p=pl(r.shape,a.shape,i,u,o,c,!1,h);let d;if(1!==p.filterHeight||1!==p.filterWidth||1!==p.dilationHeight||1!==p.dilationWidth||1!==p.strideHeight||1!==p.strideWidth||"SAME"!==p.padInfo.type&&"VALID"!==p.padInfo.type)if(Pe().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])d=r_({x:r,filter:a,convInfo:p,backend:n});else{const e=new e_(p);d=n.runWebGLProgram(e,[r,a],"float32")}else d=s_({x:r,filter:a,convInfo:p,backend:n});const f=kF({inputs:{x:d},backend:n,attrs:{shape:p.outShape}});return n.disposeIntermediateTensorInfo(d),f}};class i_{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class o_{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class l_{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.padInfo.front,a=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${r};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class u_{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const c_={kernelName:wt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=kl(l),p=pl(r.shape,c,i,1,o,u,!1,h),d=new i_(p);return n.runWebGLProgram(d,[r,a],"float32")}},h_={kernelName:kt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=kl(u),p=pl(i,a.shape,o,1,l,c,!1,h),d=new o_(p);return n.runWebGLProgram(d,[r,a],"float32")}},p_={kernelName:vt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=dl(r.shape,a.shape,i,l,o),c=new t_(u);return n.runWebGLProgram(c,[r,a],"float32")}},d_={kernelName:Nt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s,u=dl(r.shape,l,i,1,o),c=new l_(u);return n.runWebGLProgram(c,[r,a],"float32")}},f_={kernelName:It,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s,u=dl(l,a.shape,o,1,i),c=new u_(u);return n.runWebGLProgram(c,[r,a],"float32")}},m_=dF({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),g_={kernelName:$t,backendName:"webgl",kernelFunc:m_},y_=dF({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),b_={kernelName:Ct,backendName:"webgl",kernelFunc:y_};class x_{constructor(e,t,n,s,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const p="bilinear"===s?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const w_={kernelName:Tt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,c=new x_(r.shape,a.shape,o,l,u);return n.runWebGLProgram(c,[r,a,i],"float32")}};class k_{constructor(e,t,n){this.variableNames=["x"],this.outputShape=e;const s=e.length,r=t?"0.0":`getX(${v_(s,"coords")})`,a=e[e.length-1];let i="",o="";t?(i=n?"end != "+(a-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?`end + pow2 < ${a}`:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${iR(s)} coords = getOutputCoords();\n        int end = ${N_(s,"coords")};\n        float val = ${r};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${N_(s,"coords")} = idx;\n          val += getX(${v_(s,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.index&&(this.index=t.getUniformLocation(n,"index")),t.gl.uniform1f(this.index,e)}}}function v_(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function N_(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const I_={kernelName:St,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s,l=r.shape.length,u=Wu([a],l);let c=r;null!=u&&(c=RF({inputs:{x:r},backend:n,attrs:{perm:u}}));const h=Uu(1,l)[0];if(h!==l-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${r.shape.length-1} but got axis=${a}`);const p=c.shape[h];let d=sF({inputs:{x:c},backend:n});for(let e=0;e<=Math.ceil(Math.log2(p))-1;e++){const t=new k_(c.shape,!1,o),s=t.getCustomSetupFunc(e),r=d;d=n.runWebGLProgram(t,[d],d.dtype,s),n.disposeIntermediateTensorInfo(r)}if(i){const e=new k_(c.shape,i,o),t=d;d=n.runWebGLProgram(e,[d],d.dtype),n.disposeIntermediateTensorInfo(t)}if(null!=u){const e=RF({inputs:{x:d},backend:n,attrs:{perm:Vu(u)}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(c),e}return d}},$_={kernelName:Et,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=n.readSync(r.dataId),t=n.readSync(a.dataId),s=hR(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,s)}if(2===r.shape.length){const e=n.bufferSync(r),t=n.bufferSync(a),s=pR(e,t,i,o);return n.makeTensorInfo(s.shape,a.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class C_{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const S_={kernelName:At,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s;Q(a>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${a}`));const o=r.shape[0],l="NHWC"===i?r.shape[1]:r.shape[2],u="NHWC"===i?r.shape[2]:r.shape[3],c="NHWC"===i?r.shape[3]:r.shape[1],h=l*a,p=u*a,d=c/(a*a),f=new C_("NHWC"===i?[o,h,p,d]:[o,d,h,p],a,i);return n.runWebGLProgram(f,[r],r.dtype)}};class T_{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.inHeight,i=e.inWidth,o=e.padInfo.top,l=e.padInfo.left,u=e.strideHeight,c=e.strideWidth,h=e.dilationHeight,p=e.dilationWidth,d=e.filterHeight,f=e.filterWidth,m=e.outChannels/e.inChannels;let g="",y="";n&&(g=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,y="result = activation(result);");const b=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${u}, ${c});\n      const ivec2 pads = ivec2(${o}, ${l});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${m};\n        int q = d2 - d1 * ${m};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${h};\n\n          if (xR < 0 || xR >= ${a}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${f}; wC++) {\n            int xC = xCCorner + wC * ${p};\n\n            if (xC < 0 || xC >= ${i}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${b}\n        ${y}\n        setOutput(result);\n      }\n    `}}class E_{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.outShape;const a=e.inHeight,i=e.inWidth,o=e.padInfo.top,l=e.padInfo.left,u=e.strideHeight,c=e.strideWidth,h=e.dilationHeight,p=e.dilationWidth,d=e.filterHeight,f=e.filterWidth,m=f;let g="int xR; int xC; int xCOffset;";for(let e=0;e<d;e++)for(let t=0;t<f;t++)g+=`\n          vec4 xTexelR${e}C${2*t} = vec4(0.);\n          vec4 wR${e}C${t} = vec4(0.);\n          vec4 xR${e}C${t} = vec4(0.);`;for(let e=0;e<d;e++)for(let t=0;t<m;t++){const n=2*t;if(g+=`\n          xR = xRCorner + ${e*h};\n          xC = xCCorner + ${n*p};\n        `,1===c){if(n<f&&(g+=l%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${a} && xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${i}) {\n                    xTexelR${e}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${a} && xCOffset >= 0 && xCOffset < ${i}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${i}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${e}C${n} = vec4(previous.zw, xTexelR${e}C${n}.xy);\n                } else {\n                  xR${e}C${n} = vec4(0, 0, xTexelR${e}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${a} && xC >= 0 && xC < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xR${e}C${n} = xTexelR${e}C${n};\n              `,n+1<f)){const t=l%2==0?X(p):p;p%2==0&&l%2==1||p%2!=0&&l%2!=1?(g+=`\n                  xCOffset = xC + ${l%2} + ${t};\n\n                  if(xR >= 0 && xR < ${a} &&\n                    xCOffset >= 0 && xCOffset < ${i}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,p>1&&(g+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${a} &&\n                      xCOffset >= 0 && xCOffset < ${i}) {\n                      xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${e}C${n} = vec4(0.);\n                    }\n                  `),g+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.xy);\n                `):g+=`\n                  xCOffset = xC + ${t};\n\n                  if(xR >= 0 && xR < ${a} &&\n                    xCOffset >= 0 && xCOffset < ${i}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${e}C${n+1} = xTexelR${e}C${n+2};\n                `}}else n<f&&(g+=`\n              if(xR >= 0 && xR < ${a}) {\n            `,l%2==1?(g+=`\n                xCOffset = xC + 1 - ${c};\n                if(xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${i}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n              `,n+1<f&&(g+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${c};\n                  if(xCOffset >= 0 && xCOffset < ${i}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${e}C${n+1} = vec4(xTexelR${e}C${n+2}.xy, final.xy);\n                `)):(g+=`\n                if(xC >= 0 && xC < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${c};\n                if(xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.xy, xTexelR${e}C${n+2}.xy);\n              `,n+1<f&&(g+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n                `)),g+="}");n<f&&(g+=`\n            vec4 wTexelR${e}C${n} = getW(${e}, ${n}, d1, q);\n            wR${e}C${n} = vec4(wTexelR${e}C${n}.xz, wTexelR${e}C${n}.xz);\n          `,n+1<f&&(g+=`\n              vec4 wTexelR${e}C${n+1} = getW(${e}, ${n+1}, d1, q);\n              wR${e}C${n+1} =\n                vec4(wTexelR${e}C${n+1}.xz, wTexelR${e}C${n+1}.xz);`))}for(let e=0;e<d;e++)for(let t=0;t<f;t++)g+=`dotProd += xR${e}C${t} * wR${e}C${t};`;let y="",b="";n&&(y=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,b="result = activation(result);");const x=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${y}\n\n      const ivec2 strides = ivec2(${u}, ${c});\n      const ivec2 pads = ivec2(${o}, ${l});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${g}\n\n        vec4 result = dotProd;\n        ${x}\n        ${b}\n        setOutput(result);\n      }\n    `}}const A_={kernelName:Rt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),Q(wl(i,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`));const h=pl(r.shape,a.shape,i,c,o,u,!0);let p;return p=Pe().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new E_(h):new T_(h),n.runWebGLProgram(p,[r,a],"float32")}};class R_{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class F_{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const D_={kernelName:Ft,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s,h=pl(r.shape,c,i,o,l,u,!0),p=new R_(h);return n.runWebGLProgram(p,[r,a],"float32")}},__={kernelName:Dt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s,h=pl(c,a.shape,i,o,l,u,!0),p=new F_(h);return n.runWebGLProgram(p,[r,a],"float32")}};class O_{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const M_={kernelName:_t,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=[...s.shape,...s.shape],a=se(s.shape),i=kF({inputs:{x:s},backend:n,attrs:{shape:[a]}}),o=new O_(a),l=n.runWebGLProgram(o,[i],i.dtype),u=kF({inputs:{x:l},backend:n,attrs:{shape:r}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),u}};class L_{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:r,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const z_={kernelName:Ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=ul(r.shape,a.shape,i,o,"NHWC",l);let c;const h=new L_(u);c=n.runWebGLProgram(h,[r,a],"float32");const p=kF({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),p}},B_=dF({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),P_={kernelName:Bt,backendName:"webgl",kernelFunc:B_},W_={kernelName:Pt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:r}=t,a=Pe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new nF("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new tF("return (b >= 1.0) ? a : a * (b + 1.0);",s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}},V_=fF({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool"}),U_={kernelName:Vt,backendName:"webgl",kernelFunc:V_},G_=dF({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${Hp};\n  float a1 = ${jp};\n  float a2 = ${qp};\n  float a3 = ${Kp};\n  float a4 = ${Xp};\n  float a5 = ${Yp};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),H_={kernelName:Wt,backendName:"webgl",kernelFunc:G_},j_="return exp(x);",q_=dF({opSnippet:j_,packedOpSnippet:j_,cpuKernelImpl:mR}),K_={kernelName:Ut,backendName:"webgl",kernelFunc:q_};function X_(e){const{inputs:t,attrs:n,backend:s}=e,{dim:r}=n,{input:a}=t,i=a.shape.length,o=a.shape.slice();let l=r;return r<0&&(Q(-(i+1)<=r,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+r+1),o.splice(l,0,1),kF({inputs:{x:a},backend:s,attrs:{shape:o}})}const Y_={kernelName:Gt,backendName:"webgl",kernelFunc:X_},J_="return exp(x) - 1.0;",Z_=dF({opSnippet:J_,packedOpSnippet:J_,cpuKernelImpl:gR}),Q_={kernelName:Ht,backendName:"webgl",kernelFunc:Z_};class eO{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const r=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${s}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function tO(e,t,n){const s=n.texData.get(e.dataId),r=se(e.shape),a=e.shape[e.shape.length-1],i=kF({inputs:{x:e},backend:n,attrs:{shape:[r/a,a]}}),o=i.shape,l=new eO("real",o,t),u=new eO("imag",o,t),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:o},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:o}],h=n.runWebGLProgram(l,c,"float32"),p=n.runWebGLProgram(u,c,"float32"),d=aF({inputs:{real:h,imag:p},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p);const f=kF({inputs:{x:d},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(d),f}const nO={kernelName:jt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return tO(s,!1,n)}};class sO{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}function rO(e){const{backend:t,attrs:n}=e,{shape:s,value:r}=n;let{dtype:a}=n;if(a=a||Ce(r),"string"===a){const e=ge(a,se(s));return e.fill(r),t.makeTensorInfo(s,a,e)}{const e=new sO(s,r),n=e.getCustomSetupFunc(r);return t.runWebGLProgram(e,[],a,n)}}const aO={kernelName:qt,backendName:"webgl",kernelFunc:rO};class iO{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const oO={kernelName:Kt,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,r=new iO(n.shape);return s.runWebGLProgram(r,[n],n.dtype)}},lO="return floor(x);",uO=dF({opSnippet:lO,packedOpSnippet:lO,cpuKernelImpl:yR}),cO={kernelName:Xt,backendName:"webgl",kernelFunc:uO},hO=fF({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),pO={kernelName:Yt,backendName:"webgl",kernelFunc:hO};class dO{constructor(e){this.variableNames=["A"];const t=DA(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class fO{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=DA(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const mO={kernelName:Ms,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:r}=t;const{numChannels:a}=s,i="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,l="undefined"!=typeof ImageBitmap&&r instanceof ImageBitmap,[u,c]=i?[r.videoWidth,r.videoHeight]:[r.width,r.height],h=[c,u],p=[c,u,a];(o||i||l)&&(null==gO&&(gO=document.createElement("canvas").getContext("2d")),gO.canvas.width=u,gO.canvas.height=c,gO.drawImage(r,0,0,u,c),r=gO.canvas);const d=n.makeTensorInfo(h,"int32");n.texData.get(d.dataId).usage=rA.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),r);const f=Pe().getBool("WEBGL_PACK")?new fO(p):new dO(p),m=n.runWebGLProgram(f,[d],"int32");return n.disposeData(d.dataId),m}};let gO;const yO={kernelName:Bs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s,m=kl(c),g=pl(r.shape,a.shape,l,h,u,p,!1,m);let y;const b=[];if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(Pe().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])y=r_({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});else{const e=null!=i,t=null!=o,s="leakyrelu"===d,l=d?mF(d,!1):null,u=new e_(g,e,l,t,s),c=[r,a];if(i&&c.push(i),o&&c.push(o),s){const e=n.makeTensorInfo([],"float32",Zs(f,"float32"));c.push(e),b.push(e)}y=n.runWebGLProgram(u,c,"float32")}else y=s_({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});const x=kF({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}},bO={kernelName:Ps,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:h,activation:p,leakyreluAlpha:d}=s,f=[];let m=c;null==m&&(m=[1,1]),Q(wl(l,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`));const g=pl(r.shape,a.shape,l,m,u,h,!0),y=Pe().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,b=p?mF(p,y):null,x=[r,a],w=null!=i,k=null!=o,v="leakyrelu"===p;if(w&&x.push(i),k&&x.push(o),v){const e=n.makeTensorInfo([],"float32",Zs(d,"float32"));x.push(e),f.push(e)}let N;N=y?new E_(g,w,b,k,v):new T_(g,w,b,k,v);const I=n.runWebGLProgram(N,x,"float32");return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),I}};class xO{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const s=iR(t.length),r=iR(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${s} strides = ${s}(${this.strides});\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const wO={kernelName:Qt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=r.shape,i=a[a.length-1],[o,l,u,c]=yi(s,r),h=kF({inputs:{x:r},backend:n,attrs:{shape:[l,i]}}),p=kF({inputs:{x:s},backend:n,attrs:{shape:[se(s.shape)/u,u]}}),d=new xO(i,c,[l,u]),f=n.runWebGLProgram(d,[p,h],p.dtype),m=kF({inputs:{x:f},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),m}};class kO{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=iR(this.rank),s=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let t=0;t<e.length;t++)2===t?s.push("int(getIndices(resRC.x, resRC.z))"):s.push(`${n[t]}`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}const vO={kernelName:Zt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s,l=cd(r,a,de(i,r.shape)[0],o),u=se(a.shape),c=[],h=kF({inputs:{x:r},backend:n,attrs:{shape:[l.batchSize,l.outerSize,l.dimSize,l.sliceSize]}}),p=kF({inputs:{x:a},backend:n,attrs:{shape:[l.batchSize,u/l.batchSize]}});c.push(h),c.push(p);const d=[l.batchSize,l.outerSize,u/l.batchSize,l.sliceSize];if(n.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const e=n.bufferSync(p),t=n.bufferSync(h),s=bR(t,e,d);return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(l.outputShape,s.dtype,s.values)}const f=new kO(h.shape,d),m=n.runWebGLProgram(f,[h,p],h.dtype);c.push(m);const g=kF({inputs:{x:m},backend:n,attrs:{shape:l.outputShape}});return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}},NO=fF({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:xR,dtype:"bool"}),IO={kernelName:en,backendName:"webgl",kernelFunc:NO},$O=fF({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool"}),CO={kernelName:tn,backendName:"webgl",kernelFunc:$O},SO={kernelName:sn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return tO(s,!0,n)}},TO=dF({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),EO={kernelName:an,backendName:"webgl",kernelFunc:TO},AO=dF({opSnippet:"return float(isinf(x));",dtype:"bool"}),RO={kernelName:on,backendName:"webgl",kernelFunc:AO},FO=dF({opSnippet:"return float(isnan(x));",dtype:"bool"}),DO={kernelName:ln,backendName:"webgl",kernelFunc:FO},_O=fF({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:wR,dtype:"bool"}),OO={kernelName:cn,backendName:"webgl",kernelFunc:_O},MO=fF({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",dtype:"bool"}),LO={kernelName:hn,backendName:"webgl",kernelFunc:MO},zO={kernelName:pn,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=kR(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},BO=dF({opSnippet:"if (x < 0.0) return NAN;\n  return log(x);",packedOpSnippet:"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:vR}),PO={kernelName:dn,backendName:"webgl",kernelFunc:BO},WO=dF({opSnippet:"return log(1.0 + x);"}),VO={kernelName:fn,backendName:"webgl",kernelFunc:WO},UO=fF({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),GO={kernelName:mn,backendName:"webgl",kernelFunc:UO},HO=dF({opSnippet:"return float(!(x >= 1.0));"}),jO={kernelName:gn,backendName:"webgl",kernelFunc:HO},qO=fF({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),KO={kernelName:yn,backendName:"webgl",kernelFunc:qO};class XO{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class YO{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const JO={kernelName:xn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s,u=Pe().getBool("WEBGL_PACK_NORMALIZATION")?new YO(r.shape,a,i,o,l):new XO(r.shape,a,i,o,l);return n.runWebGLProgram(u,[r],r.dtype)}};class ZO{constructor(e,t,n,s,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${r})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const QO={kernelName:wn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s,h=new ZO(r.shape,o,l,u,c);return n.runWebGLProgram(h,[r,a,i],r.dtype)}};function eM(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=r.shape.length,l=de(a,r.shape);let u=l;const c=Wu(u,o),h=null!=c,p=n.shouldExecuteOnCPU([r]);let d=r;if(h){if(p){const e=n.texData.get(d.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const s=LR(e,r.shape,r.dtype,c,t);d=n.makeTensorInfo(t,r.dtype),n.texData.get(d.dataId).values=s}else d=TF(r,c,n);u=Uu(u.length,o)}Pu("max",u,o);const[f,m]=zu(d.shape,u);let g,y=f;if(i&&(y=Bu(f,l)),p){const e=n.texData.get(d.dataId).values,t=NR(e,se(m),y,r.dtype);g=n.makeTensorInfo(y,r.dtype),n.texData.get(g.dataId).values=t}else g=function(e,t,n,s){const r=se(t),a=kF({inputs:{x:e},attrs:{shape:[se(e.shape)/r,r]},backend:s}),i=$F(a,e.dtype,"max",s),o=kF({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(d,m,y,n);return h&&n.disposeIntermediateTensorInfo(d),g}const tM={kernelName:kn,backendName:"webgl",kernelFunc:eM},nM=fF({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:IR}),sM={kernelName:vn,backendName:"webgl",kernelFunc:nM},rM={kernelName:Nn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;RA(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Q(wl(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=cl(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&ae(u.inShape,u.outShape))return sF({inputs:{x:r},backend:n});const c=new pD(u,"max",!1);return n.runWebGLProgram(c,[r],r.dtype)}},aM={kernelName:$n,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dataFormat:l,dimRoundingMode:u}=s,c=hl(r.shape,a,i,[1,1,1],o,u,l),h=new dD(c,"max",!1);return n.runWebGLProgram(h,[r],r.dtype)}};class iM{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,r=e.effectiveFilterHeight,a=e.effectiveFilterWidth,i=r-1-e.padInfo.top,o=a-1-e.padInfo.left,l=r*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class oM{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.dilationDepth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=l-1-e.padInfo.top,p=u-1-e.padInfo.left,d=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const lM={kernelName:Cn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=hl(i.shape,o,l,[1,1,1],u,c),p=new dD(h,"max",!0),d=n.runWebGLProgram(p,[i],i.dtype),f=new oM(h),m=n.runWebGLProgram(f,[r,d],i.dtype);return n.disposeIntermediateTensorInfo(d),m}},uM={kernelName:In,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;RA([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=cl(o.shape,l,u,1,c,h),d=new pD(p,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),m=new iM(p),g=n.runWebGLProgram(m,[r,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}},cM={kernelName:Sn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;Q(4===s.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`));const u=[1,1];Q(wl(a,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`));const c=cl(s.shape,r,a,u,i),[h,p]=function(e,t,n,s){let r=new pD(n,"max",!1);const a=s.runWebGLProgram(r,[e],"float32");return r=new pD(n,"max",!0,!0,t),[a,s.runWebGLProgram(r,[e],"float32")]}(s,o,c,l);return[h,p]}},hM={kernelName:Tn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:r,axis:a}=t,i=n,o=s.shape.length,l=de(a,s.shape);let u=l;const c=Wu(u,o),h=null!=c,p=i.shouldExecuteOnCPU([s]),d=[];let f=s;if(h){if(p){const e=i.texData.get(f.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const n=LR(e,s.shape,s.dtype,c,t);f=i.makeTensorInfo(t,s.dtype),i.texData.get(f.dataId).values=n}else f=TF(s,c,i);d.push(f),u=Uu(u.length,o)}Pu("sum",u,o);const[m,g]=zu(f.shape,u);let y=m;r&&(y=Bu(m,l));const b=function(e,t,n,s){const r=se(t),a=kF({inputs:{x:e},attrs:{shape:[se(e.shape)/r,r]},backend:s}),i=$F(a,"float32","mean",s),o=kF({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(f,g,y,i);for(const e of d)i.disposeIntermediateTensorInfo(e);return b}},pM={kernelName:En,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=de(a,r.shape);let u=l;const c=Wu(u,o);let h=r;null!=c&&(h=RF({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Uu(u.length,r.shape.length)),Pu("min",u,o);const[p,d]=zu(h.shape,u),f=kF({inputs:{x:h},backend:n,attrs:{shape:[-1,se(d)]}}),m=$F(f,f.dtype,"min",n);let g;return g=kF(i?{inputs:{x:m},backend:n,attrs:{shape:Bu(p,l)}}:{inputs:{x:m},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},dM=fF({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:$R}),fM={kernelName:An,backendName:"webgl",kernelFunc:dM};class mM{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=iR(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class gM{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=iR(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=PR("rc",s),l=PR("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===s){const e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[s-2]} += 1;\n        if(${o[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const yM={kernelName:Rn,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:r,mode:a}=n,i=Pe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new gM(s.shape,r,a):new mM(s.shape,r,a);return t.runWebGLProgram(i,[s],s.dtype)}},bM=fF({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),xM={kernelName:Fn,backendName:"webgl",kernelFunc:bM};class wM{constructor(e,t,n){this.variableNames=["probs"],this.outputShape=[e,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.seedLoc&&(this.seedLoc=t.getUniformLocation(n,"seed")),t.gl.uniform1f(this.seedLoc,e)}}}const kM=fF({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),vM={kernelName:zt,backendName:"webgl",kernelFunc:kM},NM="return a - b;",IM=fF({opSnippet:NM,packedOpSnippet:NM,supportsComplex:!0,cpuKernelImpl:_R}),$M={kernelName:Ns,backendName:"webgl",kernelFunc:IM};function CM(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=de([a],r.shape),o=eM({inputs:{x:r},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=Bu(o.shape,i),u=kF({inputs:{x:o},backend:n,attrs:{shape:l}}),c=IM({inputs:{a:r,b:u},backend:n}),h=q_({inputs:{x:c},backend:n}),p=EF({inputs:{x:h},backend:n,attrs:{axis:i,keepDims:!1}}),d=kF({inputs:{x:p},backend:n,attrs:{shape:l}}),f=kM({inputs:{a:h,b:d},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),f}const SM={kernelName:ws,backendName:"webgl",kernelFunc:CM},TM={kernelName:Dn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s,l=o?r:CM({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),u=l.shape[0],c=l.shape[1],h=new wM(u,c,a),p=h.getCustomSetupFunc(i),d=n.runWebGLProgram(h,[l],"int32",p);return o||n.disposeIntermediateTensorInfo(l),d}},EM="return -x;",AM={kernelName:On,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,r]=SR(e.values,s.shape,s.dtype);return n.makeTensorInfo(r,s.dtype,t)}let r;return r=Pe().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new YR(s.shape,EM):new qR(s.shape,EM),n.runWebGLProgram(r,[s],s.dtype)}},RM=Qh,FM={kernelName:Ln,backendName:"webgl",kernelFunc:function(e){Jp("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=RM(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},DM=ep,_M={kernelName:zn,backendName:"webgl",kernelFunc:function(e){Jp("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),{selectedIndices:p,validOutputs:d}=DM(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},OM=tp,MM={kernelName:Bn,backendName:"webgl",kernelFunc:function(e){Jp("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=OM(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class LM{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const zM={kernelName:Wn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{depth:a,onValue:i,offValue:o}=s,l=se(r.shape),u=new LM(l,a,i,o),c=kF({inputs:{x:r},backend:n,attrs:{shape:[l]}}),h=n.runWebGLProgram(u,[c],r.dtype);n.disposeIntermediateTensorInfo(c);const p=kF({inputs:{x:h},backend:n,attrs:{shape:[...r.shape,a]}});return n.disposeIntermediateTensorInfo(h),p}};function BM(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=DD({inputs:{input:s},backend:n}),t=BM({inputs:{x:e},backend:n}),r=KD({inputs:{input:s},backend:n}),a=BM({inputs:{x:r},backend:n}),i=aF({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return rO({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const PM={kernelName:_s,backendName:"webgl",kernelFunc:BM},WM={kernelName:Pn,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const t=DD({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=KD({inputs:{input:r},backend:s}),i=BM({inputs:{x:a},backend:s}),o=aF({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return rO({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:s})}},VM={kernelName:Vn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return X_({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{ee(a,e.shape,"All tensors passed to stack must have matching shapes"),Q(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],l=ZD({inputs:t.map((e=>{const t=X_({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}};class UM{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=iR(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class GM{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=iR(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=PR("rc",s),l=PR("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${r} rc = outputLoc;`,`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],p=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===s?2:4;e<t;e++)d+=`\n        ${h[e]}\n        if (${p}) {\n          result[${e}] = float(${n});\n        } else {\n          ${r} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===s?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const HM=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s,o=Pe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new GM(r.shape,a,i):new UM(r.shape,a,i);return n.runWebGLProgram(o,[r],r.dtype)},jM={kernelName:Un,backendName:"webgl",kernelFunc:HM},qM=fF({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),KM={kernelName:Hn,backendName:"webgl",kernelFunc:qM},XM={kernelName:qn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=[],u=de(a,r.shape);let c=u;const h=Wu(c,o);let p,d=r;if(null!=h&&(d=RF({inputs:{x:r},backend:n,attrs:{perm:h}}),c=Uu(c.length,o),l.push(d)),Pu("prod",c,o),n.shouldExecuteOnCPU([d])){const e=n.texData.get(d.dataId).values,{outVals:t,outShape:s,outDtype:r}=TR(d.shape,d.dtype,e,c);p=n.makeTensorInfo(s,r,t)}else{const[e,t]=zu(d.shape,c),s=se(t),a=kF({inputs:{x:d},backend:n,attrs:{shape:[-1,s]}}),i=$F(a,Cr(r.dtype),"prod",n);p=kF({inputs:{x:i},backend:n,attrs:{shape:e}}),l.push(a),l.push(i)}if(i){l.push(p);const e=Bu(p.shape,u);p=kF({inputs:{x:p},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},YM=e=>{const{backend:t,attrs:n}=e,{start:s,stop:r,step:a,dtype:i}=n,o=ER(s,r,a,i);return t.makeTensorInfo([o.length],i,o)},JM={kernelName:Kn,backendName:"webgl",kernelFunc:YM},ZM=dF({opSnippet:"return 1.0 / x;"}),QM={kernelName:Yn,backendName:"webgl",kernelFunc:ZM},eL=dF({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),tL={kernelName:Jn,backendName:"webgl",kernelFunc:eL},nL=dF({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),sL={kernelName:ss,backendName:"webgl",kernelFunc:nL};class rL{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class aL{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const iL={kernelName:ts,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=Pe().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new aL(r.shape,l,u,a,i):new rL(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],"float32")}};class oL{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const lL={kernelName:ns,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new oL(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class uL{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}const cL={kernelName:Qn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=new uL(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],r.dtype)}};class hL{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const pL={kernelName:es,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new hL(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class dL{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map(((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s))).join(","),r=iR(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class fL{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=PR("rc",n),r=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=iR(n);function o(n){const s=e.map(((s,r)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(r,n)));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(s.slice())};\n          if(${r}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(s.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const mL={kernelName:rs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s,i=r.shape.length,o=de(a,r.shape);if(0===i)return sF({inputs:{x:r},backend:n});const l=Pe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new fL(r.shape,o):new dL(r.shape,o);return n.runWebGLProgram(l,[r],r.dtype)}};class gL{constructor(e,t,n,s){this.variableNames=["Image"],this.outputShape=[];const r=e[1],a=e[2],i=Math.sin(t).toFixed(3),o=Math.cos(t).toFixed(3);this.outputShape=e;const[l,u]=Lp(s,r,a),c=l.toFixed(3),h=u.toFixed(3);let p="";p="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${c}) * ${o} - (float(y) - ${h}) * ${i};\n          float coordYFloat = (float(x) - ${c}) * ${i} + (float(y) - ${h}) * ${o};\n          int coordX = int(round(coordXFloat + ${c}));\n          int coordY = int(round(coordYFloat + ${h}));\n          ${p}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${r}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const yL={kernelName:Ls,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=new gL(s.shape,r,a,i);return o.runWebGLProgram(l,[s],s.dtype)}},bL=dF({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),xL={kernelName:as,backendName:"webgl",kernelFunc:bL},wL=dF({opSnippet:"return inversesqrt(x);",cpuKernelImpl:AR}),kL={kernelName:is,backendName:"webgl",kernelFunc:wL};class vL{constructor(e,t,n,s,r,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=iR(r.length),l=iR(a.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${r});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const NL={kernelName:os,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=wi(0,r,i),p=[h/u,u];if(0===h)return n.makeTensorInfo(i,r.dtype);const d=kF({inputs:{x:r},backend:n,attrs:{shape:[l,o]}}),f=kF({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new vL(l,o,d.shape.length,f.shape.length,c,p),y=n.runWebGLProgram(g,[f,d,m],f.dtype),b=kF({inputs:{x:y},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class IL{constructor(e,t,n){let s,r;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let s=0;s<t.length;s++)i.push(`${n[s]}`),s<e&&a.push(`${n[s]}`);s=a.join(),r=i.join()}const a=iR(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}const $L={kernelName:ls,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t,i=new IL(s.shape.length,r.shape,r.shape.length);return n.runWebGLProgram(i,[s,r,a],$r(r.dtype,a.dtype))}},CL=dF({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${Up};\n  float scale = ${Gp};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),SL={kernelName:us,backendName:"webgl",kernelFunc:CL},TL=dF({opSnippet:"return 1.0 / (1.0 + exp(-1.0 * x));"}),EL={kernelName:fs,backendName:"webgl",kernelFunc:TL},AL=dF({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),RL={kernelName:ds,backendName:"webgl",kernelFunc:AL},FL=dF({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),DL={kernelName:hs,backendName:"webgl",kernelFunc:FL},_L=dF({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),OL={kernelName:ps,backendName:"webgl",kernelFunc:_L},ML=dF({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),LL={kernelName:ms,backendName:"webgl",kernelFunc:ML},zL={kernelName:bs,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;Q(r.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...i);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=[],c=HM({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),h=zp(c.shape,a,o,!1),p=Bp(h.length,a.length,!1),d=Pp(c.shape,a,o,!1),f=kF({inputs:{x:c},backend:n,attrs:{shape:h}}),m=RF({inputs:{x:f},backend:n,attrs:{perm:p}}),g=kF({inputs:{x:m},backend:n,attrs:{shape:d}});return u.push(c),u.push(f),u.push(m),u.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}},BL={kernelName:Is,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,strides:c,outputSize:h}=wi(0,r,o),p=new vL(u,l,r.shape.length,a.shape.length,c,[h,1],!1),d=n.runWebGLProgram(p,[a,r,i],a.dtype),f=kF({inputs:{x:d},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(d),f}},PL={kernelName:xs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=de(i,r.shape)[0],l=od(r,a,o),u=r.shape.length,c=new Array(u).fill(0),h=r.shape.slice();return l.map((e=>{const t=[...h];t[o]=e;const s=SD({inputs:{x:r},backend:n,attrs:{begin:c,size:t}});return c[o]+=e,s}))}},WL=dF({opSnippet:"return sqrt(x);"}),VL={kernelName:gs,backendName:"webgl",kernelFunc:WL},UL=dF({opSnippet:"return x * x;"}),GL={kernelName:vs,backendName:"webgl",kernelFunc:UL},HL="return (a - b) * (a - b);",jL=fF({opSnippet:HL,packedOpSnippet:HL}),qL={kernelName:ks,backendName:"webgl",kernelFunc:jL},KL={kernelName:Os,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,r=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new qR(s.shape,r);return n.runWebGLProgram(a,[s],s.dtype)}};class XL{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,r=iR(n.length),a=iR(n.length);let i="";if(1===s)i="coords * strides + begin";else{let e=0;i=n.map(((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`))).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const YL={kernelName:$s,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s,{nonStrided:d,$begin:f,$strides:m,size:g,newShape:y,outShape:b}=Mi(r.shape,a,i,o,l,u,c,h,p),x=kF({inputs:{x:r},backend:n,attrs:{shape:y}});let w;if(d){const e=SD({inputs:{x},backend:n,attrs:{begin:f,size:g}});w=kF({inputs:{x:e},backend:n,attrs:{shape:b}}),n.disposeIntermediateTensorInfo(e)}else if(b.some((e=>0===e)))w=n.makeTensorInfo(b,r.dtype,[]);else if(n.shouldExecuteOnCPU([x])){const e=n.texData.get(x.dataId).values,t=Va(x.shape,x.dtype,e),s=DR(b,t,m,f);w=n.makeTensorInfo(b,x.dtype,s.values)}else{const e=new XL(f,m,b);w=n.runWebGLProgram(e,[x],x.dtype)}const k=kF({inputs:{x:w},backend:n,attrs:{shape:b}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(w),k}},JL=dF({opSnippet:"return tan(x);"}),ZL={kernelName:Cs,backendName:"webgl",kernelFunc:JL},QL=dF({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),ez={kernelName:Ss,backendName:"webgl",kernelFunc:QL};class tz{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[s]*t[s];this.outputShape=n,this.rank=n.length;const s=iR(this.rank),r=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let t=0;t<e.length;t++)s.push(`imod(${n[t]}, ${e[t]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function nz(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;if("string"===r.dtype){const e=n.readSync(r.dataId).map((e=>sr(e))),t=Va(r.shape,r.dtype,e),s=OR(t,a);return n.makeTensorInfo(s.shape,s.dtype,s.values)}const i=new tz(r.shape,a);return n.runWebGLProgram(i,[r],r.dtype)}const sz={kernelName:Ts,backendName:"webgl",kernelFunc:nz},rz={kernelName:Es,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s,o=n.readSync(r.dataId),[l,u]=MR(o,r.shape,r.dtype,a,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},az={kernelName:Rs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;RA(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(a.dataId),{outputValues:o,outputShape:l,indices:u}=zR(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},iz={kernelName:Fs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r,o=i.shape.length,l=r.shape[a],u=new Array(o-1);let c=0;for(let e=0;e<o;e++)e!==a&&(u[c++]=i.shape[e]);const h=[],p=new Array(o).fill(0),d=i.shape.slice();d[a]=1;const f=new Array(l);for(let e=0;e<f.length;e++){p[a]=e;const t=SD({inputs:{x:i},backend:n,attrs:{begin:p,size:d}}),s=kF({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=s,h.push(t)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class oz{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,r=e.inSize,a=e.numSegments,i=a*Math.ceil(r/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const lz=[JO,QO,_F,MF,zF,PF,UF,jF,qF,KF,eD,tD,sD,aD,uD,oD,hD,mD,fD,bD,xD,wD,ND,ED,AD,OD,zD,WD,GD,iF,QD,c_,h_,a_,d_,f_,p_,g_,b_,w_,I_,$_,S_,D_,__,A_,M_,z_,P_,W_,U_,H_,K_,Y_,Q_,nO,aO,oO,cO,pO,mO,yO,bO,wO,vO,IO,CO,rF,SO,XD,EO,RO,DO,uF,OO,LO,zO,VO,PO,GO,jO,KO,tM,aM,rM,lM,uM,cM,sM,hM,pM,fM,yM,xM,TM,wF,AM,FM,_M,MM,FD,zM,WM,VM,jM,KM,pF,XM,JM,_D,vM,QM,sL,tL,vF,iL,lL,cL,pL,mL,yL,xL,kL,NL,$L,SL,EL,RL,DL,OL,TD,SM,LL,zL,BL,PL,VL,GL,qL,KL,YL,$M,AF,ZL,ez,sz,rz,FF,az,iz,{kernelName:Ds,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s,o=r.shape.length,l=[];let u=0;const c=Wu([u],o);let h=r;null!=c&&(h=RF({inputs:{x:r},backend:n,attrs:{perm:c}}),l.push(h),u=Uu(1,o)[0]);const p=ud(h.shape,u,i),d=se([h.shape[u]]),f=kF({inputs:{x:h},backend:n,attrs:{shape:[-1,d]}});l.push(f);const m=Cr(r.dtype),g=(e,t,s,r,a)=>{const i=e.shape[0],o=e.shape[1],u=ld(o,a),c=new oz({windowSize:u,inSize:o,batchSize:i,numSegments:a},t),h=n.compileAndRun(c,[e,s],r);if(l.push(h),h.shape[1]===a)return h;const p=YM({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),d=nz({inputs:{x:p},backend:n,attrs:{reps:[o/u]}});return l.push(p),l.push(d),g(h,t,d,r,a)},y=kF({inputs:{x:g(f,"unsortedSegmentSum",a,m,i)},backend:n,attrs:{shape:p}});let b=y;if(null!=c){l.push(y);const e=Vu(c);b=RF({inputs:{x:b},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},PM];for(const e of lz)js(e);const uz={"tfjs-core":Ji,"tfjs-backend-cpu":"3.1.0","tfjs-backend-webgl":"3.1.0","tfjs-data":II,"tfjs-layers":zy,"tfjs-converter":yN,tfjs:"3.1.0"}},381:(e,t,n)=>{var s=n(257),r=n(659),a=n(578),i=n(339),o=n(561),l=n(798),u=n(743);u.alea=s,u.xor128=r,u.xorwow=a,u.xorshift7=i,u.xor4096=o,u.tychei=l,e.exports=u},257:function(e,t,n){var s;!function(e,r,a){function i(e){var t,n=this,s=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function l(e,t){var n=new i(e),s=t&&t.state,r=n.next;return r.int32=function(){return 4294967296*n.next()|0},r.double=function(){return r()+11102230246251565e-32*(2097152*r()|0)},r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.alea=l}(0,e=n.nmd(e),n.amdD)},798:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function l(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.tychei=l}(0,e=n.nmd(e),n.amdD)},659:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function l(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xor128=l}(0,e=n.nmd(e),n.amdD)},561:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this;t.next=function(){var e,n,s=t.w,r=t.X,a=t.i;return t.w=s=s+1640531527|0,n=r[a+34&127],e=r[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=r[a]=n^e,t.i=a,n+(s^s>>>16)|0},function(e,t){var n,s,r,a,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),r=0,a=-32;a<l;++a)t&&(s^=t.charCodeAt((a+32)%t.length)),0===a&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(i=i+1640531527|0,r=0==(n=o[127&a]^=s+i)?r+1:0);for(r>=128&&(o[127&(t&&t.length||0)]=-1),r=127,a=512;a>0;--a)s=o[r+34&127],n=o[r=r+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[r]=s^n;e.w=i,e.X=o,e.i=r}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&(s.X&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xor4096=l}(0,e=n.nmd(e),n.amdD)},339:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this;t.next=function(){var e,n,s=t.x,r=t.i;return e=s[r],n=(e^=e>>>7)^e<<24,n^=(e=s[r+1&7])^e>>>10,n^=(e=s[r+3&7])^e>>>3,n^=(e=s[r+4&7])^e<<7,e=s[r+7&7],n^=(e^=e<<13)^e<<9,s[r]=n,t.i=r+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&(s.x&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xorshift7=l}(0,e=n.nmd(e),n.amdD)},578:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function l(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xorwow=l}(0,e=n.nmd(e),n.amdD)},743:(e,t,n)=>{var s;!function(r,a){var i,o=this,l=256,u=a.pow(l,6),c=a.pow(2,52),h=2*c,p=255;function d(e,t,n){var s=[],p=y(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,b(r)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(l):(e=new Uint8Array(l),(o.crypto||o.msCrypto).getRandomValues(e)),b(e)}catch(e){var t=o.navigator,n=t&&t.plugins;return[+new Date,o,n,o.screen,b(r)]}}():e,3),s),d=new f(s),x=function(){for(var e=d.g(6),t=u,n=0;e<c;)e=(e+n)*l,t*=l,n=d.g(1);for(;e>=h;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|d.g(4)},x.quick=function(){return d.g(4)/4294967296},x.double=x,y(b(d.S),r),(t.pass||n||function(e,t,n,s){return s&&(s.S&&m(s,d),e.state=function(){return m(d,{})}),n?(a.random=e,t):e})(x,p,"global"in t?t.global:this==a,t.state)}function f(e){var t,n=e.length,s=this,r=0,a=s.i=s.j=0,i=s.S=[];for(n||(e=[n++]);r<l;)i[r]=r++;for(r=0;r<l;r++)i[r]=i[a=p&a+e[r%n]+(t=i[r])],i[a]=t;(s.g=function(e){for(var t,n=0,r=s.i,a=s.j,i=s.S;e--;)t=i[r=p&r+1],n=n*l+i[p&(i[r]=i[a=p&a+t])+(i[a]=t)];return s.i=r,s.j=a,n})(l)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(g(e[n],t-1))}catch(e){}return s.length?s:"string"==r?e:e+"\0"}function y(e,t){for(var n,s=e+"",r=0;r<s.length;)t[p&r]=p&(n^=19*t[p&r])+s.charCodeAt(r++);return b(t)}function b(e){return String.fromCharCode.apply(0,e)}if(a.seedrandom=d,y(a.random(),r),e.exports){e.exports=d;try{i=n(906)}catch(e){}}else void 0===(s=function(){return d}.call(t,n,t,e))||(e.exports=s)}([],Math)},906:()=>{},993:()=>{},352:()=>{},589:()=>{},758:()=>{}},t={};function n(s){if(t[s])return t[s].exports;var r=t[s]={id:s,loaded:!1,exports:{}};return e[s].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.d=(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),n(138)})();